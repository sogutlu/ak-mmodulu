

Microchip Technology PIC18 LITE Macro Assembler V1.38 build -256452561 
                                                                                               Tue Jan 31 07:44:22 2017

Microchip Technology Omniscient Code Generator v1.38 (Free mode) build 201607010351
     1                           	processor	18F45K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	eeprom_data,global,class=EEDATA,delta=1
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	bssBIGRAM,global,class=BIGRAM,space=1,delta=1
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1
    36                           	psect	text22,global,reloc=2,class=CODE,delta=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1
    39                           	psect	text25,global,reloc=2,class=CODE,delta=1
    40                           	psect	text26,global,reloc=2,class=CODE,delta=1
    41                           	psect	text27,global,reloc=2,class=CODE,delta=1
    42                           	psect	text28,global,reloc=2,class=CODE,delta=1
    43                           	psect	text29,global,reloc=2,class=CODE,delta=1
    44                           	psect	text30,global,reloc=2,class=CODE,delta=1
    45                           	psect	text31,global,reloc=2,class=CODE,delta=1
    46                           	psect	text32,global,reloc=2,class=CODE,delta=1
    47                           	psect	text33,global,reloc=2,class=CODE,delta=1
    48                           	psect	text34,global,reloc=2,class=CODE,delta=1
    49                           	psect	text35,global,reloc=2,class=CODE,delta=1
    50                           	psect	text36,global,reloc=2,class=CODE,delta=1
    51                           	psect	text37,global,reloc=2,class=CODE,delta=1
    52                           	psect	text38,global,reloc=2,class=CODE,delta=1
    53                           	psect	text39,global,reloc=2,class=CODE,delta=1
    54                           	psect	text40,global,reloc=2,class=CODE,delta=1
    55                           	psect	text41,global,reloc=2,class=CODE,delta=1
    56                           	psect	text42,global,reloc=2,class=CODE,delta=1
    57                           	psect	text43,global,reloc=2,class=CODE,delta=1
    58                           	psect	text44,global,reloc=2,class=CODE,delta=1
    59                           	psect	text45,global,reloc=2,class=CODE,delta=1
    60                           	psect	text46,global,reloc=2,class=CODE,delta=1
    61                           	psect	text47,global,reloc=2,class=CODE,delta=1
    62                           	psect	text48,global,reloc=2,class=CODE,delta=1
    63                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    64                           	psect	text50,global,reloc=2,class=CODE,delta=1
    65                           	psect	text51,global,reloc=2,class=CODE,delta=1
    66                           	psect	text52,global,reloc=2,class=CODE,delta=1
    67                           	psect	text53,global,reloc=2,class=CODE,delta=1
    68                           	psect	text54,global,reloc=2,class=CODE,delta=1
    69                           	psect	text55,global,reloc=2,class=CODE,delta=1
    70                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    71                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    72                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    73  0000                     
    74                           	psect	eeprom_data
    75  F00000  00 01 03 D0 00 06 00 00 	db	0,1,3,208,0,6,0,0	;# 
    76  F00008  00 00 00 00 00 00 00 00 	db	0,0,0,0,0,0,0,0	;# 
    77  F00010  00 00 00 00 01 FC 00 B4 	db	0,0,0,0,1,252,0,180	;# 
    78  F00018  01 FB 00 B4 00 00 00 CD 	db	1,251,0,180,0,0,0,205	;# 
    79  F00020  00 00 00 CD 00 00 06 13 	db	0,0,0,205,0,0,6,19	;# 
    80  F00028  00 00 00 00 00 00 00 00 	db	0,0,0,0,0,0,0,0	;# 
    81  F00030  00 00 00 00 00 00 00 00 	db	0,0,0,0,0,0,0,0	;# 
    82  F00038  00 00 00 0F 00 00 00 00 	db	0,0,0,15,0,0,0,0	;# 
    83  F00040  00 00 00 00 00 00 00 00 	db	0,0,0,0,0,0,0,0	;# 
    84  F00048  00 00 00 00 00 00 00 00 	db	0,0,0,0,0,0,0,0	;# 
    85                           
    86                           	psect	smallconst
    87  000600                     __psmallconst:
    88                           	opt stack 0
    89  000600  00                 	db	0
    90  000601                     _adc_list:
    91                           	opt stack 0
    92  000601  14                 	db	20
    93  000602  15                 	db	21
    94  000603  16                 	db	22
    95  000604  17                 	db	23
    96  000605                     __end_of_adc_list:
    97                           	opt stack 0
    98  0000                     _ANSELA	set	3896
    99  0000                     _ANSELB	set	3897
   100  0000                     _ANSELC	set	3898
   101  0000                     _ANSELD	set	3899
   102  0000                     _ANSELE	set	3900
   103  0000                     _CCP3CON	set	3933
   104  0000                     _CCP4CON	set	3927
   105  0000                     _CCP5CON	set	3924
   106  0000                     _CCPTMRS0	set	3913
   107  0000                     _PR4	set	3922
   108  0000                     _T4CON	set	3921
   109  0000                     _TMR4	set	3923
   110  0000                     _VREFCON0	set	3906
   111  0000                     _VREFCON1	set	3905
   112  0000                     _VREFCON2	set	3904
   113  0000                     _ADCON0	set	4034
   114  0000                     _ADCON1	set	4033
   115  0000                     _ADCON2	set	4032
   116  0000                     _ADRESH	set	4036
   117  0000                     _ADRESL	set	4035
   118  0000                     _BAUDCON1	set	4024
   119  0000                     _BAUDCON1bits	set	4024
   120  0000                     _CCP1CON	set	4029
   121  0000                     _CCP2CON	set	3942
   122  0000                     _CCPR1H	set	4031
   123  0000                     _CCPR1L	set	4030
   124  0000                     _CCPR2H	set	3944
   125  0000                     _CCPR2L	set	3943
   126  0000                     _ECCP1AS	set	4022
   127  0000                     _ECCP2AS	set	3940
   128  0000                     _EEADR	set	4009
   129  0000                     _EECON1bits	set	4006
   130  0000                     _EECON2	set	4007
   131  0000                     _EEDATA	set	4008
   132  0000                     _INTCON	set	4082
   133  0000                     _INTCON2	set	4081
   134  0000                     _INTCON3	set	4080
   135  0000                     _IPR1	set	3999
   136  0000                     _IPR2	set	4002
   137  0000                     _LATCbits	set	3979
   138  0000                     _LATDbits	set	3980
   139  0000                     _LATEbits	set	3981
   140  0000                     _OSCCON	set	4051
   141  0000                     _OSCCON2	set	4050
   142  0000                     _OSCTUNE	set	3995
   143  0000                     _PIE1	set	3997
   144  0000                     _PIE1bits	set	3997
   145  0000                     _PIE2	set	4000
   146  0000                     _PIR1	set	3998
   147  0000                     _PIR1bits	set	3998
   148  0000                     _PIR2	set	4001
   149  0000                     _PIR2bits	set	4001
   150  0000                     _PORTA	set	3968
   151  0000                     _PORTAbits	set	3968
   152  0000                     _PORTB	set	3969
   153  0000                     _PORTBbits	set	3969
   154  0000                     _PORTC	set	3970
   155  0000                     _PORTCbits	set	3970
   156  0000                     _PORTD	set	3971
   157  0000                     _PORTE	set	3972
   158  0000                     _PORTEbits	set	3972
   159  0000                     _PR2	set	4027
   160  0000                     _PWM1CON	set	4023
   161  0000                     _PWM2CON	set	3941
   162  0000                     _RC1REG	set	4014
   163  0000                     _RCSTA1	set	4011
   164  0000                     _SPBRG	set	4015
   165  0000                     _SPBRG1	set	4015
   166  0000                     _SPBRGH1	set	4016
   167  0000                     _SSP1BUF	set	4041
   168  0000                     _SSP1CON1	set	4038
   169  0000                     _SSP1CON1bits	set	4038
   170  0000                     _SSP1CON2	set	4037
   171  0000                     _SSP1CON3	set	4043
   172  0000                     _SSP1STAT	set	4039
   173  0000                     _SSP1STATbits	set	4039
   174  0000                     _SSP2CON1	set	3948
   175  0000                     _SSP2CON2	set	3947
   176  0000                     _SSP2CON3	set	3945
   177  0000                     _SSP2STAT	set	3949
   178  0000                     _T0CON	set	4053
   179  0000                     _T1CON	set	4045
   180  0000                     _T2CON	set	4026
   181  0000                     _T3CON	set	4017
   182  0000                     _TMR0L	set	4054
   183  0000                     _TMR1H	set	4047
   184  0000                     _TMR1L	set	4046
   185  0000                     _TMR2	set	4028
   186  0000                     _TMR3H	set	4019
   187  0000                     _TMR3L	set	4018
   188  0000                     _TRISA	set	3986
   189  0000                     _TRISB	set	3987
   190  0000                     _TRISC	set	3988
   191  0000                     _TRISD	set	3989
   192  0000                     _TRISE	set	3990
   193  0000                     _TX1REG	set	4013
   194  0000                     _TXSTA1	set	4012
   195  0000                     _TXSTA1bits	set	4012
   196  0000                     _ADIE	set	31982
   197  0000                     _ADIF	set	31990
   198  0000                     _GIE	set	32663
   199  0000                     _GODONE	set	32273
   200  0000                     _PEIE	set	32662
   201  0000                     _RCIF	set	31989
   202  0000                     _TMR0IE	set	32661
   203  0000                     _TMR1IE	set	31976
   204  0000                     _TMR1IF	set	31984
   205  0000                     _TMR2IE	set	31977
   206  0000                     _TMR2IF	set	31985
   207  0000                     _TMR3IE	set	32001
   208  0000                     _TMR3IF	set	32009
   209                           
   210                           ; #config settings
   211  000605  00                 	db	0	; dummy byte at the end
   212  0000                     
   213                           	psect	cinit
   214  002362                     __pcinit:
   215                           	opt stack 0
   216  002362                     start_initialization:
   217                           	opt stack 0
   218  002362                     __initialization:
   219                           	opt stack 0
   220                           
   221                           ; Clear objects allocated to BIGRAM (400 bytes)
   222  002362  EE01  F0C8         	lfsr	0,__pbssBIGRAM
   223  002366  EE11 F090          	lfsr	1,400
   224  00236A                     clear_0:
   225  00236A  6AEE               	clrf	postinc0,c
   226  00236C  50E5               	movf	postdec1,w,c
   227  00236E  50E1               	movf	fsr1l,w,c
   228  002370  E1FC               	bnz	clear_0
   229  002372  50E2               	movf	fsr1h,w,c
   230  002374  E1FA               	bnz	clear_0
   231                           
   232                           ; Clear objects allocated to BANK1 (200 bytes)
   233  002376  EE01  F000         	lfsr	0,__pbssBANK1
   234  00237A  0EC8               	movlw	200
   235  00237C                     clear_1:
   236  00237C  6AEE               	clrf	postinc0,c
   237  00237E  06E8               	decf	wreg,f,c
   238  002380  E1FD               	bnz	clear_1
   239                           
   240                           ; Clear objects allocated to BANK0 (113 bytes)
   241  002382  EE00  F060         	lfsr	0,__pbssBANK0
   242  002386  0E71               	movlw	113
   243  002388                     clear_2:
   244  002388  6AEE               	clrf	postinc0,c
   245  00238A  06E8               	decf	wreg,f,c
   246  00238C  E1FD               	bnz	clear_2
   247                           
   248                           ; Clear objects allocated to COMRAM (27 bytes)
   249  00238E  EE00  F028         	lfsr	0,__pbssCOMRAM
   250  002392  0E1B               	movlw	27
   251  002394                     clear_3:
   252  002394  6AEE               	clrf	postinc0,c
   253  002396  06E8               	decf	wreg,f,c
   254  002398  E1FD               	bnz	clear_3
   255  00239A                     end_of_initialization:
   256                           	opt stack 0
   257  00239A                     __end_of__initialization:
   258                           	opt stack 0
   259  00239A  9043               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   260  00239C  9243               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   261  00239E  0E00               	movlw	low (__Lmediumconst shr (0+16))
   262  0023A0  6EF8               	movwf	tblptru,c
   263  0023A2  0100               	movlb	0
   264  0023A4  EF63  F006         	goto	_main	;jump to C main() function
   265                           tblptru	equ	0xFF8
   266                           postinc0	equ	0xFEE
   267                           wreg	equ	0xFE8
   268                           postdec1	equ	0xFE5
   269                           fsr1h	equ	0xFE2
   270                           fsr1l	equ	0xFE1
   271                           
   272                           	psect	bssCOMRAM
   273  000028                     __pbssCOMRAM:
   274                           	opt stack 0
   275  000028                     _rf_init_timer:
   276                           	opt stack 0
   277  000028                     	ds	2
   278  00002A                     _rf_recive_done_timer:
   279                           	opt stack 0
   280  00002A                     	ds	2
   281  00002C                     _rf_recive_timer:
   282                           	opt stack 0
   283  00002C                     	ds	2
   284  00002E                     _rf_reset_timer:
   285                           	opt stack 0
   286  00002E                     	ds	2
   287  000030                     _rf_send_timer:
   288                           	opt stack 0
   289  000030                     	ds	2
   290  000032                     _timer_tmp:
   291                           	opt stack 0
   292  000032                     	ds	2
   293  000034                     _adc_all_port_done:
   294                           	opt stack 0
   295  000034                     	ds	1
   296  000035                     _adcon0:
   297                           	opt stack 0
   298  000035                     	ds	1
   299  000036                     _get_i:
   300                           	opt stack 0
   301  000036                     	ds	1
   302  000037                     _get_tmp:
   303                           	opt stack 0
   304  000037                     	ds	1
   305  000038                     _modbus_check_silent:
   306                           	opt stack 0
   307  000038                     	ds	1
   308  000039                     _modbus_get_routine_tmr:
   309                           	opt stack 0
   310  000039                     	ds	1
   311  00003A                     _modbus_get_start:
   312                           	opt stack 0
   313  00003A                     	ds	1
   314  00003B                     _modbus_time_over:
   315                           	opt stack 0
   316  00003B                     	ds	1
   317  00003C                     _read_write:
   318                           	opt stack 0
   319  00003C                     	ds	1
   320  00003D                     _send_count:
   321                           	opt stack 0
   322  00003D                     	ds	1
   323  00003E                     adc_read_all@adc_i:
   324                           	opt stack 0
   325  00003E                     	ds	1
   326  00003F                     adc_read_all@adc_j:
   327                           	opt stack 0
   328  00003F                     	ds	1
   329  000040                     tmr1@blink:
   330                           	opt stack 0
   331  000040                     	ds	1
   332  000041                     _tmp2:
   333                           	opt stack 0
   334  000041                     	ds	2
   335                           tblptru	equ	0xFF8
   336                           postinc0	equ	0xFEE
   337                           wreg	equ	0xFE8
   338                           postdec1	equ	0xFE5
   339                           fsr1h	equ	0xFE2
   340                           fsr1l	equ	0xFE1
   341                           
   342                           	psect	bssBANK0
   343  000060                     __pbssBANK0:
   344                           	opt stack 0
   345  000060                     _adc:
   346                           	opt stack 0
   347  000060                     	ds	48
   348  000090                     _watt1_integ:
   349                           	opt stack 0
   350  000090                     	ds	4
   351  000094                     _watt2_integ:
   352                           	opt stack 0
   353  000094                     	ds	4
   354  000098                     measure@hall_adc_av1:
   355                           	opt stack 0
   356  000098                     	ds	4
   357  00009C                     measure@hall_adc_av2:
   358                           	opt stack 0
   359  00009C                     	ds	4
   360  0000A0                     _rf_all_send_timer:
   361                           	opt stack 0
   362  0000A0                     	ds	2
   363  0000A2                     _tmp2_16bit:
   364                           	opt stack 0
   365  0000A2                     	ds	2
   366  0000A4                     adc_read_all@adc_tmp:
   367                           	opt stack 0
   368  0000A4                     	ds	2
   369  0000A6                     measure@akim_i:
   370                           	opt stack 0
   371  0000A6                     	ds	2
   372  0000A8                     tmr1@blink_tmr:
   373                           	opt stack 0
   374  0000A8                     	ds	2
   375  0000AA                     tmr1@timer_s:
   376                           	opt stack 0
   377  0000AA                     	ds	2
   378  0000AC                     tmr1@tmr_hiz:
   379                           	opt stack 0
   380  0000AC                     	ds	2
   381  0000AE                     _spi_data:
   382                           	opt stack 0
   383  0000AE                     	ds	35
   384                           tblptru	equ	0xFF8
   385                           postinc0	equ	0xFEE
   386                           wreg	equ	0xFE8
   387                           postdec1	equ	0xFE5
   388                           fsr1h	equ	0xFE2
   389                           fsr1l	equ	0xFE1
   390                           
   391                           	psect	bssBANK1
   392  000100                     __pbssBANK1:
   393                           	opt stack 0
   394  000100                     _inp_get_tmp:
   395                           	opt stack 0
   396  000100                     	ds	100
   397  000164                     _out_send_tmp:
   398                           	opt stack 0
   399  000164                     	ds	100
   400                           tblptru	equ	0xFF8
   401                           postinc0	equ	0xFEE
   402                           wreg	equ	0xFE8
   403                           postdec1	equ	0xFE5
   404                           fsr1h	equ	0xFE2
   405                           fsr1l	equ	0xFE1
   406                           
   407                           	psect	bssBIGRAM
   408  0001C8                     __pbssBIGRAM:
   409                           	opt stack 0
   410  0001C8                     _Registers:
   411                           	opt stack 0
   412  0001C8                     	ds	400
   413                           tblptru	equ	0xFF8
   414                           postinc0	equ	0xFEE
   415                           wreg	equ	0xFE8
   416                           postdec1	equ	0xFE5
   417                           fsr1h	equ	0xFE2
   418                           fsr1l	equ	0xFE1
   419                           
   420                           	psect	cstackBANK0
   421  0000D1                     __pcstackBANK0:
   422                           	opt stack 0
   423  0000D1                     CRC16@lowCRC:
   424                           	opt stack 0
   425  0000D1                     receive_check@return_val:
   426                           	opt stack 0
   427  0000D1                     ___aldiv@counter:
   428                           	opt stack 0
   429  0000D1                     ___awtoft@sign:
   430                           	opt stack 0
   431  0000D1                     load_EEPROM@tmp_16bit:
   432                           	opt stack 0
   433  0000D1                     spi_transmit@tmp_buf:
   434                           	opt stack 0
   435  0000D1                     ___lmul@product:
   436                           	opt stack 0
   437  0000D1                     ___lldiv@quotient:
   438                           	opt stack 0
   439                           
   440                           ; 4 bytes @ 0x0
   441  0000D1                     	ds	1
   442  0000D2                     ?___ftmul:
   443                           	opt stack 0
   444  0000D2                     CRC16@highCRC:
   445                           	opt stack 0
   446  0000D2                     ___aldiv@sign:
   447                           	opt stack 0
   448  0000D2                     ___ftmul@f1:
   449                           	opt stack 0
   450                           
   451                           ; 3 bytes @ 0x1
   452  0000D2                     	ds	1
   453  0000D3                     spi_transmit@i:
   454                           	opt stack 0
   455  0000D3                     CRC16@j:
   456                           	opt stack 0
   457  0000D3                     load_EEPROM@tmp_8bit:
   458                           	opt stack 0
   459  0000D3                     ___aldiv@quotient:
   460                           	opt stack 0
   461                           
   462                           ; 4 bytes @ 0x2
   463  0000D3                     	ds	2
   464  0000D5                     CRC16@i:
   465                           	opt stack 0
   466  0000D5                     ___lldiv@counter:
   467                           	opt stack 0
   468  0000D5                     load_EEPROM@tmp:
   469                           	opt stack 0
   470  0000D5                     ___ftmul@f2:
   471                           	opt stack 0
   472                           
   473                           ; 3 bytes @ 0x4
   474  0000D5                     	ds	1
   475  0000D6                     CRC16@CheckSum:
   476                           	opt stack 0
   477                           
   478                           ; 2 bytes @ 0x5
   479  0000D6                     	ds	1
   480  0000D7                     load_EEPROM@addr:
   481                           	opt stack 0
   482  0000D7                     read_all_adc@ort:
   483                           	opt stack 0
   484                           
   485                           ; 4 bytes @ 0x6
   486  0000D7                     	ds	1
   487  0000D8                     ??___ftmul:
   488  0000D8                     modbus_RTU@reg_count:
   489                           	opt stack 0
   490                           
   491                           ; 2 bytes @ 0x7
   492  0000D8                     	ds	2
   493  0000DA                     modbus_RTU@get_func:
   494                           	opt stack 0
   495                           
   496                           ; 1 bytes @ 0x9
   497  0000DA                     	ds	1
   498  0000DB                     modbus_RTU@get_addres:
   499                           	opt stack 0
   500  0000DB                     ___ftmul@exp:
   501                           	opt stack 0
   502  0000DB                     read_all_adc@tmp:
   503                           	opt stack 0
   504                           
   505                           ; 2 bytes @ 0xA
   506  0000DB                     	ds	1
   507  0000DC                     modbus_RTU@reg_adr:
   508                           	opt stack 0
   509  0000DC                     ___ftmul@f3_as_product:
   510                           	opt stack 0
   511                           
   512                           ; 3 bytes @ 0xB
   513  0000DC                     	ds	1
   514  0000DD                     read_all_adc@point:
   515                           	opt stack 0
   516                           
   517                           ; 2 bytes @ 0xC
   518  0000DD                     	ds	1
   519  0000DE                     modbus_RTU@i:
   520                           	opt stack 0
   521                           
   522                           ; 1 bytes @ 0xD
   523  0000DE                     	ds	1
   524  0000DF                     ___ftmul@cntr:
   525                           	opt stack 0
   526  0000DF                     read_all_adc@ort_i:
   527                           	opt stack 0
   528                           
   529                           ; 2 bytes @ 0xE
   530  0000DF                     	ds	1
   531  0000E0                     ___ftmul@sign:
   532                           	opt stack 0
   533                           
   534                           ; 1 bytes @ 0xF
   535  0000E0                     	ds	1
   536  0000E1                     ?___fttol:
   537                           	opt stack 0
   538  0000E1                     ___fttol@f1:
   539                           	opt stack 0
   540                           
   541                           ; 3 bytes @ 0x10
   542  0000E1                     	ds	4
   543  0000E5                     ??___fttol:
   544                           
   545                           ; 1 bytes @ 0x14
   546  0000E5                     	ds	5
   547  0000EA                     ___fttol@sign1:
   548                           	opt stack 0
   549                           
   550                           ; 1 bytes @ 0x19
   551  0000EA                     	ds	1
   552  0000EB                     ___fttol@lval:
   553                           	opt stack 0
   554                           
   555                           ; 4 bytes @ 0x1A
   556  0000EB                     	ds	4
   557  0000EF                     ___fttol@exp1:
   558                           	opt stack 0
   559                           
   560                           ; 1 bytes @ 0x1E
   561  0000EF                     	ds	1
   562  0000F0                     ??_measure:
   563                           
   564                           ; 1 bytes @ 0x1F
   565  0000F0                     	ds	4
   566  0000F4                     _measure$2382:
   567                           	opt stack 0
   568                           
   569                           ; 3 bytes @ 0x23
   570  0000F4                     	ds	3
   571  0000F7                     measure@tmp_watt:
   572                           	opt stack 0
   573                           
   574                           ; 4 bytes @ 0x26
   575  0000F7                     	ds	4
   576  0000FB                     ??_main:
   577                           
   578                           ; 1 bytes @ 0x2A
   579  0000FB                     	ds	2
   580  0000FD                     main@rf_send_i:
   581                           	opt stack 0
   582                           
   583                           ; 2 bytes @ 0x2C
   584  0000FD                     	ds	2
   585                           tblptru	equ	0xFF8
   586                           postinc0	equ	0xFEE
   587                           wreg	equ	0xFE8
   588                           postdec1	equ	0xFE5
   589                           fsr1h	equ	0xFE2
   590                           fsr1l	equ	0xFE1
   591                           
   592                           	psect	cstackCOMRAM
   593  000001                     __pcstackCOMRAM:
   594                           	opt stack 0
   595  000001                     ??_modbus_addres_check:
   596  000001                     ?i2___lmul:
   597                           	opt stack 0
   598  000001                     modbus_get_routine@scale:
   599                           	opt stack 0
   600  000001                     i2___lmul@multiplier:
   601                           	opt stack 0
   602                           
   603                           ; 4 bytes @ 0x0
   604  000001                     	ds	1
   605  000002                     
   606                           ; 1 bytes @ 0x1
   607  000002                     	ds	3
   608  000005                     modbus_addres_check@adress:
   609                           	opt stack 0
   610  000005                     i2___lmul@multiplicand:
   611                           	opt stack 0
   612                           
   613                           ; 4 bytes @ 0x4
   614  000005                     	ds	1
   615  000006                     ??_get_data:
   616                           
   617                           ; 1 bytes @ 0x5
   618  000006                     	ds	3
   619  000009                     i2___lmul@product:
   620                           	opt stack 0
   621                           
   622                           ; 4 bytes @ 0x8
   623  000009                     	ds	4
   624  00000D                     ??_tmr1:
   625                           
   626                           ; 1 bytes @ 0xC
   627  00000D                     	ds	2
   628  00000F                     ??_inter:
   629                           
   630                           ; 1 bytes @ 0xE
   631  00000F                     	ds	14
   632  00001D                     ??_modbus_slave_rtu_init:
   633  00001D                     ??_SPI:
   634  00001D                     ?___awmod:
   635                           	opt stack 0
   636  00001D                     ?___ftpack:
   637                           	opt stack 0
   638  00001D                     ?___lmul:
   639                           	opt stack 0
   640  00001D                     ?___aldiv:
   641                           	opt stack 0
   642  00001D                     ?___almod:
   643                           	opt stack 0
   644  00001D                     ?___lldiv:
   645                           	opt stack 0
   646  00001D                     send_ready@cnt:
   647                           	opt stack 0
   648  00001D                     read_eeprom@addr:
   649                           	opt stack 0
   650  00001D                     write_eeprom@value:
   651                           	opt stack 0
   652  00001D                     delay@i:
   653                           	opt stack 0
   654  00001D                     CRC16@buffer:
   655                           	opt stack 0
   656  00001D                     tx_routine@tmp_out:
   657                           	opt stack 0
   658  00001D                     ___awmod@dividend:
   659                           	opt stack 0
   660  00001D                     ___ftpack@arg:
   661                           	opt stack 0
   662  00001D                     ___lmul@multiplier:
   663                           	opt stack 0
   664  00001D                     ___aldiv@dividend:
   665                           	opt stack 0
   666  00001D                     ___almod@dividend:
   667                           	opt stack 0
   668  00001D                     ___lldiv@dividend:
   669                           	opt stack 0
   670                           
   671                           ; 4 bytes @ 0x1C
   672  00001D                     	ds	1
   673  00001E                     write_eeprom@addr:
   674                           	opt stack 0
   675  00001E                     SPI@d:
   676                           	opt stack 0
   677  00001E                     load_EEPROM@point:
   678                           	opt stack 0
   679                           
   680                           ; 2 bytes @ 0x1D
   681  00001E                     	ds	1
   682  00001F                     modbus_slave_rtu_init@adress:
   683                           	opt stack 0
   684  00001F                     CRC16@dataLength:
   685                           	opt stack 0
   686  00001F                     save_EEPROM@point:
   687                           	opt stack 0
   688  00001F                     spi_read@data:
   689                           	opt stack 0
   690  00001F                     spi_write@data:
   691                           	opt stack 0
   692  00001F                     ___awmod@divisor:
   693                           	opt stack 0
   694                           
   695                           ; 2 bytes @ 0x1E
   696  00001F                     	ds	1
   697  000020                     CRC16@check:
   698                           	opt stack 0
   699  000020                     load_EEPROM@len:
   700                           	opt stack 0
   701  000020                     ___ftpack@exp:
   702                           	opt stack 0
   703                           
   704                           ; 1 bytes @ 0x1F
   705  000020                     	ds	1
   706  000021                     ??_CRC16:
   707  000021                     ??_load_EEPROM:
   708  000021                     save_EEPROM@len:
   709                           	opt stack 0
   710  000021                     spi_read@adr:
   711                           	opt stack 0
   712  000021                     spi_write@adr:
   713                           	opt stack 0
   714  000021                     ___awmod@counter:
   715                           	opt stack 0
   716  000021                     ___ftpack@sign:
   717                           	opt stack 0
   718  000021                     ___lmul@multiplicand:
   719                           	opt stack 0
   720  000021                     ___aldiv@divisor:
   721                           	opt stack 0
   722  000021                     ___almod@divisor:
   723                           	opt stack 0
   724  000021                     ___lldiv@divisor:
   725                           	opt stack 0
   726                           
   727                           ; 4 bytes @ 0x20
   728  000021                     	ds	1
   729  000022                     ??___ftpack:
   730  000022                     spi_read@len:
   731                           	opt stack 0
   732  000022                     spi_write@len:
   733                           	opt stack 0
   734  000022                     ___awmod@sign:
   735                           	opt stack 0
   736  000022                     save_EEPROM@tmp_16bit:
   737                           	opt stack 0
   738                           
   739                           ; 2 bytes @ 0x21
   740  000022                     	ds	1
   741  000023                     ??_spi_read:
   742  000023                     spi_write@i:
   743                           	opt stack 0
   744                           
   745                           ; 1 bytes @ 0x22
   746  000023                     	ds	1
   747  000024                     ??_modbus_RTU:
   748  000024                     change_channel@ch:
   749                           	opt stack 0
   750  000024                     save_EEPROM@tmp_8bit:
   751                           	opt stack 0
   752  000024                     spi_transmit@start_reg_id:
   753                           	opt stack 0
   754                           
   755                           ; 2 bytes @ 0x23
   756  000024                     	ds	1
   757  000025                     ??_read_all_adc:
   758  000025                     ?___awtoft:
   759                           	opt stack 0
   760  000025                     spi_read@i:
   761                           	opt stack 0
   762  000025                     ___almod@counter:
   763                           	opt stack 0
   764  000025                     ___awtoft@c:
   765                           	opt stack 0
   766                           
   767                           ; 2 bytes @ 0x24
   768  000025                     	ds	1
   769  000026                     ??_spi_transmit:
   770  000026                     ??_receive_check:
   771  000026                     save_EEPROM@addr:
   772                           	opt stack 0
   773  000026                     ___almod@sign:
   774                           	opt stack 0
   775                           
   776                           ; 1 bytes @ 0x25
   777  000026                     	ds	2
   778  000028                     tblptru	equ	0xFF8
   779                           postinc0	equ	0xFEE
   780                           wreg	equ	0xFE8
   781                           postdec1	equ	0xFE5
   782                           fsr1h	equ	0xFE2
   783                           fsr1l	equ	0xFE1
   784                           
   785                           ; 1 bytes @ 0x27
   786 ;;
   787 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   788 ;;
   789 ;; *************** function _main *****************
   790 ;; Defined at:
   791 ;;		line 157 in file "main.c"
   792 ;; Parameters:    Size  Location     Type
   793 ;;		None
   794 ;; Auto vars:     Size  Location     Type
   795 ;;  rf_send_i       2   44[BANK0 ] unsigned int 
   796 ;;  i               2    0        unsigned int 
   797 ;; Return value:  Size  Location     Type
   798 ;;                  1    wreg      void 
   799 ;; Registers used:
   800 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   801 ;; Tracked objects:
   802 ;;		On entry : 0/0
   803 ;;		On exit  : 0/0
   804 ;;		Unchanged: 0/0
   805 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   806 ;;      Params:         0       0       0       0       0       0       0
   807 ;;      Locals:         0       2       0       0       0       0       0
   808 ;;      Temps:          0       2       0       0       0       0       0
   809 ;;      Totals:         0       4       0       0       0       0       0
   810 ;;Total ram usage:        4 bytes
   811 ;; Hardware stack levels required when called:    8
   812 ;; This function calls:
   813 ;;		_SPI_Init
   814 ;;		___awmod
   815 ;;		_adc_init
   816 ;;		_change_channel
   817 ;;		_load_EEPROM
   818 ;;		_measure
   819 ;;		_modbus_slave_rtu_init
   820 ;;		_pic_init
   821 ;;		_read_all_adc
   822 ;;		_receive_check
   823 ;;		_receive_init
   824 ;;		_rx_routine
   825 ;;		_save_EEPROM
   826 ;;		_spi_transmit
   827 ;;		_timer0_init
   828 ;;		_timer1_init
   829 ;;		_timer2_init
   830 ;;		_timer3_init
   831 ;;		_tris_init
   832 ;;		_tx_routine
   833 ;; This function is called by:
   834 ;;		Startup code after reset
   835 ;; This function uses a non-reentrant model
   836 ;;
   837                           
   838                           	psect	text0
   839  000CC6                     __ptext0:
   840                           	opt stack 0
   841  000CC6                     _main:
   842                           	opt stack 23
   843                           
   844                           ;main.c: 158: unsigned int i, rf_send_i;
   845                           ;main.c: 159: pic_init();
   846                           
   847                           ;incstack = 0
   848  000CC6  ECBC  F012         	call	_pic_init	;wreg free
   849                           
   850                           ;main.c: 160: GIE=1;
   851  000CCA  8EF2               	bsf	intcon,7,c	;volatile
   852                           
   853                           ;main.c: 161: PEIE=1;
   854  000CCC  8CF2               	bsf	intcon,6,c	;volatile
   855                           
   856                           ;main.c: 162: timer2_init();
   857  000CCE  EC24  F013         	call	_timer2_init	;wreg free
   858                           
   859                           ;main.c: 163: timer1_init();
   860  000CD2  EC4F  F013         	call	_timer1_init	;wreg free
   861                           
   862                           ;main.c: 164: timer3_init();
   863  000CD6  EC4B  F013         	call	_timer3_init	;wreg free
   864                           
   865                           ;main.c: 165: timer0_init();
   866  000CDA  EC53  F013         	call	_timer0_init	;wreg free
   867                           
   868                           ;main.c: 166: tris_init();
   869  000CDE  ECEC  F012         	call	_tris_init	;wreg free
   870                           
   871                           ;main.c: 167: adc_init();
   872  000CE2  EC10  F012         	call	_adc_init	;wreg free
   873                           
   874                           ;main.c: 168: load_EEPROM(&Registers[50],50);
   875  000CE6  0E2C               	movlw	low (_Registers+100)
   876  000CE8  6E1E               	movwf	load_EEPROM@point,c
   877  000CEA  0E02               	movlw	high (_Registers+100)
   878  000CEC  6E1F               	movwf	load_EEPROM@point+1,c
   879  000CEE  0E32               	movlw	50
   880  000CF0  6E20               	movwf	load_EEPROM@len,c
   881  000CF2  ECC7  F00F         	call	_load_EEPROM	;wreg free
   882                           
   883                           ;main.c: 169: modbus_slave_rtu_init(Registers[50]);
   884  000CF6  EE22  F02C         	lfsr	2,_Registers+100
   885  000CFA  50DF               	movf	indf2,w,c
   886  000CFC  EC8D  F011         	call	_modbus_slave_rtu_init
   887                           
   888                           ;main.c: 171: SPI_Init();
   889  000D00  EC40  F013         	call	_SPI_Init	;wreg free
   890                           
   891                           ;main.c: 172: receive_init();
   892  000D04  ECAD  F007         	call	_receive_init	;wreg free
   893                           
   894                           ;main.c: 173: Registers[52]=6;
   895  000D08  0E06               	movlw	6
   896  000D0A  CFE8 F230          	movff	wreg,_Registers+104
   897  000D0E  0E00               	movlw	0
   898  000D10  CFE8 F231          	movff	wreg,_Registers+105
   899                           
   900                           ;main.c: 174: change_channel(Registers[52]);
   901  000D14  EE22  F030         	lfsr	2,_Registers+104
   902  000D18  50DF               	movf	indf2,w,c
   903  000D1A  EC07  F010         	call	_change_channel
   904                           
   905                           ;main.c: 175: rf_reset_timer=2000;
   906  000D1E  0E07               	movlw	7
   907  000D20  6E2F               	movwf	_rf_reset_timer+1,c
   908  000D22  0ED0               	movlw	208
   909  000D24  6E2E               	movwf	_rf_reset_timer,c
   910  000D26                     l4541:
   911                           
   912                           ;main.c: 177: Registers[48]=614;
   913  000D26  0E66               	movlw	102
   914  000D28  CFE8 F228          	movff	wreg,_Registers+96
   915  000D2C  0E02               	movlw	2
   916  000D2E  CFE8 F229          	movff	wreg,_Registers+97
   917                           
   918                           ;main.c: 178: Registers[52]=6;
   919  000D32  0E06               	movlw	6
   920  000D34  CFE8 F230          	movff	wreg,_Registers+104
   921  000D38  0E00               	movlw	0
   922  000D3A  CFE8 F231          	movff	wreg,_Registers+105
   923                           
   924                           ;main.c: 179: read_all_adc();
   925  000D3E  ECCD  F008         	call	_read_all_adc	;wreg free
   926                           
   927                           ;main.c: 180: measure();
   928  000D42  EC03  F003         	call	_measure	;wreg free
   929                           
   930                           ;main.c: 181: rx_routine();
   931  000D46  EC2D  F012         	call	_rx_routine	;wreg free
   932                           
   933                           ;main.c: 182: tx_routine();
   934  000D4A  EC7B  F010         	call	_tx_routine	;wreg free
   935                           
   936                           ;main.c: 183: if(Registers[49]){
   937  000D4E  EE22  F02A         	lfsr	2,_Registers+98
   938  000D52  50DE               	movf	postinc2,w,c
   939  000D54  10DE               	iorwf	postinc2,w,c
   940  000D56  B4D8               	btfsc	status,2,c
   941  000D58  D00E               	goto	l4559
   942                           
   943                           ;main.c: 185: save_EEPROM(&Registers[50],50);
   944  000D5A  0E2C               	movlw	low (_Registers+100)
   945  000D5C  6E1F               	movwf	save_EEPROM@point,c
   946  000D5E  0E02               	movlw	high (_Registers+100)
   947  000D60  6E20               	movwf	save_EEPROM@point+1,c
   948  000D62  0E32               	movlw	50
   949  000D64  6E21               	movwf	save_EEPROM@len,c
   950  000D66  EC13  F011         	call	_save_EEPROM	;wreg free
   951                           
   952                           ;main.c: 186: Registers[49]=0;
   953  000D6A  0E00               	movlw	0
   954  000D6C  CFE8 F22A          	movff	wreg,_Registers+98
   955  000D70  0E00               	movlw	0
   956  000D72  CFE8 F22B          	movff	wreg,_Registers+99
   957  000D76                     l4559:
   958                           
   959                           ;main.c: 188: }
   960                           ;main.c: 189: if(!PORTCbits.RC1){
   961  000D76  B282               	btfsc	3970,1,c	;volatile
   962  000D78  D012               	goto	l4567
   963                           
   964                           ;main.c: 191: Registers[55]=Registers[51];
   965  000D7A  EE22  F02E         	lfsr	2,_Registers+102
   966  000D7E  CFDE F236          	movff	postinc2,_Registers+110
   967  000D82  CFDD F237          	movff	postdec2,_Registers+111
   968                           
   969                           ;main.c: 192: Registers[56]=0;
   970  000D86  0E00               	movlw	0
   971  000D88  CFE8 F238          	movff	wreg,_Registers+112
   972  000D8C  0E00               	movlw	0
   973  000D8E  CFE8 F239          	movff	wreg,_Registers+113
   974                           
   975                           ;main.c: 193: Registers[49]=1;
   976  000D92  0E01               	movlw	1
   977  000D94  CFE8 F22A          	movff	wreg,_Registers+98
   978  000D98  0E00               	movlw	0
   979  000D9A  CFE8 F22B          	movff	wreg,_Registers+99
   980  000D9E                     l4567:
   981                           
   982                           ;main.c: 195: }
   983                           ;main.c: 198: if(!rf_recive_timer){
   984  000D9E  502C               	movf	_rf_recive_timer,w,c
   985  000DA0  102D               	iorwf	_rf_recive_timer+1,w,c
   986  000DA2  A4D8               	btfss	status,2,c
   987  000DA4  D057               	goto	l4589
   988                           
   989                           ;main.c: 200: rf_recive_timer=50;
   990  000DA6  0E00               	movlw	0
   991  000DA8  6E2D               	movwf	_rf_recive_timer+1,c
   992  000DAA  0E32               	movlw	50
   993  000DAC  6E2C               	movwf	_rf_recive_timer,c
   994                           
   995                           ;main.c: 201: rf_send_timer=20;
   996  000DAE  0E00               	movlw	0
   997  000DB0  6E31               	movwf	_rf_send_timer+1,c
   998  000DB2  0E14               	movlw	20
   999  000DB4  6E30               	movwf	_rf_send_timer,c
  1000                           
  1001                           ;main.c: 202: if(receive_check() && !rf_recive_done_timer){
  1002  000DB6  EC34  F00F         	call	_receive_check	;wreg free
  1003  000DBA  0900               	iorlw	0
  1004  000DBC  B4D8               	btfsc	status,2,c
  1005  000DBE  D04A               	goto	l4589
  1006  000DC0  502A               	movf	_rf_recive_done_timer,w,c
  1007  000DC2  102B               	iorwf	_rf_recive_done_timer+1,w,c
  1008  000DC4  A4D8               	btfss	status,2,c
  1009  000DC6  D046               	goto	l4589
  1010                           
  1011                           ;main.c: 203: Registers[Registers[25]]=Registers[26];
  1012  000DC8  EE21  F0FC         	lfsr	2,_Registers+52
  1013  000DCC  EE11  F0FA         	lfsr	1,_Registers+50
  1014  000DD0  CFE6 F0FB          	movff	postinc1,??_main
  1015  000DD4  CFE5 F0FC          	movff	postdec1,??_main+1
  1016  000DD8  90D8               	bcf	status,0,c
  1017  000DDA  0100               	movlb	0	; () banked
  1018  000DDC  37FB               	rlcf	??_main& (0+255),f,b
  1019  000DDE  37FC               	rlcf	(??_main+1)& (0+255),f,b
  1020  000DE0  0EC8               	movlw	low _Registers
  1021  000DE2  0100               	movlb	0	; () banked
  1022  000DE4  25FB               	addwf	??_main& (0+255),w,b
  1023  000DE6  6EE1               	movwf	fsr1l,c
  1024  000DE8  0E01               	movlw	high _Registers
  1025  000DEA  0100               	movlb	0	; () banked
  1026  000DEC  21FC               	addwfc	(??_main+1)& (0+255),w,b
  1027  000DEE  6EE2               	movwf	fsr1h,c
  1028  000DF0  CFDE FFE6          	movff	postinc2,postinc1
  1029  000DF4  CFDD FFE5          	movff	postdec2,postdec1
  1030                           
  1031                           ; BSR set to: 0
  1032                           ;main.c: 204: if(Registers[25]>49 && Registers[25]<100)Registers[49]=1;
  1033  000DF8  EE21  F0FA         	lfsr	2,_Registers+50
  1034  000DFC  0E01               	movlw	1
  1035  000DFE  BEDB               	btfsc	plusw2,7,c
  1036  000E00  D019               	goto	l4583
  1037  000E02  0E01               	movlw	1
  1038  000E04  50DB               	movf	plusw2,w,c
  1039  000E06  E104               	bnz	u3650
  1040  000E08  0E32               	movlw	50
  1041  000E0A  5CDE               	subwf	postinc2,w,c
  1042  000E0C  A0D8               	btfss	status,0,c
  1043  000E0E  D012               	goto	l4583
  1044  000E10                     u3650:
  1045                           
  1046                           ; BSR set to: 0
  1047  000E10  EE21  F0FA         	lfsr	2,_Registers+50
  1048  000E14  0E01               	movlw	1
  1049  000E16  BEDB               	btfsc	plusw2,7,c
  1050  000E18  D007               	goto	l4581
  1051  000E1A  0E01               	movlw	1
  1052  000E1C  50DB               	movf	plusw2,w,c
  1053  000E1E  E10A               	bnz	l4583
  1054  000E20  0E64               	movlw	100
  1055  000E22  5CDE               	subwf	postinc2,w,c
  1056  000E24  B0D8               	btfsc	status,0,c
  1057  000E26  D006               	goto	l4583
  1058  000E28                     l4581:
  1059                           
  1060                           ; BSR set to: 0
  1061  000E28  0E01               	movlw	1
  1062  000E2A  CFE8 F22A          	movff	wreg,_Registers+98
  1063  000E2E  0E00               	movlw	0
  1064  000E30  CFE8 F22B          	movff	wreg,_Registers+99
  1065  000E34                     l4583:
  1066                           
  1067                           ; BSR set to: 0
  1068                           ;main.c: 205: if(Registers[25]==52)change_channel(Registers[52]);
  1069  000E34  EE21  F0FA         	lfsr	2,_Registers+50
  1070  000E38  0E34               	movlw	52
  1071  000E3A  18DE               	xorwf	postinc2,w,c
  1072  000E3C  10DE               	iorwf	postinc2,w,c
  1073  000E3E  A4D8               	btfss	status,2,c
  1074  000E40  D005               	goto	l4587
  1075                           
  1076                           ; BSR set to: 0
  1077  000E42  EE22  F030         	lfsr	2,_Registers+104
  1078  000E46  50DF               	movf	indf2,w,c
  1079  000E48  EC07  F010         	call	_change_channel
  1080  000E4C                     l4587:
  1081                           
  1082                           ;main.c: 206: rf_recive_done_timer=2000;
  1083  000E4C  0E07               	movlw	7
  1084  000E4E  6E2B               	movwf	_rf_recive_done_timer+1,c
  1085  000E50  0ED0               	movlw	208
  1086  000E52  6E2A               	movwf	_rf_recive_done_timer,c
  1087  000E54                     l4589:
  1088                           
  1089                           ;main.c: 208: }
  1090                           ;main.c: 212: }
  1091                           ;main.c: 231: if(!rf_send_timer){
  1092  000E54  5030               	movf	_rf_send_timer,w,c
  1093  000E56  1031               	iorwf	_rf_send_timer+1,w,c
  1094  000E58  A4D8               	btfss	status,2,c
  1095  000E5A  D03C               	goto	l4609
  1096                           
  1097                           ;main.c: 232: rf_send_timer=3000;
  1098  000E5C  0E0B               	movlw	11
  1099  000E5E  6E31               	movwf	_rf_send_timer+1,c
  1100  000E60  0EB8               	movlw	184
  1101  000E62  6E30               	movwf	_rf_send_timer,c
  1102                           
  1103                           ;main.c: 233: if(!Registers[20]){
  1104  000E64  EE21  F0F0         	lfsr	2,_Registers+40
  1105  000E68  50DE               	movf	postinc2,w,c
  1106  000E6A  10DE               	iorwf	postinc2,w,c
  1107  000E6C  A4D8               	btfss	status,2,c
  1108  000E6E  D00C               	goto	l4599
  1109                           
  1110                           ;main.c: 234: spi_transmit(rf_send_i);
  1111  000E70  C0FD  F024         	movff	main@rf_send_i,spi_transmit@start_reg_id
  1112  000E74  C0FE  F025         	movff	main@rf_send_i+1,spi_transmit@start_reg_id+1
  1113  000E78  EC9E  F00D         	call	_spi_transmit	;wreg free
  1114                           
  1115                           ;main.c: 235: rf_send_i+=15;
  1116  000E7C  0E0F               	movlw	15
  1117  000E7E  0100               	movlb	0	; () banked
  1118  000E80  27FD               	addwf	main@rf_send_i& (0+255),f,b
  1119  000E82  0E00               	movlw	0
  1120  000E84  23FE               	addwfc	(main@rf_send_i+1)& (0+255),f,b
  1121                           
  1122                           ;main.c: 236: }else{
  1123  000E86  D006               	goto	l4601
  1124  000E88                     l4599:
  1125                           
  1126                           ;main.c: 237: spi_transmit(0);
  1127  000E88  0E00               	movlw	0
  1128  000E8A  6E25               	movwf	spi_transmit@start_reg_id+1,c
  1129  000E8C  0E00               	movlw	0
  1130  000E8E  6E24               	movwf	spi_transmit@start_reg_id,c
  1131  000E90  EC9E  F00D         	call	_spi_transmit	;wreg free
  1132  000E94                     l4601:
  1133                           
  1134                           ;main.c: 238: }
  1135                           ;main.c: 240: if(rf_send_i>90)rf_send_i=0;
  1136  000E94  0100               	movlb	0	; () banked
  1137  000E96  51FE               	movf	(main@rf_send_i+1)& (0+255),w,b
  1138  000E98  E105               	bnz	u3700
  1139  000E9A  0E5B               	movlw	91
  1140  000E9C  0100               	movlb	0	; () banked
  1141  000E9E  5DFD               	subwf	main@rf_send_i& (0+255),w,b
  1142  000EA0  A0D8               	btfss	status,0,c
  1143  000EA2  D005               	goto	l4605
  1144  000EA4                     u3700:
  1145                           
  1146                           ; BSR set to: 0
  1147  000EA4  0E00               	movlw	0
  1148  000EA6  0100               	movlb	0	; () banked
  1149  000EA8  6FFE               	movwf	(main@rf_send_i+1)& (0+255),b
  1150  000EAA  0E00               	movlw	0
  1151  000EAC  6FFD               	movwf	main@rf_send_i& (0+255),b
  1152  000EAE                     l4605:
  1153                           
  1154                           ; BSR set to: 0
  1155                           ;main.c: 241: Registers[20]++;
  1156  000EAE  EE21  F0F0         	lfsr	2,_Registers+40
  1157  000EB2  2ADE               	incf	postinc2,f,c
  1158  000EB4  0E00               	movlw	0
  1159  000EB6  22DD               	addwfc	postdec2,f,c
  1160                           
  1161                           ; BSR set to: 0
  1162                           ;main.c: 242: Registers[20]%=5;
  1163  000EB8  C1F0  F01D         	movff	_Registers+40,___awmod@dividend
  1164  000EBC  C1F1  F01E         	movff	_Registers+41,___awmod@dividend+1
  1165  000EC0  0E00               	movlw	0
  1166  000EC2  6E20               	movwf	___awmod@divisor+1,c
  1167  000EC4  0E05               	movlw	5
  1168  000EC6  6E1F               	movwf	___awmod@divisor,c
  1169  000EC8  EC43  F010         	call	___awmod	;wreg free
  1170  000ECC  C01D  F1F0         	movff	?___awmod,_Registers+40
  1171  000ED0  C01E  F1F1         	movff	?___awmod+1,_Registers+41
  1172  000ED4                     l4609:
  1173                           
  1174                           ;main.c: 243: }
  1175                           ;main.c: 245: Registers[0]=Registers[52];
  1176  000ED4  EE22  F030         	lfsr	2,_Registers+104
  1177  000ED8  CFDE F1C8          	movff	postinc2,_Registers
  1178  000EDC  CFDD F1C9          	movff	postdec2,_Registers+1
  1179                           
  1180                           ;main.c: 246: Registers[13]=Registers[55];
  1181  000EE0  EE22  F036         	lfsr	2,_Registers+110
  1182  000EE4  CFDE F1E2          	movff	postinc2,_Registers+26
  1183  000EE8  CFDD F1E3          	movff	postdec2,_Registers+27
  1184                           
  1185                           ;main.c: 247: Registers[14]=Registers[56];
  1186  000EEC  EE22  F038         	lfsr	2,_Registers+112
  1187  000EF0  CFDE F1E4          	movff	postinc2,_Registers+28
  1188  000EF4  CFDD F1E5          	movff	postdec2,_Registers+29
  1189                           
  1190                           ;main.c: 249: if(!PORTEbits.RE3){
  1191  000EF8  B684               	btfsc	3972,3,c	;volatile
  1192  000EFA  D01B               	goto	l4625
  1193                           
  1194                           ;main.c: 250: if(!rf_reset_timer){
  1195  000EFC  502E               	movf	_rf_reset_timer,w,c
  1196  000EFE  102F               	iorwf	_rf_reset_timer+1,w,c
  1197  000F00  A4D8               	btfss	status,2,c
  1198  000F02  D01B               	goto	l4627
  1199                           
  1200                           ;main.c: 251: Registers[52]=6;
  1201  000F04  0E06               	movlw	6
  1202  000F06  CFE8 F230          	movff	wreg,_Registers+104
  1203  000F0A  0E00               	movlw	0
  1204  000F0C  CFE8 F231          	movff	wreg,_Registers+105
  1205                           
  1206                           ;main.c: 252: change_channel(Registers[52]);
  1207  000F10  EE22  F030         	lfsr	2,_Registers+104
  1208  000F14  50DF               	movf	indf2,w,c
  1209  000F16  EC07  F010         	call	_change_channel
  1210                           
  1211                           ;main.c: 253: change_channel(Registers[52]);
  1212  000F1A  EE22  F030         	lfsr	2,_Registers+104
  1213  000F1E  50DF               	movf	indf2,w,c
  1214  000F20  EC07  F010         	call	_change_channel
  1215                           
  1216                           ;main.c: 254: Registers[49]=1;
  1217  000F24  0E01               	movlw	1
  1218  000F26  CFE8 F22A          	movff	wreg,_Registers+98
  1219  000F2A  0E00               	movlw	0
  1220  000F2C  CFE8 F22B          	movff	wreg,_Registers+99
  1221                           
  1222                           ;main.c: 255: }
  1223                           ;main.c: 256: }else{
  1224  000F30  D004               	goto	l4627
  1225  000F32                     l4625:
  1226                           
  1227                           ;main.c: 257: rf_reset_timer=2000;
  1228  000F32  0E07               	movlw	7
  1229  000F34  6E2F               	movwf	_rf_reset_timer+1,c
  1230  000F36  0ED0               	movlw	208
  1231  000F38  6E2E               	movwf	_rf_reset_timer,c
  1232  000F3A                     l4627:
  1233                           
  1234                           ;main.c: 258: }
  1235                           ;main.c: 260: if(!rf_init_timer){
  1236  000F3A  5028               	movf	_rf_init_timer,w,c
  1237  000F3C  1029               	iorwf	_rf_init_timer+1,w,c
  1238  000F3E  A4D8               	btfss	status,2,c
  1239  000F40  D6F2               	goto	l4541
  1240                           
  1241                           ;main.c: 261: receive_init();
  1242  000F42  ECAD  F007         	call	_receive_init	;wreg free
  1243                           
  1244                           ;main.c: 262: change_channel(Registers[52]);
  1245  000F46  EE22  F030         	lfsr	2,_Registers+104
  1246  000F4A  50DF               	movf	indf2,w,c
  1247  000F4C  EC07  F010         	call	_change_channel
  1248                           
  1249                           ;main.c: 263: rf_init_timer=3000;
  1250  000F50  0E0B               	movlw	11
  1251  000F52  6E29               	movwf	_rf_init_timer+1,c
  1252  000F54  0EB8               	movlw	184
  1253  000F56  6E28               	movwf	_rf_init_timer,c
  1254  000F58  D6E6               	goto	l4541
  1255  000F5A                     __end_of_main:
  1256                           	opt stack 0
  1257                           tblptru	equ	0xFF8
  1258                           intcon	equ	0xFF2
  1259                           postinc0	equ	0xFEE
  1260                           wreg	equ	0xFE8
  1261                           postinc1	equ	0xFE6
  1262                           postdec1	equ	0xFE5
  1263                           fsr1h	equ	0xFE2
  1264                           fsr1l	equ	0xFE1
  1265                           indf2	equ	0xFDF
  1266                           postinc2	equ	0xFDE
  1267                           postdec2	equ	0xFDD
  1268                           plusw2	equ	0xFDB
  1269                           status	equ	0xFD8
  1270                           
  1271 ;; *************** function _tx_routine *****************
  1272 ;; Defined at:
  1273 ;;		line 306 in file "mod.c"
  1274 ;; Parameters:    Size  Location     Type
  1275 ;;		None
  1276 ;; Auto vars:     Size  Location     Type
  1277 ;;  tmp_out         2   28[COMRAM] PTR unsigned char 
  1278 ;;		 -> out_send_tmp(100), 
  1279 ;; Return value:  Size  Location     Type
  1280 ;;                  1    wreg      void 
  1281 ;; Registers used:
  1282 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1283 ;; Tracked objects:
  1284 ;;		On entry : 0/0
  1285 ;;		On exit  : 0/0
  1286 ;;		Unchanged: 0/0
  1287 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1288 ;;      Params:         0       0       0       0       0       0       0
  1289 ;;      Locals:         2       0       0       0       0       0       0
  1290 ;;      Temps:          0       0       0       0       0       0       0
  1291 ;;      Totals:         2       0       0       0       0       0       0
  1292 ;;Total ram usage:        2 bytes
  1293 ;; Hardware stack levels used:    1
  1294 ;; Hardware stack levels required when called:    3
  1295 ;; This function calls:
  1296 ;;		Nothing
  1297 ;; This function is called by:
  1298 ;;		_main
  1299 ;; This function uses a non-reentrant model
  1300 ;;
  1301                           
  1302                           	psect	text1
  1303  0020F6                     __ptext1:
  1304                           	opt stack 0
  1305  0020F6                     _tx_routine:
  1306                           	opt stack 27
  1307                           
  1308                           ;mod.c: 307: unsigned char * tmp_out=out_send_tmp;
  1309                           
  1310                           ;incstack = 0
  1311  0020F6  0E64               	movlw	low _out_send_tmp
  1312  0020F8  6E1D               	movwf	tx_routine@tmp_out,c
  1313  0020FA  0E01               	movlw	high _out_send_tmp
  1314  0020FC  6E1E               	movwf	tx_routine@tmp_out+1,c
  1315                           
  1316                           ;mod.c: 308: LATDbits.LATD4=0;
  1317  0020FE  988C               	bcf	3980,4,c	;volatile
  1318                           
  1319                           ;mod.c: 309: if(!send_count)return;
  1320  002100  503D               	movf	_send_count,w,c
  1321  002102  B4D8               	btfsc	status,2,c
  1322  002104  0012               	return	
  1323                           
  1324                           ;mod.c: 313: timer_tmp=9;
  1325  002106  0E00               	movlw	0
  1326  002108  6E33               	movwf	_timer_tmp+1,c
  1327  00210A  0E09               	movlw	9
  1328  00210C  6E32               	movwf	_timer_tmp,c
  1329  00210E                     l3263:
  1330  00210E  5032               	movf	_timer_tmp,w,c
  1331  002110  1033               	iorwf	_timer_tmp+1,w,c
  1332  002112  A4D8               	btfss	status,2,c
  1333  002114  D7FC               	goto	l3263
  1334                           
  1335                           ;mod.c: 317: LATDbits.LATD4=1;
  1336  002116  888C               	bsf	3980,4,c	;volatile
  1337                           
  1338                           ;mod.c: 318: TXSTA1bits.TXEN=1;
  1339  002118  8AAC               	bsf	4012,5,c	;volatile
  1340                           
  1341                           ;mod.c: 319: timer_tmp=1;
  1342  00211A  0E00               	movlw	0
  1343  00211C  6E33               	movwf	_timer_tmp+1,c
  1344  00211E  0E01               	movlw	1
  1345  002120  6E32               	movwf	_timer_tmp,c
  1346  002122                     l3267:
  1347  002122  5032               	movf	_timer_tmp,w,c
  1348  002124  1033               	iorwf	_timer_tmp+1,w,c
  1349  002126  B4D8               	btfsc	status,2,c
  1350  002128  D00C               	goto	l3273
  1351  00212A  D7FB               	goto	l3267
  1352  00212C                     l3269:
  1353                           
  1354                           ;mod.c: 324: TX1REG=*tmp_out;
  1355  00212C  C01D  FFD9         	movff	tx_routine@tmp_out,fsr2l
  1356  002130  C01E  FFDA         	movff	tx_routine@tmp_out+1,fsr2h
  1357  002134  50DF               	movf	indf2,w,c
  1358  002136  6EAD               	movwf	4013,c	;volatile
  1359  002138                     l443:
  1360  002138  A2AC               	btfss	4012,1,c	;volatile
  1361  00213A  D7FE               	goto	l443
  1362                           
  1363                           ;mod.c: 327: tmp_out++;
  1364  00213C  4A1D               	infsnz	tx_routine@tmp_out,f,c
  1365  00213E  2A1E               	incf	tx_routine@tmp_out+1,f,c
  1366                           
  1367                           ;mod.c: 328: send_count--;
  1368  002140  063D               	decf	_send_count,f,c
  1369  002142                     l3273:
  1370  002142  503D               	movf	_send_count,w,c
  1371  002144  A4D8               	btfss	status,2,c
  1372  002146  D7F2               	goto	l3269
  1373                           
  1374                           ;mod.c: 329: }
  1375                           ;mod.c: 331: timer_tmp=1;
  1376  002148  0E00               	movlw	0
  1377  00214A  6E33               	movwf	_timer_tmp+1,c
  1378  00214C  0E01               	movlw	1
  1379  00214E  6E32               	movwf	_timer_tmp,c
  1380  002150                     l3277:
  1381  002150  5032               	movf	_timer_tmp,w,c
  1382  002152  1033               	iorwf	_timer_tmp+1,w,c
  1383  002154  A4D8               	btfss	status,2,c
  1384  002156  D7FC               	goto	l3277
  1385                           
  1386                           ;mod.c: 334: PIR1bits.TXIF=0;
  1387  002158  989E               	bcf	3998,4,c	;volatile
  1388                           
  1389                           ;mod.c: 335: LATDbits.LATD4=0;
  1390  00215A  988C               	bcf	3980,4,c	;volatile
  1391  00215C  0012               	return		;funcret
  1392  00215E                     __end_of_tx_routine:
  1393                           	opt stack 0
  1394                           tblptru	equ	0xFF8
  1395                           intcon	equ	0xFF2
  1396                           postinc0	equ	0xFEE
  1397                           wreg	equ	0xFE8
  1398                           postinc1	equ	0xFE6
  1399                           postdec1	equ	0xFE5
  1400                           fsr1h	equ	0xFE2
  1401                           fsr1l	equ	0xFE1
  1402                           indf2	equ	0xFDF
  1403                           postinc2	equ	0xFDE
  1404                           postdec2	equ	0xFDD
  1405                           plusw2	equ	0xFDB
  1406                           fsr2h	equ	0xFDA
  1407                           fsr2l	equ	0xFD9
  1408                           status	equ	0xFD8
  1409                           
  1410 ;; *************** function _tris_init *****************
  1411 ;; Defined at:
  1412 ;;		line 11 in file "pic_init.c"
  1413 ;; Parameters:    Size  Location     Type
  1414 ;;		None
  1415 ;; Auto vars:     Size  Location     Type
  1416 ;;		None
  1417 ;; Return value:  Size  Location     Type
  1418 ;;                  1    wreg      void 
  1419 ;; Registers used:
  1420 ;;		wreg, status,2
  1421 ;; Tracked objects:
  1422 ;;		On entry : 0/0
  1423 ;;		On exit  : 0/0
  1424 ;;		Unchanged: 0/0
  1425 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1426 ;;      Params:         0       0       0       0       0       0       0
  1427 ;;      Locals:         0       0       0       0       0       0       0
  1428 ;;      Temps:          0       0       0       0       0       0       0
  1429 ;;      Totals:         0       0       0       0       0       0       0
  1430 ;;Total ram usage:        0 bytes
  1431 ;; Hardware stack levels used:    1
  1432 ;; Hardware stack levels required when called:    3
  1433 ;; This function calls:
  1434 ;;		Nothing
  1435 ;; This function is called by:
  1436 ;;		_main
  1437 ;; This function uses a non-reentrant model
  1438 ;;
  1439                           
  1440                           	psect	text2
  1441  0025D8                     __ptext2:
  1442                           	opt stack 0
  1443  0025D8                     _tris_init:
  1444                           	opt stack 27
  1445                           
  1446                           ;pic_init.c: 12: TRISA=0b11111010;
  1447                           
  1448                           ;incstack = 0
  1449  0025D8  0EFA               	movlw	250
  1450  0025DA  6E92               	movwf	3986,c	;volatile
  1451                           
  1452                           ;pic_init.c: 13: TRISB=0b11101111;
  1453  0025DC  0EEF               	movlw	239
  1454  0025DE  6E93               	movwf	3987,c	;volatile
  1455                           
  1456                           ;pic_init.c: 14: TRISC=0b10010010;
  1457  0025E0  0E92               	movlw	146
  1458  0025E2  6E94               	movwf	3988,c	;volatile
  1459                           
  1460                           ;pic_init.c: 15: TRISD=0b11101111;
  1461  0025E4  0EEF               	movlw	239
  1462  0025E6  6E95               	movwf	3989,c	;volatile
  1463                           
  1464                           ;pic_init.c: 16: TRISE=0b00000100;
  1465  0025E8  0E04               	movlw	4
  1466  0025EA  6E96               	movwf	3990,c	;volatile
  1467  0025EC  0012               	return		;funcret
  1468  0025EE                     __end_of_tris_init:
  1469                           	opt stack 0
  1470                           tblptru	equ	0xFF8
  1471                           intcon	equ	0xFF2
  1472                           postinc0	equ	0xFEE
  1473                           wreg	equ	0xFE8
  1474                           postinc1	equ	0xFE6
  1475                           postdec1	equ	0xFE5
  1476                           fsr1h	equ	0xFE2
  1477                           fsr1l	equ	0xFE1
  1478                           indf2	equ	0xFDF
  1479                           postinc2	equ	0xFDE
  1480                           postdec2	equ	0xFDD
  1481                           plusw2	equ	0xFDB
  1482                           fsr2h	equ	0xFDA
  1483                           fsr2l	equ	0xFD9
  1484                           status	equ	0xFD8
  1485                           
  1486 ;; *************** function _timer3_init *****************
  1487 ;; Defined at:
  1488 ;;		line 113 in file "pic_init.c"
  1489 ;; Parameters:    Size  Location     Type
  1490 ;;		None
  1491 ;; Auto vars:     Size  Location     Type
  1492 ;;		None
  1493 ;; Return value:  Size  Location     Type
  1494 ;;                  1    wreg      void 
  1495 ;; Registers used:
  1496 ;;		wreg, status,2
  1497 ;; Tracked objects:
  1498 ;;		On entry : 0/0
  1499 ;;		On exit  : 0/0
  1500 ;;		Unchanged: 0/0
  1501 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1502 ;;      Params:         0       0       0       0       0       0       0
  1503 ;;      Locals:         0       0       0       0       0       0       0
  1504 ;;      Temps:          0       0       0       0       0       0       0
  1505 ;;      Totals:         0       0       0       0       0       0       0
  1506 ;;Total ram usage:        0 bytes
  1507 ;; Hardware stack levels used:    1
  1508 ;; Hardware stack levels required when called:    3
  1509 ;; This function calls:
  1510 ;;		Nothing
  1511 ;; This function is called by:
  1512 ;;		_main
  1513 ;; This function uses a non-reentrant model
  1514 ;;
  1515                           
  1516                           	psect	text3
  1517  002696                     __ptext3:
  1518                           	opt stack 0
  1519  002696                     _timer3_init:
  1520                           	opt stack 27
  1521                           
  1522                           ;pic_init.c: 114: T3CON=0b00000001;
  1523                           
  1524                           ;incstack = 0
  1525  002696  0E01               	movlw	1
  1526  002698  6EB1               	movwf	4017,c	;volatile
  1527                           
  1528                           ;pic_init.c: 115: TMR3IE=1;
  1529  00269A  82A0               	bsf	4000,1,c	;volatile
  1530  00269C  0012               	return		;funcret
  1531  00269E                     __end_of_timer3_init:
  1532                           	opt stack 0
  1533                           tblptru	equ	0xFF8
  1534                           intcon	equ	0xFF2
  1535                           postinc0	equ	0xFEE
  1536                           wreg	equ	0xFE8
  1537                           postinc1	equ	0xFE6
  1538                           postdec1	equ	0xFE5
  1539                           fsr1h	equ	0xFE2
  1540                           fsr1l	equ	0xFE1
  1541                           indf2	equ	0xFDF
  1542                           postinc2	equ	0xFDE
  1543                           postdec2	equ	0xFDD
  1544                           plusw2	equ	0xFDB
  1545                           fsr2h	equ	0xFDA
  1546                           fsr2l	equ	0xFD9
  1547                           status	equ	0xFD8
  1548                           
  1549 ;; *************** function _timer2_init *****************
  1550 ;; Defined at:
  1551 ;;		line 107 in file "pic_init.c"
  1552 ;; Parameters:    Size  Location     Type
  1553 ;;		None
  1554 ;; Auto vars:     Size  Location     Type
  1555 ;;		None
  1556 ;; Return value:  Size  Location     Type
  1557 ;;                  1    wreg      void 
  1558 ;; Registers used:
  1559 ;;		wreg, status,2
  1560 ;; Tracked objects:
  1561 ;;		On entry : 0/0
  1562 ;;		On exit  : 0/0
  1563 ;;		Unchanged: 0/0
  1564 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1565 ;;      Params:         0       0       0       0       0       0       0
  1566 ;;      Locals:         0       0       0       0       0       0       0
  1567 ;;      Temps:          0       0       0       0       0       0       0
  1568 ;;      Totals:         0       0       0       0       0       0       0
  1569 ;;Total ram usage:        0 bytes
  1570 ;; Hardware stack levels used:    1
  1571 ;; Hardware stack levels required when called:    3
  1572 ;; This function calls:
  1573 ;;		Nothing
  1574 ;; This function is called by:
  1575 ;;		_main
  1576 ;; This function uses a non-reentrant model
  1577 ;;
  1578                           
  1579                           	psect	text4
  1580  002648                     __ptext4:
  1581                           	opt stack 0
  1582  002648                     _timer2_init:
  1583                           	opt stack 27
  1584                           
  1585                           ;pic_init.c: 108: T2CON=0b00011111;
  1586                           
  1587                           ;incstack = 0
  1588  002648  0E1F               	movlw	31
  1589  00264A  6EBA               	movwf	4026,c	;volatile
  1590                           
  1591                           ;pic_init.c: 109: TMR2=0;
  1592  00264C  0E00               	movlw	0
  1593  00264E  6EBC               	movwf	4028,c	;volatile
  1594                           
  1595                           ;pic_init.c: 110: PR2=255;
  1596  002650  68BB               	setf	4027,c	;volatile
  1597                           
  1598                           ;pic_init.c: 111: TMR2IE=1;
  1599  002652  829D               	bsf	3997,1,c	;volatile
  1600  002654  0012               	return		;funcret
  1601  002656                     __end_of_timer2_init:
  1602                           	opt stack 0
  1603                           tblptru	equ	0xFF8
  1604                           intcon	equ	0xFF2
  1605                           postinc0	equ	0xFEE
  1606                           wreg	equ	0xFE8
  1607                           postinc1	equ	0xFE6
  1608                           postdec1	equ	0xFE5
  1609                           fsr1h	equ	0xFE2
  1610                           fsr1l	equ	0xFE1
  1611                           indf2	equ	0xFDF
  1612                           postinc2	equ	0xFDE
  1613                           postdec2	equ	0xFDD
  1614                           plusw2	equ	0xFDB
  1615                           fsr2h	equ	0xFDA
  1616                           fsr2l	equ	0xFD9
  1617                           status	equ	0xFD8
  1618                           
  1619 ;; *************** function _timer1_init *****************
  1620 ;; Defined at:
  1621 ;;		line 102 in file "pic_init.c"
  1622 ;; Parameters:    Size  Location     Type
  1623 ;;		None
  1624 ;; Auto vars:     Size  Location     Type
  1625 ;;		None
  1626 ;; Return value:  Size  Location     Type
  1627 ;;                  1    wreg      void 
  1628 ;; Registers used:
  1629 ;;		wreg, status,2
  1630 ;; Tracked objects:
  1631 ;;		On entry : 0/0
  1632 ;;		On exit  : 0/0
  1633 ;;		Unchanged: 0/0
  1634 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1635 ;;      Params:         0       0       0       0       0       0       0
  1636 ;;      Locals:         0       0       0       0       0       0       0
  1637 ;;      Temps:          0       0       0       0       0       0       0
  1638 ;;      Totals:         0       0       0       0       0       0       0
  1639 ;;Total ram usage:        0 bytes
  1640 ;; Hardware stack levels used:    1
  1641 ;; Hardware stack levels required when called:    3
  1642 ;; This function calls:
  1643 ;;		Nothing
  1644 ;; This function is called by:
  1645 ;;		_main
  1646 ;; This function uses a non-reentrant model
  1647 ;;
  1648                           
  1649                           	psect	text5
  1650  00269E                     __ptext5:
  1651                           	opt stack 0
  1652  00269E                     _timer1_init:
  1653                           	opt stack 27
  1654                           
  1655                           ;pic_init.c: 104: T1CON=0b00000001;
  1656                           
  1657                           ;incstack = 0
  1658  00269E  0E01               	movlw	1
  1659  0026A0  6ECD               	movwf	4045,c	;volatile
  1660                           
  1661                           ;pic_init.c: 105: TMR1IE=1;
  1662  0026A2  809D               	bsf	3997,0,c	;volatile
  1663  0026A4  0012               	return		;funcret
  1664  0026A6                     __end_of_timer1_init:
  1665                           	opt stack 0
  1666                           tblptru	equ	0xFF8
  1667                           intcon	equ	0xFF2
  1668                           postinc0	equ	0xFEE
  1669                           wreg	equ	0xFE8
  1670                           postinc1	equ	0xFE6
  1671                           postdec1	equ	0xFE5
  1672                           fsr1h	equ	0xFE2
  1673                           fsr1l	equ	0xFE1
  1674                           indf2	equ	0xFDF
  1675                           postinc2	equ	0xFDE
  1676                           postdec2	equ	0xFDD
  1677                           plusw2	equ	0xFDB
  1678                           fsr2h	equ	0xFDA
  1679                           fsr2l	equ	0xFD9
  1680                           status	equ	0xFD8
  1681                           
  1682 ;; *************** function _timer0_init *****************
  1683 ;; Defined at:
  1684 ;;		line 97 in file "pic_init.c"
  1685 ;; Parameters:    Size  Location     Type
  1686 ;;		None
  1687 ;; Auto vars:     Size  Location     Type
  1688 ;;		None
  1689 ;; Return value:  Size  Location     Type
  1690 ;;                  1    wreg      void 
  1691 ;; Registers used:
  1692 ;;		wreg, status,2
  1693 ;; Tracked objects:
  1694 ;;		On entry : 0/0
  1695 ;;		On exit  : 0/0
  1696 ;;		Unchanged: 0/0
  1697 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1698 ;;      Params:         0       0       0       0       0       0       0
  1699 ;;      Locals:         0       0       0       0       0       0       0
  1700 ;;      Temps:          0       0       0       0       0       0       0
  1701 ;;      Totals:         0       0       0       0       0       0       0
  1702 ;;Total ram usage:        0 bytes
  1703 ;; Hardware stack levels used:    1
  1704 ;; Hardware stack levels required when called:    3
  1705 ;; This function calls:
  1706 ;;		Nothing
  1707 ;; This function is called by:
  1708 ;;		_main
  1709 ;; This function uses a non-reentrant model
  1710 ;;
  1711                           
  1712                           	psect	text6
  1713  0026A6                     __ptext6:
  1714                           	opt stack 0
  1715  0026A6                     _timer0_init:
  1716                           	opt stack 27
  1717                           
  1718                           ;pic_init.c: 98: T0CON=0b10101000;
  1719                           
  1720                           ;incstack = 0
  1721  0026A6  0EA8               	movlw	168
  1722  0026A8  6ED5               	movwf	4053,c	;volatile
  1723                           
  1724                           ;pic_init.c: 99: TMR0IE=0;
  1725  0026AA  9AF2               	bcf	intcon,5,c	;volatile
  1726  0026AC  0012               	return		;funcret
  1727  0026AE                     __end_of_timer0_init:
  1728                           	opt stack 0
  1729                           tblptru	equ	0xFF8
  1730                           intcon	equ	0xFF2
  1731                           postinc0	equ	0xFEE
  1732                           wreg	equ	0xFE8
  1733                           postinc1	equ	0xFE6
  1734                           postdec1	equ	0xFE5
  1735                           fsr1h	equ	0xFE2
  1736                           fsr1l	equ	0xFE1
  1737                           indf2	equ	0xFDF
  1738                           postinc2	equ	0xFDE
  1739                           postdec2	equ	0xFDD
  1740                           plusw2	equ	0xFDB
  1741                           fsr2h	equ	0xFDA
  1742                           fsr2l	equ	0xFD9
  1743                           status	equ	0xFD8
  1744                           
  1745 ;; *************** function _spi_transmit *****************
  1746 ;; Defined at:
  1747 ;;		line 210 in file "spi.c"
  1748 ;; Parameters:    Size  Location     Type
  1749 ;;  start_reg_id    2   35[COMRAM] unsigned int 
  1750 ;; Auto vars:     Size  Location     Type
  1751 ;;  tmp_buf         2    0[BANK0 ] PTR unsigned char 
  1752 ;;		 -> Registers(400), 
  1753 ;;  i               1    2[BANK0 ] unsigned char 
  1754 ;; Return value:  Size  Location     Type
  1755 ;;                  1    wreg      void 
  1756 ;; Registers used:
  1757 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1758 ;; Tracked objects:
  1759 ;;		On entry : 0/0
  1760 ;;		On exit  : 0/0
  1761 ;;		Unchanged: 0/0
  1762 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1763 ;;      Params:         2       0       0       0       0       0       0
  1764 ;;      Locals:         0       3       0       0       0       0       0
  1765 ;;      Temps:          2       0       0       0       0       0       0
  1766 ;;      Totals:         4       3       0       0       0       0       0
  1767 ;;Total ram usage:        7 bytes
  1768 ;; Hardware stack levels used:    1
  1769 ;; Hardware stack levels required when called:    7
  1770 ;; This function calls:
  1771 ;;		_SPI
  1772 ;;		_receive_init
  1773 ;;		_send
  1774 ;;		_spi_end_command
  1775 ;;		_spi_start_command
  1776 ;;		_spi_write
  1777 ;; This function is called by:
  1778 ;;		_main
  1779 ;; This function uses a non-reentrant model
  1780 ;;
  1781                           
  1782                           	psect	text7
  1783  001B3C                     __ptext7:
  1784                           	opt stack 0
  1785  001B3C                     _spi_transmit:
  1786                           	opt stack 23
  1787                           
  1788                           ;spi.c: 212: unsigned char i=0,* tmp_buf;
  1789                           
  1790                           ;incstack = 0
  1791  001B3C  0E00               	movlw	0
  1792  001B3E  0100               	movlb	0	; () banked
  1793  001B40  6FD3               	movwf	spi_transmit@i& (0+255),b
  1794                           
  1795                           ; BSR set to: 0
  1796                           ;spi.c: 214: spi_start_command();
  1797  001B42  EC46  F013         	call	_spi_start_command	;wreg free
  1798                           
  1799                           ;spi.c: 215: SPI(0b11100001);
  1800  001B46  0EE1               	movlw	225
  1801  001B48  ECAA  F012         	call	_SPI
  1802                           
  1803                           ;spi.c: 216: spi_end_command();
  1804  001B4C  EC5B  F013         	call	_spi_end_command	;wreg free
  1805                           
  1806                           ;spi.c: 217: spi_data[0]=0b01111110;
  1807  001B50  0E7E               	movlw	126
  1808  001B52  0100               	movlb	0	; () banked
  1809  001B54  6FAE               	movwf	_spi_data& (0+255),b
  1810                           
  1811                           ; BSR set to: 0
  1812                           ;spi.c: 218: spi_write(spi_data,0x07,1);
  1813  001B56  0EAE               	movlw	low _spi_data
  1814  001B58  6E1F               	movwf	spi_write@data,c
  1815  001B5A  0E00               	movlw	high _spi_data
  1816  001B5C  6E20               	movwf	spi_write@data+1,c
  1817  001B5E  0E07               	movlw	7
  1818  001B60  6E21               	movwf	spi_write@adr,c
  1819  001B62  0E01               	movlw	1
  1820  001B64  6E22               	movwf	spi_write@len,c
  1821  001B66  ECF2  F011         	call	_spi_write	;wreg free
  1822                           
  1823                           ;spi.c: 219: PORTAbits.RA0=0;
  1824  001B6A  9080               	bcf	3968,0,c	;volatile
  1825                           
  1826                           ;spi.c: 220: spi_data[0]=0b00001010;
  1827  001B6C  0E0A               	movlw	10
  1828  001B6E  0100               	movlb	0	; () banked
  1829  001B70  6FAE               	movwf	_spi_data& (0+255),b
  1830                           
  1831                           ; BSR set to: 0
  1832                           ;spi.c: 221: spi_write(spi_data,0x00,1);
  1833  001B72  0EAE               	movlw	low _spi_data
  1834  001B74  6E1F               	movwf	spi_write@data,c
  1835  001B76  0E00               	movlw	high _spi_data
  1836  001B78  6E20               	movwf	spi_write@data+1,c
  1837  001B7A  0E00               	movlw	0
  1838  001B7C  6E21               	movwf	spi_write@adr,c
  1839  001B7E  0E01               	movlw	1
  1840  001B80  6E22               	movwf	spi_write@len,c
  1841  001B82  ECF2  F011         	call	_spi_write	;wreg free
  1842                           
  1843                           ;spi.c: 229: tmp_buf=&Registers[start_reg_id];
  1844  001B86  C024  F026         	movff	spi_transmit@start_reg_id,??_spi_transmit
  1845  001B8A  C025  F027         	movff	spi_transmit@start_reg_id+1,??_spi_transmit+1
  1846  001B8E  90D8               	bcf	status,0,c
  1847  001B90  3626               	rlcf	??_spi_transmit,f,c
  1848  001B92  3627               	rlcf	??_spi_transmit+1,f,c
  1849  001B94  0EC8               	movlw	low _Registers
  1850  001B96  2426               	addwf	??_spi_transmit,w,c
  1851  001B98  0100               	movlb	0	; () banked
  1852  001B9A  6FD1               	movwf	spi_transmit@tmp_buf& (0+255),b
  1853  001B9C  0E01               	movlw	high _Registers
  1854  001B9E  2027               	addwfc	??_spi_transmit+1,w,c
  1855  001BA0  0100               	movlb	0	; () banked
  1856  001BA2  6FD2               	movwf	(spi_transmit@tmp_buf+1)& (0+255),b
  1857                           
  1858                           ; BSR set to: 0
  1859                           ;spi.c: 231: spi_data[0]=start_reg_id%256;
  1860  001BA4  C024  F0AE         	movff	spi_transmit@start_reg_id,_spi_data
  1861                           
  1862                           ; BSR set to: 0
  1863                           ;spi.c: 232: spi_data[1]=start_reg_id/256;
  1864  001BA8  5025               	movf	spi_transmit@start_reg_id+1,w,c
  1865  001BAA  0100               	movlb	0	; () banked
  1866  001BAC  6FAF               	movwf	(_spi_data+1)& (0+255),b
  1867                           
  1868                           ; BSR set to: 0
  1869                           ;spi.c: 234: for(i=0;i<30;i++){
  1870  001BAE  0E00               	movlw	0
  1871  001BB0  0100               	movlb	0	; () banked
  1872  001BB2  6FD3               	movwf	spi_transmit@i& (0+255),b
  1873  001BB4                     l4425:
  1874                           
  1875                           ; BSR set to: 0
  1876  001BB4  0E1D               	movlw	29
  1877  001BB6  0100               	movlb	0	; () banked
  1878  001BB8  65D3               	cpfsgt	spi_transmit@i& (0+255),b
  1879  001BBA  D001               	goto	l4429
  1880  001BBC  D01A               	goto	l4437
  1881  001BBE                     l4429:
  1882                           
  1883                           ; BSR set to: 0
  1884                           ;spi.c: 235: spi_data[i+2]=*tmp_buf;
  1885  001BBE  C0D1  FFD9         	movff	spi_transmit@tmp_buf,fsr2l
  1886  001BC2  C0D2  FFDA         	movff	spi_transmit@tmp_buf+1,fsr2h
  1887  001BC6  0100               	movlb	0	; () banked
  1888  001BC8  51D3               	movf	spi_transmit@i& (0+255),w,b
  1889  001BCA  6E26               	movwf	??_spi_transmit& (0+255),c
  1890  001BCC  6A27               	clrf	(??_spi_transmit+1)& (0+255),c
  1891  001BCE  0E02               	movlw	2
  1892  001BD0  2626               	addwf	??_spi_transmit,f,c
  1893  001BD2  0E00               	movlw	0
  1894  001BD4  2227               	addwfc	??_spi_transmit+1,f,c
  1895  001BD6  0EAE               	movlw	low _spi_data
  1896  001BD8  2426               	addwf	??_spi_transmit,w,c
  1897  001BDA  6EE1               	movwf	fsr1l,c
  1898  001BDC  0E00               	movlw	high _spi_data
  1899  001BDE  2027               	addwfc	??_spi_transmit+1,w,c
  1900  001BE0  6EE2               	movwf	fsr1h,c
  1901  001BE2  CFDF FFE7          	movff	indf2,indf1
  1902                           
  1903                           ; BSR set to: 0
  1904                           ;spi.c: 236: tmp_buf++;
  1905  001BE6  0100               	movlb	0	; () banked
  1906  001BE8  4BD1               	infsnz	spi_transmit@tmp_buf& (0+255),f,b
  1907  001BEA  2BD2               	incf	(spi_transmit@tmp_buf+1)& (0+255),f,b
  1908                           
  1909                           ; BSR set to: 0
  1910  001BEC  0100               	movlb	0	; () banked
  1911  001BEE  2BD3               	incf	spi_transmit@i& (0+255),f,b
  1912  001BF0  D7E1               	goto	l4425
  1913  001BF2                     l4437:
  1914                           
  1915                           ; BSR set to: 0
  1916                           ;spi.c: 237: }
  1917                           ;spi.c: 239: spi_write(spi_data,0b10100000,32);
  1918  001BF2  0EAE               	movlw	low _spi_data
  1919  001BF4  6E1F               	movwf	spi_write@data,c
  1920  001BF6  0E00               	movlw	high _spi_data
  1921  001BF8  6E20               	movwf	spi_write@data+1,c
  1922  001BFA  0EA0               	movlw	160
  1923  001BFC  6E21               	movwf	spi_write@adr,c
  1924  001BFE  0E20               	movlw	32
  1925  001C00  6E22               	movwf	spi_write@len,c
  1926  001C02  ECF2  F011         	call	_spi_write	;wreg free
  1927                           
  1928                           ;spi.c: 240: spi_data[0]=0b00111111;
  1929  001C06  0E3F               	movlw	63
  1930  001C08  0100               	movlb	0	; () banked
  1931  001C0A  6FAE               	movwf	_spi_data& (0+255),b
  1932                           
  1933                           ; BSR set to: 0
  1934                           ;spi.c: 241: spi_write(spi_data,0x01,1);
  1935  001C0C  0EAE               	movlw	low _spi_data
  1936  001C0E  6E1F               	movwf	spi_write@data,c
  1937  001C10  0E00               	movlw	high _spi_data
  1938  001C12  6E20               	movwf	spi_write@data+1,c
  1939  001C14  0E01               	movlw	1
  1940  001C16  6E21               	movwf	spi_write@adr,c
  1941  001C18  0E01               	movlw	1
  1942  001C1A  6E22               	movwf	spi_write@len,c
  1943  001C1C  ECF2  F011         	call	_spi_write	;wreg free
  1944                           
  1945                           ;spi.c: 242: send();
  1946  001C20  EC2B  F013         	call	_send	;wreg free
  1947                           
  1948                           ;spi.c: 243: receive_init();
  1949  001C24  ECAD  F007         	call	_receive_init	;wreg free
  1950  001C28  0012               	return		;funcret
  1951  001C2A                     __end_of_spi_transmit:
  1952                           	opt stack 0
  1953                           tblptru	equ	0xFF8
  1954                           intcon	equ	0xFF2
  1955                           postinc0	equ	0xFEE
  1956                           wreg	equ	0xFE8
  1957                           indf1	equ	0xFE7
  1958                           postinc1	equ	0xFE6
  1959                           postdec1	equ	0xFE5
  1960                           fsr1h	equ	0xFE2
  1961                           fsr1l	equ	0xFE1
  1962                           indf2	equ	0xFDF
  1963                           postinc2	equ	0xFDE
  1964                           postdec2	equ	0xFDD
  1965                           plusw2	equ	0xFDB
  1966                           fsr2h	equ	0xFDA
  1967                           fsr2l	equ	0xFD9
  1968                           status	equ	0xFD8
  1969                           
  1970 ;; *************** function _send *****************
  1971 ;; Defined at:
  1972 ;;		line 27 in file "spi.c"
  1973 ;; Parameters:    Size  Location     Type
  1974 ;;		None
  1975 ;; Auto vars:     Size  Location     Type
  1976 ;;		None
  1977 ;; Return value:  Size  Location     Type
  1978 ;;                  1    wreg      void 
  1979 ;; Registers used:
  1980 ;;		wreg, status,2, status,0, cstack
  1981 ;; Tracked objects:
  1982 ;;		On entry : 0/0
  1983 ;;		On exit  : 0/0
  1984 ;;		Unchanged: 0/0
  1985 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1986 ;;      Params:         0       0       0       0       0       0       0
  1987 ;;      Locals:         0       0       0       0       0       0       0
  1988 ;;      Temps:          0       0       0       0       0       0       0
  1989 ;;      Totals:         0       0       0       0       0       0       0
  1990 ;;Total ram usage:        0 bytes
  1991 ;; Hardware stack levels used:    1
  1992 ;; Hardware stack levels required when called:    4
  1993 ;; This function calls:
  1994 ;;		_delay
  1995 ;; This function is called by:
  1996 ;;		_spi_transmit
  1997 ;; This function uses a non-reentrant model
  1998 ;;
  1999                           
  2000                           	psect	text8
  2001  002656                     __ptext8:
  2002                           	opt stack 0
  2003  002656                     _send:
  2004                           	opt stack 25
  2005                           
  2006                           ;spi.c: 29: PORTAbits.RA0=1;
  2007                           
  2008                           ;incstack = 0
  2009  002656  8080               	bsf	3968,0,c	;volatile
  2010                           
  2011                           ;spi.c: 30: delay();
  2012  002658  EC0B  F013         	call	_delay	;wreg free
  2013                           
  2014                           ;spi.c: 31: delay();
  2015  00265C  EC0B  F013         	call	_delay	;wreg free
  2016                           
  2017                           ;spi.c: 38: PORTAbits.RA0=0;
  2018  002660  9080               	bcf	3968,0,c	;volatile
  2019  002662  0012               	return		;funcret
  2020  002664                     __end_of_send:
  2021                           	opt stack 0
  2022                           tblptru	equ	0xFF8
  2023                           intcon	equ	0xFF2
  2024                           postinc0	equ	0xFEE
  2025                           wreg	equ	0xFE8
  2026                           indf1	equ	0xFE7
  2027                           postinc1	equ	0xFE6
  2028                           postdec1	equ	0xFE5
  2029                           fsr1h	equ	0xFE2
  2030                           fsr1l	equ	0xFE1
  2031                           indf2	equ	0xFDF
  2032                           postinc2	equ	0xFDE
  2033                           postdec2	equ	0xFDD
  2034                           plusw2	equ	0xFDB
  2035                           fsr2h	equ	0xFDA
  2036                           fsr2l	equ	0xFD9
  2037                           status	equ	0xFD8
  2038                           
  2039 ;; *************** function _receive_init *****************
  2040 ;; Defined at:
  2041 ;;		line 101 in file "spi.c"
  2042 ;; Parameters:    Size  Location     Type
  2043 ;;		None
  2044 ;; Auto vars:     Size  Location     Type
  2045 ;;		None
  2046 ;; Return value:  Size  Location     Type
  2047 ;;                  1    wreg      void 
  2048 ;; Registers used:
  2049 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2050 ;; Tracked objects:
  2051 ;;		On entry : 0/0
  2052 ;;		On exit  : 0/0
  2053 ;;		Unchanged: 0/0
  2054 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2055 ;;      Params:         0       0       0       0       0       0       0
  2056 ;;      Locals:         0       0       0       0       0       0       0
  2057 ;;      Temps:          0       0       0       0       0       0       0
  2058 ;;      Totals:         0       0       0       0       0       0       0
  2059 ;;Total ram usage:        0 bytes
  2060 ;; Hardware stack levels used:    1
  2061 ;; Hardware stack levels required when called:    6
  2062 ;; This function calls:
  2063 ;;		_delay
  2064 ;;		_spi_write
  2065 ;; This function is called by:
  2066 ;;		_spi_transmit
  2067 ;;		_main
  2068 ;; This function uses a non-reentrant model
  2069 ;;
  2070                           
  2071                           	psect	text9
  2072  000F5A                     __ptext9:
  2073                           	opt stack 0
  2074  000F5A                     _receive_init:
  2075                           	opt stack 23
  2076                           
  2077                           ;spi.c: 105: spi_data[0]=0b00001000;
  2078                           
  2079                           ;incstack = 0
  2080  000F5A  0E08               	movlw	8
  2081  000F5C  0100               	movlb	0	; () banked
  2082  000F5E  6FAE               	movwf	_spi_data& (0+255),b
  2083                           
  2084                           ; BSR set to: 0
  2085                           ;spi.c: 106: spi_write(spi_data,0x00,1);
  2086  000F60  0EAE               	movlw	low _spi_data
  2087  000F62  6E1F               	movwf	spi_write@data,c
  2088  000F64  0E00               	movlw	high _spi_data
  2089  000F66  6E20               	movwf	spi_write@data+1,c
  2090  000F68  0E00               	movlw	0
  2091  000F6A  6E21               	movwf	spi_write@adr,c
  2092  000F6C  0E01               	movlw	1
  2093  000F6E  6E22               	movwf	spi_write@len,c
  2094  000F70  ECF2  F011         	call	_spi_write	;wreg free
  2095                           
  2096                           ;spi.c: 108: spi_data[0]=0b00111111;
  2097  000F74  0E3F               	movlw	63
  2098  000F76  0100               	movlb	0	; () banked
  2099  000F78  6FAE               	movwf	_spi_data& (0+255),b
  2100                           
  2101                           ;spi.c: 109: spi_write(spi_data,0x01,1);
  2102  000F7A  0EAE               	movlw	low _spi_data
  2103  000F7C  6E1F               	movwf	spi_write@data,c
  2104  000F7E  0E00               	movlw	high _spi_data
  2105  000F80  6E20               	movwf	spi_write@data+1,c
  2106  000F82  0E01               	movlw	1
  2107  000F84  6E21               	movwf	spi_write@adr,c
  2108  000F86  0E01               	movlw	1
  2109  000F88  6E22               	movwf	spi_write@len,c
  2110  000F8A  ECF2  F011         	call	_spi_write	;wreg free
  2111                           
  2112                           ;spi.c: 111: spi_data[0]=0b00000011;
  2113  000F8E  0E03               	movlw	3
  2114  000F90  0100               	movlb	0	; () banked
  2115  000F92  6FAE               	movwf	_spi_data& (0+255),b
  2116                           
  2117                           ; BSR set to: 0
  2118                           ;spi.c: 112: spi_write(spi_data,0x02,1);
  2119  000F94  0EAE               	movlw	low _spi_data
  2120  000F96  6E1F               	movwf	spi_write@data,c
  2121  000F98  0E00               	movlw	high _spi_data
  2122  000F9A  6E20               	movwf	spi_write@data+1,c
  2123  000F9C  0E02               	movlw	2
  2124  000F9E  6E21               	movwf	spi_write@adr,c
  2125  000FA0  0E01               	movlw	1
  2126  000FA2  6E22               	movwf	spi_write@len,c
  2127  000FA4  ECF2  F011         	call	_spi_write	;wreg free
  2128                           
  2129                           ;spi.c: 114: spi_data[0]=0b00000011;
  2130  000FA8  0E03               	movlw	3
  2131  000FAA  0100               	movlb	0	; () banked
  2132  000FAC  6FAE               	movwf	_spi_data& (0+255),b
  2133                           
  2134                           ; BSR set to: 0
  2135                           ;spi.c: 115: spi_write(spi_data,0x03,1);
  2136  000FAE  0EAE               	movlw	low _spi_data
  2137  000FB0  6E1F               	movwf	spi_write@data,c
  2138  000FB2  0E00               	movlw	high _spi_data
  2139  000FB4  6E20               	movwf	spi_write@data+1,c
  2140  000FB6  0E03               	movlw	3
  2141  000FB8  6E21               	movwf	spi_write@adr,c
  2142  000FBA  0E01               	movlw	1
  2143  000FBC  6E22               	movwf	spi_write@len,c
  2144  000FBE  ECF2  F011         	call	_spi_write	;wreg free
  2145                           
  2146                           ;spi.c: 117: spi_data[0]=0b00000011;
  2147  000FC2  0E03               	movlw	3
  2148  000FC4  0100               	movlb	0	; () banked
  2149  000FC6  6FAE               	movwf	_spi_data& (0+255),b
  2150                           
  2151                           ;spi.c: 118: spi_write(spi_data,0x04,1);
  2152  000FC8  0EAE               	movlw	low _spi_data
  2153  000FCA  6E1F               	movwf	spi_write@data,c
  2154  000FCC  0E00               	movlw	high _spi_data
  2155  000FCE  6E20               	movwf	spi_write@data+1,c
  2156  000FD0  0E04               	movlw	4
  2157  000FD2  6E21               	movwf	spi_write@adr,c
  2158  000FD4  0E01               	movlw	1
  2159  000FD6  6E22               	movwf	spi_write@len,c
  2160  000FD8  ECF2  F011         	call	_spi_write	;wreg free
  2161                           
  2162                           ;spi.c: 120: spi_data[0]=0b00000010;
  2163  000FDC  0E02               	movlw	2
  2164  000FDE  0100               	movlb	0	; () banked
  2165  000FE0  6FAE               	movwf	_spi_data& (0+255),b
  2166                           
  2167                           ; BSR set to: 0
  2168                           ;spi.c: 123: spi_data[0]=0b00001110;
  2169  000FE2  0E0E               	movlw	14
  2170  000FE4  0100               	movlb	0	; () banked
  2171  000FE6  6FAE               	movwf	_spi_data& (0+255),b
  2172                           
  2173                           ;spi.c: 124: spi_write(spi_data,0x06,1);
  2174  000FE8  0EAE               	movlw	low _spi_data
  2175  000FEA  6E1F               	movwf	spi_write@data,c
  2176  000FEC  0E00               	movlw	high _spi_data
  2177  000FEE  6E20               	movwf	spi_write@data+1,c
  2178  000FF0  0E06               	movlw	6
  2179  000FF2  6E21               	movwf	spi_write@adr,c
  2180  000FF4  0E01               	movlw	1
  2181  000FF6  6E22               	movwf	spi_write@len,c
  2182  000FF8  ECF2  F011         	call	_spi_write	;wreg free
  2183                           
  2184                           ;spi.c: 126: spi_data[0]=0b00001110;
  2185  000FFC  0E0E               	movlw	14
  2186  000FFE  0100               	movlb	0	; () banked
  2187  001000  6FAE               	movwf	_spi_data& (0+255),b
  2188                           
  2189                           ; BSR set to: 0
  2190                           ;spi.c: 127: spi_write(spi_data,0x07,1);
  2191  001002  0EAE               	movlw	low _spi_data
  2192  001004  6E1F               	movwf	spi_write@data,c
  2193  001006  0E00               	movlw	high _spi_data
  2194  001008  6E20               	movwf	spi_write@data+1,c
  2195  00100A  0E07               	movlw	7
  2196  00100C  6E21               	movwf	spi_write@adr,c
  2197  00100E  0E01               	movlw	1
  2198  001010  6E22               	movwf	spi_write@len,c
  2199  001012  ECF2  F011         	call	_spi_write	;wreg free
  2200                           
  2201                           ;spi.c: 129: spi_data[0]=0b00000000;
  2202  001016  0E00               	movlw	0
  2203  001018  0100               	movlb	0	; () banked
  2204  00101A  6FAE               	movwf	_spi_data& (0+255),b
  2205                           
  2206                           ;spi.c: 132: spi_data[0]=0b00000000;
  2207  00101C  0E00               	movlw	0
  2208  00101E  0100               	movlb	0	; () banked
  2209  001020  6FAE               	movwf	_spi_data& (0+255),b
  2210                           
  2211                           ;spi.c: 135: spi_data[0]=0b00000000;
  2212  001022  0E00               	movlw	0
  2213  001024  0100               	movlb	0	; () banked
  2214  001026  6FAE               	movwf	_spi_data& (0+255),b
  2215                           
  2216                           ; BSR set to: 0
  2217                           ;spi.c: 136: spi_write(spi_data,0x11,1);
  2218  001028  0EAE               	movlw	low _spi_data
  2219  00102A  6E1F               	movwf	spi_write@data,c
  2220  00102C  0E00               	movlw	high _spi_data
  2221  00102E  6E20               	movwf	spi_write@data+1,c
  2222  001030  0E11               	movlw	17
  2223  001032  6E21               	movwf	spi_write@adr,c
  2224  001034  0E01               	movlw	1
  2225  001036  6E22               	movwf	spi_write@len,c
  2226  001038  ECF2  F011         	call	_spi_write	;wreg free
  2227                           
  2228                           ;spi.c: 138: spi_data[0]=0b00000000;
  2229  00103C  0E00               	movlw	0
  2230  00103E  0100               	movlb	0	; () banked
  2231  001040  6FAE               	movwf	_spi_data& (0+255),b
  2232                           
  2233                           ;spi.c: 139: spi_write(spi_data,0x12,1);
  2234  001042  0EAE               	movlw	low _spi_data
  2235  001044  6E1F               	movwf	spi_write@data,c
  2236  001046  0E00               	movlw	high _spi_data
  2237  001048  6E20               	movwf	spi_write@data+1,c
  2238  00104A  0E12               	movlw	18
  2239  00104C  6E21               	movwf	spi_write@adr,c
  2240  00104E  0E01               	movlw	1
  2241  001050  6E22               	movwf	spi_write@len,c
  2242  001052  ECF2  F011         	call	_spi_write	;wreg free
  2243                           
  2244                           ;spi.c: 141: spi_data[0]=0b00000000;
  2245  001056  0E00               	movlw	0
  2246  001058  0100               	movlb	0	; () banked
  2247  00105A  6FAE               	movwf	_spi_data& (0+255),b
  2248                           
  2249                           ; BSR set to: 0
  2250                           ;spi.c: 142: spi_write(spi_data,0x13,1);
  2251  00105C  0EAE               	movlw	low _spi_data
  2252  00105E  6E1F               	movwf	spi_write@data,c
  2253  001060  0E00               	movlw	high _spi_data
  2254  001062  6E20               	movwf	spi_write@data+1,c
  2255  001064  0E13               	movlw	19
  2256  001066  6E21               	movwf	spi_write@adr,c
  2257  001068  0E01               	movlw	1
  2258  00106A  6E22               	movwf	spi_write@len,c
  2259  00106C  ECF2  F011         	call	_spi_write	;wreg free
  2260                           
  2261                           ;spi.c: 144: spi_data[0]=0b00000000;
  2262  001070  0E00               	movlw	0
  2263  001072  0100               	movlb	0	; () banked
  2264  001074  6FAE               	movwf	_spi_data& (0+255),b
  2265                           
  2266                           ; BSR set to: 0
  2267                           ;spi.c: 145: spi_write(spi_data,0x14,1);
  2268  001076  0EAE               	movlw	low _spi_data
  2269  001078  6E1F               	movwf	spi_write@data,c
  2270  00107A  0E00               	movlw	high _spi_data
  2271  00107C  6E20               	movwf	spi_write@data+1,c
  2272  00107E  0E14               	movlw	20
  2273  001080  6E21               	movwf	spi_write@adr,c
  2274  001082  0E01               	movlw	1
  2275  001084  6E22               	movwf	spi_write@len,c
  2276  001086  ECF2  F011         	call	_spi_write	;wreg free
  2277                           
  2278                           ;spi.c: 147: spi_data[0]=0b00000000;
  2279  00108A  0E00               	movlw	0
  2280  00108C  0100               	movlb	0	; () banked
  2281  00108E  6FAE               	movwf	_spi_data& (0+255),b
  2282                           
  2283                           ;spi.c: 148: spi_write(spi_data,0x15,1);
  2284  001090  0EAE               	movlw	low _spi_data
  2285  001092  6E1F               	movwf	spi_write@data,c
  2286  001094  0E00               	movlw	high _spi_data
  2287  001096  6E20               	movwf	spi_write@data+1,c
  2288  001098  0E15               	movlw	21
  2289  00109A  6E21               	movwf	spi_write@adr,c
  2290  00109C  0E01               	movlw	1
  2291  00109E  6E22               	movwf	spi_write@len,c
  2292  0010A0  ECF2  F011         	call	_spi_write	;wreg free
  2293                           
  2294                           ;spi.c: 150: spi_data[0]=0b00000000;
  2295  0010A4  0E00               	movlw	0
  2296  0010A6  0100               	movlb	0	; () banked
  2297  0010A8  6FAE               	movwf	_spi_data& (0+255),b
  2298                           
  2299                           ; BSR set to: 0
  2300                           ;spi.c: 151: spi_write(spi_data,0x16,1);
  2301  0010AA  0EAE               	movlw	low _spi_data
  2302  0010AC  6E1F               	movwf	spi_write@data,c
  2303  0010AE  0E00               	movlw	high _spi_data
  2304  0010B0  6E20               	movwf	spi_write@data+1,c
  2305  0010B2  0E16               	movlw	22
  2306  0010B4  6E21               	movwf	spi_write@adr,c
  2307  0010B6  0E01               	movlw	1
  2308  0010B8  6E22               	movwf	spi_write@len,c
  2309  0010BA  ECF2  F011         	call	_spi_write	;wreg free
  2310                           
  2311                           ;spi.c: 153: spi_data[0]=0b00000000;
  2312  0010BE  0E00               	movlw	0
  2313  0010C0  0100               	movlb	0	; () banked
  2314  0010C2  6FAE               	movwf	_spi_data& (0+255),b
  2315                           
  2316                           ; BSR set to: 0
  2317                           ;spi.c: 154: spi_write(spi_data,0x17,1);
  2318  0010C4  0EAE               	movlw	low _spi_data
  2319  0010C6  6E1F               	movwf	spi_write@data,c
  2320  0010C8  0E00               	movlw	high _spi_data
  2321  0010CA  6E20               	movwf	spi_write@data+1,c
  2322  0010CC  0E17               	movlw	23
  2323  0010CE  6E21               	movwf	spi_write@adr,c
  2324  0010D0  0E01               	movlw	1
  2325  0010D2  6E22               	movwf	spi_write@len,c
  2326  0010D4  ECF2  F011         	call	_spi_write	;wreg free
  2327                           
  2328                           ;spi.c: 156: spi_data[0]=0b00000000;
  2329  0010D8  0E00               	movlw	0
  2330  0010DA  0100               	movlb	0	; () banked
  2331  0010DC  6FAE               	movwf	_spi_data& (0+255),b
  2332                           
  2333                           ;spi.c: 157: spi_write(spi_data,0x17,1);
  2334  0010DE  0EAE               	movlw	low _spi_data
  2335  0010E0  6E1F               	movwf	spi_write@data,c
  2336  0010E2  0E00               	movlw	high _spi_data
  2337  0010E4  6E20               	movwf	spi_write@data+1,c
  2338  0010E6  0E17               	movlw	23
  2339  0010E8  6E21               	movwf	spi_write@adr,c
  2340  0010EA  0E01               	movlw	1
  2341  0010EC  6E22               	movwf	spi_write@len,c
  2342  0010EE  ECF2  F011         	call	_spi_write	;wreg free
  2343                           
  2344                           ;spi.c: 159: spi_data[0]=0b00000000;
  2345  0010F2  0E00               	movlw	0
  2346  0010F4  0100               	movlb	0	; () banked
  2347  0010F6  6FAE               	movwf	_spi_data& (0+255),b
  2348                           
  2349                           ; BSR set to: 0
  2350                           ;spi.c: 160: spi_write(spi_data,0x1C,1);
  2351  0010F8  0EAE               	movlw	low _spi_data
  2352  0010FA  6E1F               	movwf	spi_write@data,c
  2353  0010FC  0E00               	movlw	high _spi_data
  2354  0010FE  6E20               	movwf	spi_write@data+1,c
  2355  001100  0E1C               	movlw	28
  2356  001102  6E21               	movwf	spi_write@adr,c
  2357  001104  0E01               	movlw	1
  2358  001106  6E22               	movwf	spi_write@len,c
  2359  001108  ECF2  F011         	call	_spi_write	;wreg free
  2360                           
  2361                           ;spi.c: 162: spi_data[0]=0b00000000;
  2362  00110C  0E00               	movlw	0
  2363  00110E  0100               	movlb	0	; () banked
  2364  001110  6FAE               	movwf	_spi_data& (0+255),b
  2365                           
  2366                           ; BSR set to: 0
  2367                           ;spi.c: 163: spi_write(spi_data,0x1D,1);
  2368  001112  0EAE               	movlw	low _spi_data
  2369  001114  6E1F               	movwf	spi_write@data,c
  2370  001116  0E00               	movlw	high _spi_data
  2371  001118  6E20               	movwf	spi_write@data+1,c
  2372  00111A  0E1D               	movlw	29
  2373  00111C  6E21               	movwf	spi_write@adr,c
  2374  00111E  0E01               	movlw	1
  2375  001120  6E22               	movwf	spi_write@len,c
  2376  001122  ECF2  F011         	call	_spi_write	;wreg free
  2377                           
  2378                           ;spi.c: 170: spi_data[0]=0b01111111;
  2379  001126  0E7F               	movlw	127
  2380  001128  0100               	movlb	0	; () banked
  2381  00112A  6FAE               	movwf	_spi_data& (0+255),b
  2382                           
  2383                           ;spi.c: 171: spi_write(spi_data,0x04,1);
  2384  00112C  0EAE               	movlw	low _spi_data
  2385  00112E  6E1F               	movwf	spi_write@data,c
  2386  001130  0E00               	movlw	high _spi_data
  2387  001132  6E20               	movwf	spi_write@data+1,c
  2388  001134  0E04               	movlw	4
  2389  001136  6E21               	movwf	spi_write@adr,c
  2390  001138  0E01               	movlw	1
  2391  00113A  6E22               	movwf	spi_write@len,c
  2392  00113C  ECF2  F011         	call	_spi_write	;wreg free
  2393                           
  2394                           ;spi.c: 172: spi_data[0]=0b00001111;
  2395  001140  0E0F               	movlw	15
  2396  001142  0100               	movlb	0	; () banked
  2397  001144  6FAE               	movwf	_spi_data& (0+255),b
  2398                           
  2399                           ; BSR set to: 0
  2400                           ;spi.c: 174: spi_write(spi_data,0x06,1);
  2401  001146  0EAE               	movlw	low _spi_data
  2402  001148  6E1F               	movwf	spi_write@data,c
  2403  00114A  0E00               	movlw	high _spi_data
  2404  00114C  6E20               	movwf	spi_write@data+1,c
  2405  00114E  0E06               	movlw	6
  2406  001150  6E21               	movwf	spi_write@adr,c
  2407  001152  0E01               	movlw	1
  2408  001154  6E22               	movwf	spi_write@len,c
  2409  001156  ECF2  F011         	call	_spi_write	;wreg free
  2410                           
  2411                           ;spi.c: 176: spi_data[0]=0b00001011;
  2412  00115A  0E0B               	movlw	11
  2413  00115C  0100               	movlb	0	; () banked
  2414  00115E  6FAE               	movwf	_spi_data& (0+255),b
  2415                           
  2416                           ; BSR set to: 0
  2417                           ;spi.c: 177: spi_write(spi_data,0x00,1);
  2418  001160  0EAE               	movlw	low _spi_data
  2419  001162  6E1F               	movwf	spi_write@data,c
  2420  001164  0E00               	movlw	high _spi_data
  2421  001166  6E20               	movwf	spi_write@data+1,c
  2422  001168  0E00               	movlw	0
  2423  00116A  6E21               	movwf	spi_write@adr,c
  2424  00116C  0E01               	movlw	1
  2425  00116E  6E22               	movwf	spi_write@len,c
  2426  001170  ECF2  F011         	call	_spi_write	;wreg free
  2427                           
  2428                           ;spi.c: 178: spi_data[0]=0b00100000;
  2429  001174  0E20               	movlw	32
  2430  001176  0100               	movlb	0	; () banked
  2431  001178  6FAE               	movwf	_spi_data& (0+255),b
  2432                           
  2433                           ;spi.c: 179: spi_write(spi_data,0x11,1);
  2434  00117A  0EAE               	movlw	low _spi_data
  2435  00117C  6E1F               	movwf	spi_write@data,c
  2436  00117E  0E00               	movlw	high _spi_data
  2437  001180  6E20               	movwf	spi_write@data+1,c
  2438  001182  0E11               	movlw	17
  2439  001184  6E21               	movwf	spi_write@adr,c
  2440  001186  0E01               	movlw	1
  2441  001188  6E22               	movwf	spi_write@len,c
  2442  00118A  ECF2  F011         	call	_spi_write	;wreg free
  2443                           
  2444                           ;spi.c: 180: PORTAbits.RA0=1;
  2445  00118E  8080               	bsf	3968,0,c	;volatile
  2446                           
  2447                           ;spi.c: 181: delay();
  2448  001190  EC0B  F013         	call	_delay	;wreg free
  2449                           
  2450                           ;spi.c: 182: delay();
  2451  001194  EC0B  F013         	call	_delay	;wreg free
  2452  001198  0012               	return		;funcret
  2453  00119A                     __end_of_receive_init:
  2454                           	opt stack 0
  2455                           tblptru	equ	0xFF8
  2456                           intcon	equ	0xFF2
  2457                           postinc0	equ	0xFEE
  2458                           wreg	equ	0xFE8
  2459                           indf1	equ	0xFE7
  2460                           postinc1	equ	0xFE6
  2461                           postdec1	equ	0xFE5
  2462                           fsr1h	equ	0xFE2
  2463                           fsr1l	equ	0xFE1
  2464                           indf2	equ	0xFDF
  2465                           postinc2	equ	0xFDE
  2466                           postdec2	equ	0xFDD
  2467                           plusw2	equ	0xFDB
  2468                           fsr2h	equ	0xFDA
  2469                           fsr2l	equ	0xFD9
  2470                           status	equ	0xFD8
  2471                           
  2472 ;; *************** function _rx_routine *****************
  2473 ;; Defined at:
  2474 ;;		line 338 in file "mod.c"
  2475 ;; Parameters:    Size  Location     Type
  2476 ;;		None
  2477 ;; Auto vars:     Size  Location     Type
  2478 ;;		None
  2479 ;; Return value:  Size  Location     Type
  2480 ;;                  1    wreg      void 
  2481 ;; Registers used:
  2482 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2483 ;; Tracked objects:
  2484 ;;		On entry : 0/0
  2485 ;;		On exit  : 0/0
  2486 ;;		Unchanged: 0/0
  2487 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2488 ;;      Params:         0       0       0       0       0       0       0
  2489 ;;      Locals:         0       0       0       0       0       0       0
  2490 ;;      Temps:          0       0       0       0       0       0       0
  2491 ;;      Totals:         0       0       0       0       0       0       0
  2492 ;;Total ram usage:        0 bytes
  2493 ;; Hardware stack levels used:    1
  2494 ;; Hardware stack levels required when called:    5
  2495 ;; This function calls:
  2496 ;;		_CRC16
  2497 ;;		_modbus_RTU
  2498 ;; This function is called by:
  2499 ;;		_main
  2500 ;; This function uses a non-reentrant model
  2501 ;;
  2502                           
  2503                           	psect	text10
  2504  00245A                     __ptext10:
  2505                           	opt stack 0
  2506  00245A                     _rx_routine:
  2507                           	opt stack 25
  2508                           
  2509                           ;mod.c: 340: if (get_i>7){
  2510                           
  2511                           ;incstack = 0
  2512  00245A  0E07               	movlw	7
  2513  00245C  6436               	cpfsgt	_get_i,c
  2514  00245E  0012               	return	
  2515                           
  2516                           ;mod.c: 341: get_i=0;
  2517  002460  0E00               	movlw	0
  2518  002462  6E36               	movwf	_get_i,c
  2519                           
  2520                           ;mod.c: 342: modbus_get_start=0;
  2521  002464  0E00               	movlw	0
  2522  002466  6E3A               	movwf	_modbus_get_start,c
  2523                           
  2524                           ;mod.c: 343: if(CRC16(inp_get_tmp,6,1)){
  2525  002468  0E00               	movlw	low _inp_get_tmp
  2526  00246A  6E1D               	movwf	CRC16@buffer,c
  2527  00246C  0E01               	movlw	high _inp_get_tmp
  2528  00246E  6E1E               	movwf	CRC16@buffer+1,c
  2529  002470  0E06               	movlw	6
  2530  002472  6E1F               	movwf	CRC16@dataLength,c
  2531  002474  0E01               	movlw	1
  2532  002476  6E20               	movwf	CRC16@check,c
  2533  002478  EC05  F00D         	call	_CRC16	;wreg free
  2534  00247C  0900               	iorlw	0
  2535  00247E  B4D8               	btfsc	status,2,c
  2536  002480  0012               	return	
  2537                           
  2538                           ;mod.c: 344: modbus_RTU();
  2539  002482  ECEA  F009         	call	_modbus_RTU	;wreg free
  2540  002486  0012               	return	
  2541  002488                     __end_of_rx_routine:
  2542                           	opt stack 0
  2543                           tblptru	equ	0xFF8
  2544                           intcon	equ	0xFF2
  2545                           postinc0	equ	0xFEE
  2546                           wreg	equ	0xFE8
  2547                           indf1	equ	0xFE7
  2548                           postinc1	equ	0xFE6
  2549                           postdec1	equ	0xFE5
  2550                           fsr1h	equ	0xFE2
  2551                           fsr1l	equ	0xFE1
  2552                           indf2	equ	0xFDF
  2553                           postinc2	equ	0xFDE
  2554                           postdec2	equ	0xFDD
  2555                           plusw2	equ	0xFDB
  2556                           fsr2h	equ	0xFDA
  2557                           fsr2l	equ	0xFD9
  2558                           status	equ	0xFD8
  2559                           
  2560 ;; *************** function _modbus_RTU *****************
  2561 ;; Defined at:
  2562 ;;		line 207 in file "mod.c"
  2563 ;; Parameters:    Size  Location     Type
  2564 ;;		None
  2565 ;; Auto vars:     Size  Location     Type
  2566 ;;  reg_adr         2   11[BANK0 ] unsigned int 
  2567 ;;  reg_count       2    7[BANK0 ] unsigned int 
  2568 ;;  i               1   13[BANK0 ] unsigned char 
  2569 ;;  get_addres      1   10[BANK0 ] unsigned char 
  2570 ;;  get_func        1    9[BANK0 ] unsigned char 
  2571 ;; Return value:  Size  Location     Type
  2572 ;;                  1    wreg      void 
  2573 ;; Registers used:
  2574 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2575 ;; Tracked objects:
  2576 ;;		On entry : 0/0
  2577 ;;		On exit  : 0/0
  2578 ;;		Unchanged: 0/0
  2579 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2580 ;;      Params:         0       0       0       0       0       0       0
  2581 ;;      Locals:         0       7       0       0       0       0       0
  2582 ;;      Temps:          4       0       0       0       0       0       0
  2583 ;;      Totals:         4       7       0       0       0       0       0
  2584 ;;Total ram usage:       11 bytes
  2585 ;; Hardware stack levels used:    1
  2586 ;; Hardware stack levels required when called:    4
  2587 ;; This function calls:
  2588 ;;		_CRC16
  2589 ;;		_send_ready
  2590 ;; This function is called by:
  2591 ;;		_rx_routine
  2592 ;; This function uses a non-reentrant model
  2593 ;;
  2594                           
  2595                           	psect	text11
  2596  0013D4                     __ptext11:
  2597                           	opt stack 0
  2598  0013D4                     _modbus_RTU:
  2599                           	opt stack 25
  2600                           
  2601                           ;mod.c: 208: unsigned char get_addres=0,get_func=0;
  2602                           
  2603                           ;incstack = 0
  2604  0013D4  0E00               	movlw	0
  2605  0013D6  0100               	movlb	0	; () banked
  2606  0013D8  6FDB               	movwf	modbus_RTU@get_addres& (0+255),b
  2607  0013DA  0E00               	movlw	0
  2608  0013DC  0100               	movlb	0	; () banked
  2609  0013DE  6FDA               	movwf	modbus_RTU@get_func& (0+255),b
  2610                           
  2611                           ; BSR set to: 0
  2612                           ;mod.c: 209: unsigned int reg_adr,reg_count;
  2613                           ;mod.c: 210: unsigned char i;
  2614                           ;mod.c: 212: get_addres=inp_get_tmp[0];
  2615  0013E0  C100  F0DB         	movff	_inp_get_tmp,modbus_RTU@get_addres
  2616                           
  2617                           ; BSR set to: 0
  2618                           ;mod.c: 213: get_func=inp_get_tmp[1];
  2619  0013E4  C101  F0DA         	movff	_inp_get_tmp+1,modbus_RTU@get_func
  2620                           
  2621                           ; BSR set to: 0
  2622                           ;mod.c: 214: reg_adr=inp_get_tmp[2]*256+inp_get_tmp[3];
  2623  0013E8  0101               	movlb	1	; () banked
  2624  0013EA  5102               	movf	(_inp_get_tmp+2)& (0+255),w,b
  2625  0013EC  6E25               	movwf	(??_modbus_RTU+1)& (0+255),c
  2626  0013EE  6A24               	clrf	??_modbus_RTU& (0+255),c
  2627  0013F0  0101               	movlb	1	; () banked
  2628  0013F2  5103               	movf	(_inp_get_tmp+3)& (0+255),w,b
  2629  0013F4  2424               	addwf	??_modbus_RTU,w,c
  2630  0013F6  0100               	movlb	0	; () banked
  2631  0013F8  6FDC               	movwf	modbus_RTU@reg_adr& (0+255),b
  2632  0013FA  0101               	movlb	1	; () banked
  2633  0013FC  0E00               	movlw	0
  2634  0013FE  2025               	addwfc	??_modbus_RTU+1,w,c
  2635  001400  0100               	movlb	0	; () banked
  2636  001402  6FDD               	movwf	(modbus_RTU@reg_adr+1)& (0+255),b
  2637                           
  2638                           ; BSR set to: 0
  2639                           ;mod.c: 215: reg_count=inp_get_tmp[4]*256+inp_get_tmp[5];
  2640  001404  0101               	movlb	1	; () banked
  2641  001406  5104               	movf	(_inp_get_tmp+4)& (0+255),w,b
  2642  001408  6E25               	movwf	(??_modbus_RTU+1)& (0+255),c
  2643  00140A  6A24               	clrf	??_modbus_RTU& (0+255),c
  2644  00140C  0101               	movlb	1	; () banked
  2645  00140E  5105               	movf	(_inp_get_tmp+5)& (0+255),w,b
  2646  001410  2424               	addwf	??_modbus_RTU,w,c
  2647  001412  0100               	movlb	0	; () banked
  2648  001414  6FD8               	movwf	modbus_RTU@reg_count& (0+255),b
  2649  001416  0101               	movlb	1	; () banked
  2650  001418  0E00               	movlw	0
  2651  00141A  2025               	addwfc	??_modbus_RTU+1,w,c
  2652  00141C  0100               	movlb	0	; () banked
  2653  00141E  6FD9               	movwf	(modbus_RTU@reg_count+1)& (0+255),b
  2654                           
  2655                           ; BSR set to: 0
  2656                           ;mod.c: 217: if (get_addres==Registers[50] || get_addres==0xFF){
  2657  001420  EE22  F02C         	lfsr	2,_Registers+100
  2658  001424  0100               	movlb	0	; () banked
  2659  001426  51DB               	movf	modbus_RTU@get_addres& (0+255),w,b
  2660  001428  6E26               	movwf	(??_modbus_RTU+2)& (0+255),c
  2661  00142A  6A27               	clrf	(??_modbus_RTU+3)& (0+255),c
  2662  00142C  50DE               	movf	postinc2,w,c
  2663  00142E  1826               	xorwf	??_modbus_RTU+2,w,c
  2664  001430  E104               	bnz	u3040
  2665  001432  50DE               	movf	postinc2,w,c
  2666  001434  1827               	xorwf	??_modbus_RTU+3,w,c
  2667  001436  B4D8               	btfsc	status,2,c
  2668  001438  D0C4               	goto	l3941
  2669  00143A                     u3040:
  2670                           
  2671                           ; BSR set to: 0
  2672  00143A  0100               	movlb	0	; () banked
  2673  00143C  29DB               	incf	modbus_RTU@get_addres& (0+255),w,b
  2674  00143E  B4D8               	btfsc	status,2,c
  2675  001440  D0C0               	goto	l3941
  2676  001442  D0C7               	goto	l3943
  2677  001444                     l404:
  2678                           
  2679                           ; BSR set to: 0
  2680                           ;mod.c: 221: out_send_tmp[0] = get_addres;
  2681  001444  C0DB  F164         	movff	modbus_RTU@get_addres,_out_send_tmp
  2682                           
  2683                           ;mod.c: 222: out_send_tmp[1] = get_func;
  2684  001448  C0DA  F165         	movff	modbus_RTU@get_func,_out_send_tmp+1
  2685                           
  2686                           ; BSR set to: 0
  2687                           ;mod.c: 223: out_send_tmp[2] = reg_count * 2;
  2688  00144C  0100               	movlb	0	; () banked
  2689  00144E  51D8               	movf	modbus_RTU@reg_count& (0+255),w,b
  2690  001450  25D8               	addwf	modbus_RTU@reg_count& (0+255),w,b
  2691  001452  0101               	movlb	1	; () banked
  2692  001454  6F66               	movwf	(_out_send_tmp+2)& (0+255),b
  2693                           
  2694                           ; BSR set to: 1
  2695                           ;mod.c: 225: for (i=0;i<reg_count;i++){
  2696  001456  0E00               	movlw	0
  2697  001458  0100               	movlb	0	; () banked
  2698  00145A  6FDE               	movwf	modbus_RTU@i& (0+255),b
  2699  00145C  D042               	goto	l3909
  2700  00145E                     l3901:
  2701                           
  2702                           ; BSR set to: 0
  2703                           ;mod.c: 226: *tmp2_16bit=Registers[reg_adr+i];
  2704  00145E  0100               	movlb	0	; () banked
  2705  001460  51DE               	movf	modbus_RTU@i& (0+255),w,b
  2706  001462  0100               	movlb	0	; () banked
  2707  001464  25DC               	addwf	modbus_RTU@reg_adr& (0+255),w,b
  2708  001466  6E24               	movwf	??_modbus_RTU& (0+255),c
  2709  001468  0E00               	movlw	0
  2710  00146A  0100               	movlb	0	; () banked
  2711  00146C  21DD               	addwfc	(modbus_RTU@reg_adr+1)& (0+255),w,b
  2712  00146E  6E25               	movwf	(??_modbus_RTU+1)& (0+255),c
  2713  001470  90D8               	bcf	status,0,c
  2714  001472  3624               	rlcf	??_modbus_RTU,f,c
  2715  001474  3625               	rlcf	??_modbus_RTU+1,f,c
  2716  001476  0EC8               	movlw	low _Registers
  2717  001478  2424               	addwf	??_modbus_RTU,w,c
  2718  00147A  6ED9               	movwf	fsr2l,c
  2719  00147C  0E01               	movlw	high _Registers
  2720  00147E  2025               	addwfc	??_modbus_RTU+1,w,c
  2721  001480  6EDA               	movwf	fsr2h,c
  2722  001482  C0A2  FFE1         	movff	_tmp2_16bit,fsr1l
  2723  001486  C0A3  FFE2         	movff	_tmp2_16bit+1,fsr1h
  2724  00148A  CFDE FFE6          	movff	postinc2,postinc1
  2725  00148E  CFDD FFE5          	movff	postdec2,postdec1
  2726                           
  2727                           ; BSR set to: 0
  2728                           ;mod.c: 227: out_send_tmp[3+i*2] = tmp2[1];
  2729  001492  0100               	movlb	0	; () banked
  2730  001494  51DE               	movf	modbus_RTU@i& (0+255),w,b
  2731  001496  6E24               	movwf	??_modbus_RTU& (0+255),c
  2732  001498  6A25               	clrf	(??_modbus_RTU+1)& (0+255),c
  2733  00149A  90D8               	bcf	status,0,c
  2734  00149C  3624               	rlcf	??_modbus_RTU,f,c
  2735  00149E  3625               	rlcf	??_modbus_RTU+1,f,c
  2736  0014A0  0E03               	movlw	3
  2737  0014A2  2624               	addwf	??_modbus_RTU,f,c
  2738  0014A4  0E00               	movlw	0
  2739  0014A6  2225               	addwfc	??_modbus_RTU+1,f,c
  2740  0014A8  0E64               	movlw	low _out_send_tmp
  2741  0014AA  2424               	addwf	??_modbus_RTU,w,c
  2742  0014AC  6ED9               	movwf	fsr2l,c
  2743  0014AE  0E01               	movlw	high _out_send_tmp
  2744  0014B0  2025               	addwfc	??_modbus_RTU+1,w,c
  2745  0014B2  6EDA               	movwf	fsr2h,c
  2746  0014B4  C042  FFDF         	movff	_tmp2+1,indf2
  2747                           
  2748                           ; BSR set to: 0
  2749                           ;mod.c: 228: out_send_tmp[4+i*2] = tmp2[0];
  2750  0014B8  0100               	movlb	0	; () banked
  2751  0014BA  51DE               	movf	modbus_RTU@i& (0+255),w,b
  2752  0014BC  6E24               	movwf	??_modbus_RTU& (0+255),c
  2753  0014BE  6A25               	clrf	(??_modbus_RTU+1)& (0+255),c
  2754  0014C0  90D8               	bcf	status,0,c
  2755  0014C2  3624               	rlcf	??_modbus_RTU,f,c
  2756  0014C4  3625               	rlcf	??_modbus_RTU+1,f,c
  2757  0014C6  0E04               	movlw	4
  2758  0014C8  2624               	addwf	??_modbus_RTU,f,c
  2759  0014CA  0E00               	movlw	0
  2760  0014CC  2225               	addwfc	??_modbus_RTU+1,f,c
  2761  0014CE  0E64               	movlw	low _out_send_tmp
  2762  0014D0  2424               	addwf	??_modbus_RTU,w,c
  2763  0014D2  6ED9               	movwf	fsr2l,c
  2764  0014D4  0E01               	movlw	high _out_send_tmp
  2765  0014D6  2025               	addwfc	??_modbus_RTU+1,w,c
  2766  0014D8  6EDA               	movwf	fsr2h,c
  2767  0014DA  C041  FFDF         	movff	_tmp2,indf2
  2768                           
  2769                           ; BSR set to: 0
  2770  0014DE  0100               	movlb	0	; () banked
  2771  0014E0  2BDE               	incf	modbus_RTU@i& (0+255),f,b
  2772  0014E2                     l3909:
  2773                           
  2774                           ; BSR set to: 0
  2775  0014E2  0100               	movlb	0	; () banked
  2776  0014E4  51DE               	movf	modbus_RTU@i& (0+255),w,b
  2777  0014E6  6E24               	movwf	??_modbus_RTU& (0+255),c
  2778  0014E8  6A25               	clrf	(??_modbus_RTU+1)& (0+255),c
  2779  0014EA  0100               	movlb	0	; () banked
  2780  0014EC  51D8               	movf	modbus_RTU@reg_count& (0+255),w,b
  2781  0014EE  5C24               	subwf	??_modbus_RTU,w,c
  2782  0014F0  0100               	movlb	0	; () banked
  2783  0014F2  51D9               	movf	(modbus_RTU@reg_count+1)& (0+255),w,b
  2784  0014F4  5825               	subwfb	??_modbus_RTU+1,w,c
  2785  0014F6  A0D8               	btfss	status,0,c
  2786  0014F8  D7B2               	goto	l3901
  2787                           
  2788                           ; BSR set to: 0
  2789                           ;mod.c: 229: }
  2790                           ;mod.c: 231: CRC16(out_send_tmp,3+out_send_tmp[2],0);
  2791                           
  2792                           ; BSR set to: 0
  2793  0014FA  0E64               	movlw	low _out_send_tmp
  2794  0014FC  6E1D               	movwf	CRC16@buffer,c
  2795  0014FE  0E01               	movlw	high _out_send_tmp
  2796  001500  6E1E               	movwf	CRC16@buffer+1,c
  2797  001502  0101               	movlb	1	; () banked
  2798  001504  5166               	movf	(_out_send_tmp+2)& (0+255),w,b
  2799  001506  0F03               	addlw	3
  2800  001508  6E1F               	movwf	CRC16@dataLength,c
  2801  00150A  0E00               	movlw	0
  2802  00150C  6E20               	movwf	CRC16@check,c
  2803  00150E  EC05  F00D         	call	_CRC16	;wreg free
  2804                           
  2805                           ;mod.c: 232: send_ready(5+out_send_tmp[2]);
  2806  001512  0101               	movlb	1	; () banked
  2807  001514  5166               	movf	(_out_send_tmp+2)& (0+255),w,b
  2808  001516  0F05               	addlw	5
  2809  001518  EC14  F013         	call	_send_ready
  2810                           
  2811                           ;mod.c: 237: break;
  2812  00151C  D05A               	goto	l3943
  2813  00151E                     l409:
  2814                           
  2815                           ; BSR set to: 0
  2816                           ;mod.c: 239: tmp2[1] = inp_get_tmp[4];
  2817  00151E  C104  F042         	movff	_inp_get_tmp+4,_tmp2+1
  2818                           
  2819                           ;mod.c: 240: tmp2[0] = inp_get_tmp[5];
  2820  001522  C105  F041         	movff	_inp_get_tmp+5,_tmp2
  2821                           
  2822                           ; BSR set to: 0
  2823                           ;mod.c: 241: Registers[reg_adr]=*tmp2_16bit;
  2824  001526  C0A2  FFD9         	movff	_tmp2_16bit,fsr2l
  2825  00152A  C0A3  FFDA         	movff	_tmp2_16bit+1,fsr2h
  2826  00152E  90D8               	bcf	status,0,c
  2827  001530  0100               	movlb	0	; () banked
  2828  001532  35DC               	rlcf	modbus_RTU@reg_adr& (0+255),w,b
  2829  001534  6EE1               	movwf	fsr1l,c
  2830  001536  0100               	movlb	0	; () banked
  2831  001538  35DD               	rlcf	(modbus_RTU@reg_adr+1)& (0+255),w,b
  2832  00153A  6EE2               	movwf	fsr1h,c
  2833  00153C  0EC8               	movlw	low _Registers
  2834  00153E  26E1               	addwf	fsr1l,f,c
  2835  001540  0E01               	movlw	high _Registers
  2836  001542  22E2               	addwfc	fsr1h,f,c
  2837  001544  CFDE FFE6          	movff	postinc2,postinc1
  2838  001548  CFDD FFE5          	movff	postdec2,postdec1
  2839                           
  2840                           ; BSR set to: 0
  2841                           ;mod.c: 242: send_count=8;
  2842  00154C  0E08               	movlw	8
  2843  00154E  6E3D               	movwf	_send_count,c
  2844                           
  2845                           ; BSR set to: 0
  2846                           ;mod.c: 243: for (i=0;i<8;i++){out_send_tmp[i]=inp_get_tmp[i];}
  2847  001550  0E00               	movlw	0
  2848  001552  0100               	movlb	0	; () banked
  2849  001554  6FDE               	movwf	modbus_RTU@i& (0+255),b
  2850  001556                     l3921:
  2851                           
  2852                           ; BSR set to: 0
  2853  001556  0E07               	movlw	7
  2854  001558  0100               	movlb	0	; () banked
  2855  00155A  65DE               	cpfsgt	modbus_RTU@i& (0+255),b
  2856  00155C  D001               	goto	l3925
  2857  00155E  D017               	goto	l3931
  2858  001560                     l3925:
  2859                           
  2860                           ; BSR set to: 0
  2861  001560  0100               	movlb	0	; () banked
  2862  001562  51DE               	movf	modbus_RTU@i& (0+255),w,b
  2863  001564  0D01               	mullw	1
  2864  001566  0E00               	movlw	low _inp_get_tmp
  2865  001568  24F3               	addwf	prodl,w,c
  2866  00156A  6ED9               	movwf	fsr2l,c
  2867  00156C  0E01               	movlw	high _inp_get_tmp
  2868  00156E  20F4               	addwfc	prodh,w,c
  2869  001570  6EDA               	movwf	fsr2h,c
  2870  001572  0100               	movlb	0	; () banked
  2871  001574  51DE               	movf	modbus_RTU@i& (0+255),w,b
  2872  001576  0D01               	mullw	1
  2873  001578  0E64               	movlw	low _out_send_tmp
  2874  00157A  24F3               	addwf	prodl,w,c
  2875  00157C  6EE1               	movwf	fsr1l,c
  2876  00157E  0E01               	movlw	high _out_send_tmp
  2877  001580  20F4               	addwfc	prodh,w,c
  2878  001582  6EE2               	movwf	fsr1h,c
  2879  001584  CFDF FFE7          	movff	indf2,indf1
  2880                           
  2881                           ; BSR set to: 0
  2882  001588  0100               	movlb	0	; () banked
  2883  00158A  2BDE               	incf	modbus_RTU@i& (0+255),f,b
  2884  00158C  D7E4               	goto	l3921
  2885  00158E                     l3931:
  2886                           
  2887                           ; BSR set to: 0
  2888                           ;mod.c: 244: send_ready(8);
  2889  00158E  0E08               	movlw	8
  2890  001590  EC14  F013         	call	_send_ready
  2891                           
  2892                           ;mod.c: 247: if (reg_adr>49 && reg_adr<100){Registers[49]=1;}
  2893  001594  0100               	movlb	0	; () banked
  2894  001596  51DD               	movf	(modbus_RTU@reg_adr+1)& (0+255),w,b
  2895  001598  E105               	bnz	u3090
  2896  00159A  0E32               	movlw	50
  2897  00159C  0100               	movlb	0	; () banked
  2898  00159E  5DDC               	subwf	modbus_RTU@reg_adr& (0+255),w,b
  2899  0015A0  A0D8               	btfss	status,0,c
  2900  0015A2  D017               	goto	l3943
  2901  0015A4                     u3090:
  2902                           
  2903                           ; BSR set to: 0
  2904  0015A4  0100               	movlb	0	; () banked
  2905  0015A6  51DD               	movf	(modbus_RTU@reg_adr+1)& (0+255),w,b
  2906  0015A8  E114               	bnz	l3943
  2907  0015AA  0E64               	movlw	100
  2908  0015AC  0100               	movlb	0	; () banked
  2909  0015AE  5DDC               	subwf	modbus_RTU@reg_adr& (0+255),w,b
  2910  0015B0  B0D8               	btfsc	status,0,c
  2911  0015B2  D00F               	goto	l3943
  2912                           
  2913                           ; BSR set to: 0
  2914  0015B4  0E01               	movlw	1
  2915  0015B6  CFE8 F22A          	movff	wreg,_Registers+98
  2916  0015BA  0E00               	movlw	0
  2917  0015BC  CFE8 F22B          	movff	wreg,_Registers+99
  2918                           
  2919                           ; BSR set to: 0
  2920                           ;mod.c: 253: }
  2921                           
  2922                           ; BSR set to: 0
  2923                           
  2924                           ;mod.c: 252: default:break;
  2925                           
  2926                           ; BSR set to: 0
  2927                           ;mod.c: 250: break;
  2928  0015C0  D008               	goto	l3943
  2929  0015C2                     l3941:
  2930                           
  2931                           ; BSR set to: 0
  2932  0015C2  0100               	movlb	0	; () banked
  2933  0015C4  51DA               	movf	modbus_RTU@get_func& (0+255),w,b
  2934                           
  2935                           ; Switch size 1, requested type "space"
  2936                           ; Number of cases is 2, Range of values is 3 to 6
  2937                           ; switch strategies available:
  2938                           ; Name         Instructions Cycles
  2939                           ; simple_byte            7     4 (average)
  2940                           ;	Chosen strategy is simple_byte
  2941  0015C6  0A03               	xorlw	3	; case 3
  2942  0015C8  B4D8               	btfsc	status,2,c
  2943  0015CA  D73C               	goto	l404
  2944  0015CC  0A05               	xorlw	5	; case 6
  2945  0015CE  B4D8               	btfsc	status,2,c
  2946  0015D0  D7A6               	goto	l409
  2947  0015D2                     l3943:
  2948                           
  2949                           ;mod.c: 254: }
  2950                           ;mod.c: 256: modbus_get_start=0;
  2951  0015D2  0E00               	movlw	0
  2952  0015D4  6E3A               	movwf	_modbus_get_start,c
  2953                           
  2954                           ;mod.c: 257: get_addres=0;
  2955  0015D6  0E00               	movlw	0
  2956  0015D8  0100               	movlb	0	; () banked
  2957  0015DA  6FDB               	movwf	modbus_RTU@get_addres& (0+255),b
  2958                           
  2959                           ;mod.c: 258: get_func=0;
  2960  0015DC  0E00               	movlw	0
  2961  0015DE  0100               	movlb	0	; () banked
  2962  0015E0  6FDA               	movwf	modbus_RTU@get_func& (0+255),b
  2963                           
  2964                           ; BSR set to: 0
  2965  0015E2  0012               	return		;funcret
  2966  0015E4                     __end_of_modbus_RTU:
  2967                           	opt stack 0
  2968                           tblptru	equ	0xFF8
  2969                           prodh	equ	0xFF4
  2970                           prodl	equ	0xFF3
  2971                           intcon	equ	0xFF2
  2972                           postinc0	equ	0xFEE
  2973                           wreg	equ	0xFE8
  2974                           indf1	equ	0xFE7
  2975                           postinc1	equ	0xFE6
  2976                           postdec1	equ	0xFE5
  2977                           fsr1h	equ	0xFE2
  2978                           fsr1l	equ	0xFE1
  2979                           indf2	equ	0xFDF
  2980                           postinc2	equ	0xFDE
  2981                           postdec2	equ	0xFDD
  2982                           plusw2	equ	0xFDB
  2983                           fsr2h	equ	0xFDA
  2984                           fsr2l	equ	0xFD9
  2985                           status	equ	0xFD8
  2986                           
  2987 ;; *************** function _send_ready *****************
  2988 ;; Defined at:
  2989 ;;		line 197 in file "mod.c"
  2990 ;; Parameters:    Size  Location     Type
  2991 ;;  cnt             1    wreg     unsigned char 
  2992 ;; Auto vars:     Size  Location     Type
  2993 ;;  cnt             1   28[COMRAM] unsigned char 
  2994 ;; Return value:  Size  Location     Type
  2995 ;;                  1    wreg      void 
  2996 ;; Registers used:
  2997 ;;		wreg, status,2
  2998 ;; Tracked objects:
  2999 ;;		On entry : 0/0
  3000 ;;		On exit  : 0/0
  3001 ;;		Unchanged: 0/0
  3002 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3003 ;;      Params:         0       0       0       0       0       0       0
  3004 ;;      Locals:         1       0       0       0       0       0       0
  3005 ;;      Temps:          0       0       0       0       0       0       0
  3006 ;;      Totals:         1       0       0       0       0       0       0
  3007 ;;Total ram usage:        1 bytes
  3008 ;; Hardware stack levels used:    1
  3009 ;; Hardware stack levels required when called:    3
  3010 ;; This function calls:
  3011 ;;		Nothing
  3012 ;; This function is called by:
  3013 ;;		_modbus_RTU
  3014 ;;		_modbus_RTU_err
  3015 ;; This function uses a non-reentrant model
  3016 ;;
  3017                           
  3018                           	psect	text12
  3019  002628                     __ptext12:
  3020                           	opt stack 0
  3021  002628                     _send_ready:
  3022                           	opt stack 25
  3023                           
  3024                           ; BSR set to: 0
  3025                           ;incstack = 0
  3026                           ;send_ready@cnt stored from wreg
  3027  002628  6E1D               	movwf	send_ready@cnt,c
  3028                           
  3029                           ;mod.c: 198: send_count=cnt;
  3030  00262A  C01D  F03D         	movff	send_ready@cnt,_send_count
  3031                           
  3032                           ;mod.c: 200: read_write=1;
  3033  00262E  0E01               	movlw	1
  3034  002630  6E3C               	movwf	_read_write,c
  3035                           
  3036                           ;mod.c: 203: TXSTA1bits.TXEN=1;
  3037  002632  8AAC               	bsf	4012,5,c	;volatile
  3038                           
  3039                           ;mod.c: 204: PIR1bits.TXIF=0;
  3040  002634  989E               	bcf	3998,4,c	;volatile
  3041  002636  0012               	return		;funcret
  3042  002638                     __end_of_send_ready:
  3043                           	opt stack 0
  3044                           tblptru	equ	0xFF8
  3045                           prodh	equ	0xFF4
  3046                           prodl	equ	0xFF3
  3047                           intcon	equ	0xFF2
  3048                           postinc0	equ	0xFEE
  3049                           wreg	equ	0xFE8
  3050                           indf1	equ	0xFE7
  3051                           postinc1	equ	0xFE6
  3052                           postdec1	equ	0xFE5
  3053                           fsr1h	equ	0xFE2
  3054                           fsr1l	equ	0xFE1
  3055                           indf2	equ	0xFDF
  3056                           postinc2	equ	0xFDE
  3057                           postdec2	equ	0xFDD
  3058                           plusw2	equ	0xFDB
  3059                           fsr2h	equ	0xFDA
  3060                           fsr2l	equ	0xFD9
  3061                           status	equ	0xFD8
  3062                           
  3063 ;; *************** function _CRC16 *****************
  3064 ;; Defined at:
  3065 ;;		line 137 in file "mod.c"
  3066 ;; Parameters:    Size  Location     Type
  3067 ;;  buffer          2   28[COMRAM] PTR unsigned char 
  3068 ;;		 -> out_send_tmp(100), inp_get_tmp(100), 
  3069 ;;  dataLength      1   30[COMRAM] unsigned char 
  3070 ;;  check           1   31[COMRAM] unsigned char 
  3071 ;; Auto vars:     Size  Location     Type
  3072 ;;  CheckSum        2    5[BANK0 ] unsigned int 
  3073 ;;  j               2    2[BANK0 ] unsigned int 
  3074 ;;  i               1    4[BANK0 ] unsigned char 
  3075 ;;  highCRC         1    1[BANK0 ] unsigned char 
  3076 ;;  lowCRC          1    0[BANK0 ] unsigned char 
  3077 ;; Return value:  Size  Location     Type
  3078 ;;                  1    wreg      unsigned char 
  3079 ;; Registers used:
  3080 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  3081 ;; Tracked objects:
  3082 ;;		On entry : 0/0
  3083 ;;		On exit  : 0/0
  3084 ;;		Unchanged: 0/0
  3085 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3086 ;;      Params:         4       0       0       0       0       0       0
  3087 ;;      Locals:         0       7       0       0       0       0       0
  3088 ;;      Temps:          3       0       0       0       0       0       0
  3089 ;;      Totals:         7       7       0       0       0       0       0
  3090 ;;Total ram usage:       14 bytes
  3091 ;; Hardware stack levels used:    1
  3092 ;; Hardware stack levels required when called:    3
  3093 ;; This function calls:
  3094 ;;		Nothing
  3095 ;; This function is called by:
  3096 ;;		_modbus_RTU
  3097 ;;		_rx_routine
  3098 ;;		_modbus_RTU_err
  3099 ;; This function uses a non-reentrant model
  3100 ;;
  3101                           
  3102                           	psect	text13
  3103  001A0A                     __ptext13:
  3104                           	opt stack 0
  3105  001A0A                     _CRC16:
  3106                           	opt stack 25
  3107                           
  3108                           ;mod.c: 139: unsigned int CheckSum;
  3109                           ;mod.c: 140: unsigned int j;
  3110                           ;mod.c: 141: unsigned char lowCRC;
  3111                           ;mod.c: 142: unsigned char highCRC;
  3112                           ;mod.c: 143: unsigned char i;
  3113                           ;mod.c: 144: CheckSum = 0xffff;
  3114                           
  3115                           ;incstack = 0
  3116  001A0A  0100               	movlb	0	; () banked
  3117  001A0C  69D6               	setf	CRC16@CheckSum& (0+255),b
  3118  001A0E  69D7               	setf	(CRC16@CheckSum+1)& (0+255),b
  3119                           
  3120                           ; BSR set to: 0
  3121                           ;mod.c: 146: for (j=0; j<dataLength; j++)
  3122  001A10  0E00               	movlw	0
  3123  001A12  0100               	movlb	0	; () banked
  3124  001A14  6FD4               	movwf	(CRC16@j+1)& (0+255),b
  3125  001A16  0E00               	movlw	0
  3126  001A18  6FD3               	movwf	CRC16@j& (0+255),b
  3127  001A1A  D038               	goto	l3797
  3128  001A1C                     l3781:
  3129                           
  3130                           ; BSR set to: 0
  3131                           ;mod.c: 147: {
  3132                           ;mod.c: 148: CheckSum = CheckSum^(unsigned int)buffer[j];
  3133  001A1C  0100               	movlb	0	; () banked
  3134  001A1E  51D3               	movf	CRC16@j& (0+255),w,b
  3135  001A20  241D               	addwf	CRC16@buffer,w,c
  3136  001A22  6ED9               	movwf	fsr2l,c
  3137  001A24  0100               	movlb	0	; () banked
  3138  001A26  51D4               	movf	(CRC16@j+1)& (0+255),w,b
  3139  001A28  201E               	addwfc	CRC16@buffer+1,w,c
  3140  001A2A  6EDA               	movwf	fsr2h,c
  3141  001A2C  50DF               	movf	indf2,w,c
  3142  001A2E  6E21               	movwf	??_CRC16& (0+255),c
  3143  001A30  0100               	movlb	0	; () banked
  3144  001A32  51D6               	movf	CRC16@CheckSum& (0+255),w,b
  3145  001A34  1821               	xorwf	??_CRC16,w,c
  3146  001A36  0100               	movlb	0	; () banked
  3147  001A38  6FD6               	movwf	CRC16@CheckSum& (0+255),b
  3148  001A3A  0100               	movlb	0	; () banked
  3149  001A3C  51D7               	movf	(CRC16@CheckSum+1)& (0+255),w,b
  3150  001A3E  0100               	movlb	0	; () banked
  3151  001A40  6FD7               	movwf	(CRC16@CheckSum+1)& (0+255),b
  3152                           
  3153                           ; BSR set to: 0
  3154                           ;mod.c: 149: for(i=8;i>0;i--)
  3155  001A42  0E08               	movlw	8
  3156  001A44  0100               	movlb	0	; () banked
  3157  001A46  6FD5               	movwf	CRC16@i& (0+255),b
  3158  001A48                     l3785:
  3159                           
  3160                           ; BSR set to: 0
  3161  001A48  0100               	movlb	0	; () banked
  3162  001A4A  51D5               	movf	CRC16@i& (0+255),w,b
  3163  001A4C  0100               	movlb	0	; () banked
  3164  001A4E  B4D8               	btfsc	status,2,c
  3165  001A50  D01A               	goto	l3795
  3166                           
  3167                           ; BSR set to: 0
  3168                           ;mod.c: 150: if((CheckSum)&0x0001)
  3169                           
  3170                           ; BSR set to: 0
  3171  001A52  0100               	movlb	0	; () banked
  3172  001A54  A1D6               	btfss	CRC16@CheckSum& (0+255),0,b
  3173  001A56  D010               	goto	l3791
  3174                           
  3175                           ; BSR set to: 0
  3176                           ;mod.c: 151: CheckSum = (CheckSum>>1)^0xa001;
  3177  001A58  90D8               	bcf	status,0,c
  3178  001A5A  0100               	movlb	0	; () banked
  3179  001A5C  31D7               	rrcf	(CRC16@CheckSum+1)& (0+255),w,b
  3180  001A5E  6E22               	movwf	(??_CRC16+1)& (0+255),c
  3181  001A60  0100               	movlb	0	; () banked
  3182  001A62  31D6               	rrcf	CRC16@CheckSum& (0+255),w,b
  3183  001A64  6E21               	movwf	??_CRC16& (0+255),c
  3184  001A66  0E01               	movlw	1
  3185  001A68  1821               	xorwf	??_CRC16,w,c
  3186  001A6A  0100               	movlb	0	; () banked
  3187  001A6C  6FD6               	movwf	CRC16@CheckSum& (0+255),b
  3188  001A6E  0EA0               	movlw	160
  3189  001A70  1822               	xorwf	??_CRC16+1,w,c
  3190  001A72  0100               	movlb	0	; () banked
  3191  001A74  6FD7               	movwf	(CRC16@CheckSum+1)& (0+255),b
  3192  001A76  D004               	goto	l382
  3193  001A78                     l3791:
  3194                           
  3195                           ; BSR set to: 0
  3196                           ;mod.c: 152: else
  3197                           ;mod.c: 153: CheckSum>>=1;
  3198  001A78  0100               	movlb	0	; () banked
  3199  001A7A  90D8               	bcf	status,0,c
  3200  001A7C  33D7               	rrcf	(CRC16@CheckSum+1)& (0+255),f,b
  3201  001A7E  33D6               	rrcf	CRC16@CheckSum& (0+255),f,b
  3202  001A80                     l382:
  3203                           
  3204                           ; BSR set to: 0
  3205  001A80  0100               	movlb	0	; () banked
  3206  001A82  07D5               	decf	CRC16@i& (0+255),f,b
  3207  001A84  D7E1               	goto	l3785
  3208  001A86                     l3795:
  3209                           
  3210                           ; BSR set to: 0
  3211  001A86  0100               	movlb	0	; () banked
  3212  001A88  4BD3               	infsnz	CRC16@j& (0+255),f,b
  3213  001A8A  2BD4               	incf	(CRC16@j+1)& (0+255),f,b
  3214  001A8C                     l3797:
  3215                           
  3216                           ; BSR set to: 0
  3217  001A8C  501F               	movf	CRC16@dataLength,w,c
  3218  001A8E  6E21               	movwf	??_CRC16& (0+255),c
  3219  001A90  6A22               	clrf	(??_CRC16+1)& (0+255),c
  3220  001A92  5021               	movf	??_CRC16,w,c
  3221  001A94  0100               	movlb	0	; () banked
  3222  001A96  5DD3               	subwf	CRC16@j& (0+255),w,b
  3223  001A98  5022               	movf	??_CRC16+1,w,c
  3224  001A9A  0100               	movlb	0	; () banked
  3225  001A9C  59D4               	subwfb	(CRC16@j+1)& (0+255),w,b
  3226  001A9E  A0D8               	btfss	status,0,c
  3227  001AA0  D7BD               	goto	l3781
  3228                           
  3229                           ; BSR set to: 0
  3230                           ;mod.c: 154: }
  3231                           ;mod.c: 155: highCRC = CheckSum>>8;
  3232                           
  3233                           ; BSR set to: 0
  3234  001AA2  0100               	movlb	0	; () banked
  3235  001AA4  51D7               	movf	(CRC16@CheckSum+1)& (0+255),w,b
  3236  001AA6  0100               	movlb	0	; () banked
  3237  001AA8  6FD2               	movwf	CRC16@highCRC& (0+255),b
  3238                           
  3239                           ;mod.c: 156: CheckSum<<=8;
  3240  001AAA  0100               	movlb	0	; () banked
  3241  001AAC  51D6               	movf	CRC16@CheckSum& (0+255),w,b
  3242  001AAE  6FD7               	movwf	(CRC16@CheckSum+1)& (0+255),b
  3243  001AB0  6BD6               	clrf	CRC16@CheckSum& (0+255),b
  3244                           
  3245                           ;mod.c: 157: lowCRC = CheckSum>>8;
  3246  001AB2  0100               	movlb	0	; () banked
  3247  001AB4  51D7               	movf	(CRC16@CheckSum+1)& (0+255),w,b
  3248  001AB6  0100               	movlb	0	; () banked
  3249  001AB8  6FD1               	movwf	CRC16@lowCRC& (0+255),b
  3250                           
  3251                           ; BSR set to: 0
  3252                           ;mod.c: 158: if (check==1){
  3253  001ABA  0420               	decf	CRC16@check,w,c
  3254  001ABC  A4D8               	btfss	status,2,c
  3255  001ABE  D023               	goto	l3817
  3256                           
  3257                           ; BSR set to: 0
  3258                           ;mod.c: 159: if ( (buffer[dataLength+1] == highCRC) & (buffer[dataLength] == lowCRC ))
  3259  001AC0  501F               	movf	CRC16@dataLength,w,c
  3260  001AC2  6E21               	movwf	??_CRC16& (0+255),c
  3261  001AC4  6A22               	clrf	(??_CRC16+1)& (0+255),c
  3262  001AC6  0E01               	movlw	1
  3263  001AC8  2621               	addwf	??_CRC16,f,c
  3264  001ACA  0E00               	movlw	0
  3265  001ACC  2222               	addwfc	??_CRC16+1,f,c
  3266  001ACE  5021               	movf	??_CRC16,w,c
  3267  001AD0  241D               	addwf	CRC16@buffer,w,c
  3268  001AD2  6ED9               	movwf	fsr2l,c
  3269  001AD4  5022               	movf	??_CRC16+1,w,c
  3270  001AD6  201E               	addwfc	CRC16@buffer+1,w,c
  3271  001AD8  6EDA               	movwf	fsr2h,c
  3272  001ADA  0100               	movlb	0	; () banked
  3273  001ADC  51D2               	movf	CRC16@highCRC& (0+255),w,b
  3274  001ADE  18DE               	xorwf	postinc2,w,c
  3275  001AE0  A4D8               	btfss	status,2,c
  3276  001AE2  D00F               	goto	l3813
  3277                           
  3278                           ; BSR set to: 0
  3279  001AE4  501F               	movf	CRC16@dataLength,w,c
  3280  001AE6  0D01               	mullw	1
  3281  001AE8  50F3               	movf	prodl,w,c
  3282  001AEA  241D               	addwf	CRC16@buffer,w,c
  3283  001AEC  6ED9               	movwf	fsr2l,c
  3284  001AEE  50F4               	movf	prodh,w,c
  3285  001AF0  201E               	addwfc	CRC16@buffer+1,w,c
  3286  001AF2  6EDA               	movwf	fsr2h,c
  3287  001AF4  0100               	movlb	0	; () banked
  3288  001AF6  51D1               	movf	CRC16@lowCRC& (0+255),w,b
  3289  001AF8  18DE               	xorwf	postinc2,w,c
  3290  001AFA  A4D8               	btfss	status,2,c
  3291  001AFC  D002               	goto	l3813
  3292                           
  3293                           ; BSR set to: 0
  3294                           ;mod.c: 160: return 1;
  3295  001AFE  0E01               	movlw	1
  3296                           
  3297                           ; BSR set to: 0
  3298                           
  3299                           ; BSR set to: 0
  3300  001B00  0012               	return	
  3301  001B02                     l3813:
  3302                           
  3303                           ; BSR set to: 0
  3304                           ;mod.c: 161: else
  3305                           ;mod.c: 162: return 0;
  3306  001B02  0E00               	movlw	0
  3307                           
  3308                           ; BSR set to: 0
  3309                           ;mod.c: 164: }
  3310                           
  3311                           ; BSR set to: 0
  3312  001B04  0012               	return	
  3313  001B06                     l3817:
  3314                           
  3315                           ; BSR set to: 0
  3316                           ;mod.c: 165: else
  3317                           ;mod.c: 166: {
  3318                           ;mod.c: 167: buffer[dataLength] = lowCRC;
  3319  001B06  501F               	movf	CRC16@dataLength,w,c
  3320  001B08  0D01               	mullw	1
  3321  001B0A  50F3               	movf	prodl,w,c
  3322  001B0C  241D               	addwf	CRC16@buffer,w,c
  3323  001B0E  6ED9               	movwf	fsr2l,c
  3324  001B10  50F4               	movf	prodh,w,c
  3325  001B12  201E               	addwfc	CRC16@buffer+1,w,c
  3326  001B14  6EDA               	movwf	fsr2h,c
  3327  001B16  C0D1  FFDF         	movff	CRC16@lowCRC,indf2
  3328                           
  3329                           ; BSR set to: 0
  3330                           ;mod.c: 168: buffer[dataLength+1] = highCRC;
  3331  001B1A  501F               	movf	CRC16@dataLength,w,c
  3332  001B1C  6E21               	movwf	??_CRC16& (0+255),c
  3333  001B1E  6A22               	clrf	(??_CRC16+1)& (0+255),c
  3334  001B20  0E01               	movlw	1
  3335  001B22  2621               	addwf	??_CRC16,f,c
  3336  001B24  0E00               	movlw	0
  3337  001B26  2222               	addwfc	??_CRC16+1,f,c
  3338  001B28  5021               	movf	??_CRC16,w,c
  3339  001B2A  241D               	addwf	CRC16@buffer,w,c
  3340  001B2C  6ED9               	movwf	fsr2l,c
  3341  001B2E  5022               	movf	??_CRC16+1,w,c
  3342  001B30  201E               	addwfc	CRC16@buffer+1,w,c
  3343  001B32  6EDA               	movwf	fsr2h,c
  3344  001B34  C0D2  FFDF         	movff	CRC16@highCRC,indf2
  3345                           
  3346                           ; BSR set to: 0
  3347                           ;mod.c: 169: return 1;
  3348  001B38  0E01               	movlw	1
  3349                           
  3350                           ; BSR set to: 0
  3351  001B3A  0012               	return	
  3352  001B3C                     __end_of_CRC16:
  3353                           	opt stack 0
  3354                           tblptru	equ	0xFF8
  3355                           prodh	equ	0xFF4
  3356                           prodl	equ	0xFF3
  3357                           intcon	equ	0xFF2
  3358                           postinc0	equ	0xFEE
  3359                           wreg	equ	0xFE8
  3360                           indf1	equ	0xFE7
  3361                           postinc1	equ	0xFE6
  3362                           postdec1	equ	0xFE5
  3363                           fsr1h	equ	0xFE2
  3364                           fsr1l	equ	0xFE1
  3365                           indf2	equ	0xFDF
  3366                           postinc2	equ	0xFDE
  3367                           postdec2	equ	0xFDD
  3368                           plusw2	equ	0xFDB
  3369                           fsr2h	equ	0xFDA
  3370                           fsr2l	equ	0xFD9
  3371                           status	equ	0xFD8
  3372                           
  3373 ;; *************** function _receive_check *****************
  3374 ;; Defined at:
  3375 ;;		line 248 in file "spi.c"
  3376 ;; Parameters:    Size  Location     Type
  3377 ;;		None
  3378 ;; Auto vars:     Size  Location     Type
  3379 ;;  return_val      1    0[BANK0 ] unsigned char 
  3380 ;; Return value:  Size  Location     Type
  3381 ;;                  1    wreg      unsigned char 
  3382 ;; Registers used:
  3383 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3384 ;; Tracked objects:
  3385 ;;		On entry : 0/0
  3386 ;;		On exit  : 0/0
  3387 ;;		Unchanged: 0/0
  3388 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3389 ;;      Params:         0       0       0       0       0       0       0
  3390 ;;      Locals:         0       1       0       0       0       0       0
  3391 ;;      Temps:          2       0       0       0       0       0       0
  3392 ;;      Totals:         2       1       0       0       0       0       0
  3393 ;;Total ram usage:        3 bytes
  3394 ;; Hardware stack levels used:    1
  3395 ;; Hardware stack levels required when called:    6
  3396 ;; This function calls:
  3397 ;;		_SPI
  3398 ;;		_spi_read
  3399 ;;		_spi_write
  3400 ;; This function is called by:
  3401 ;;		_main
  3402 ;; This function uses a non-reentrant model
  3403 ;;
  3404                           
  3405                           	psect	text14
  3406  001E68                     __ptext14:
  3407                           	opt stack 0
  3408  001E68                     _receive_check:
  3409                           	opt stack 24
  3410                           
  3411                           ;spi.c: 250: char return_val=0;
  3412                           
  3413                           ; BSR set to: 0
  3414                           ;incstack = 0
  3415  001E68  0E00               	movlw	0
  3416  001E6A  0100               	movlb	0	; () banked
  3417  001E6C  6FD1               	movwf	receive_check@return_val& (0+255),b
  3418                           
  3419                           ;spi.c: 251: spi_data[0]=0b00110000;
  3420  001E6E  0E30               	movlw	48
  3421  001E70  0100               	movlb	0	; () banked
  3422  001E72  6FAE               	movwf	_spi_data& (0+255),b
  3423                           
  3424                           ; BSR set to: 0
  3425                           ;spi.c: 252: spi_write(spi_data,0x07,1);
  3426  001E74  0EAE               	movlw	low _spi_data
  3427  001E76  6E1F               	movwf	spi_write@data,c
  3428  001E78  0E00               	movlw	high _spi_data
  3429  001E7A  6E20               	movwf	spi_write@data+1,c
  3430  001E7C  0E07               	movlw	7
  3431  001E7E  6E21               	movwf	spi_write@adr,c
  3432  001E80  0E01               	movlw	1
  3433  001E82  6E22               	movwf	spi_write@len,c
  3434  001E84  ECF2  F011         	call	_spi_write	;wreg free
  3435                           
  3436                           ;spi.c: 253: spi_read(&Registers[21],0x07,1);
  3437  001E88  0EF2               	movlw	low (_Registers+42)
  3438  001E8A  6E1F               	movwf	spi_read@data,c
  3439  001E8C  0E01               	movlw	high (_Registers+42)
  3440  001E8E  6E20               	movwf	spi_read@data+1,c
  3441  001E90  0E07               	movlw	7
  3442  001E92  6E21               	movwf	spi_read@adr,c
  3443  001E94  0E01               	movlw	1
  3444  001E96  6E22               	movwf	spi_read@len,c
  3445  001E98  EC69  F011         	call	_spi_read	;wreg free
  3446                           
  3447                           ;spi.c: 255: if(Registers[21] & 0b01000000)
  3448  001E9C  EE21  F0F2         	lfsr	2,_Registers+42
  3449  001EA0  CFDE F026          	movff	postinc2,??_receive_check
  3450  001EA4  CFDD F027          	movff	postdec2,??_receive_check+1
  3451  001EA8  AC26               	btfss	??_receive_check,6,c
  3452  001EAA  D027               	goto	l4465
  3453                           
  3454                           ;spi.c: 256: {
  3455                           ;spi.c: 257: spi_read(&Registers[25],0x61,32);
  3456  001EAC  0EFA               	movlw	low (_Registers+50)
  3457  001EAE  6E1F               	movwf	spi_read@data,c
  3458  001EB0  0E01               	movlw	high (_Registers+50)
  3459  001EB2  6E20               	movwf	spi_read@data+1,c
  3460  001EB4  0E61               	movlw	97
  3461  001EB6  6E21               	movwf	spi_read@adr,c
  3462  001EB8  0E20               	movlw	32
  3463  001EBA  6E22               	movwf	spi_read@len,c
  3464  001EBC  EC69  F011         	call	_spi_read	;wreg free
  3465                           
  3466                           ;spi.c: 258: spi_read(&Registers[22],0x61,5);
  3467  001EC0  0EF4               	movlw	low (_Registers+44)
  3468  001EC2  6E1F               	movwf	spi_read@data,c
  3469  001EC4  0E01               	movlw	high (_Registers+44)
  3470  001EC6  6E20               	movwf	spi_read@data+1,c
  3471  001EC8  0E61               	movlw	97
  3472  001ECA  6E21               	movwf	spi_read@adr,c
  3473  001ECC  0E05               	movlw	5
  3474  001ECE  6E22               	movwf	spi_read@len,c
  3475  001ED0  EC69  F011         	call	_spi_read	;wreg free
  3476                           
  3477                           ;spi.c: 259: SPI(0b11100010);
  3478  001ED4  0EE2               	movlw	226
  3479  001ED6  ECAA  F012         	call	_SPI
  3480                           
  3481                           ;spi.c: 261: spi_data[0]=0b01111110;
  3482  001EDA  0E7E               	movlw	126
  3483  001EDC  0100               	movlb	0	; () banked
  3484  001EDE  6FAE               	movwf	_spi_data& (0+255),b
  3485                           
  3486                           ; BSR set to: 0
  3487                           ;spi.c: 262: spi_write(spi_data,0x07,1);
  3488  001EE0  0EAE               	movlw	low _spi_data
  3489  001EE2  6E1F               	movwf	spi_write@data,c
  3490  001EE4  0E00               	movlw	high _spi_data
  3491  001EE6  6E20               	movwf	spi_write@data+1,c
  3492  001EE8  0E07               	movlw	7
  3493  001EEA  6E21               	movwf	spi_write@adr,c
  3494  001EEC  0E01               	movlw	1
  3495  001EEE  6E22               	movwf	spi_write@len,c
  3496  001EF0  ECF2  F011         	call	_spi_write	;wreg free
  3497                           
  3498                           ;spi.c: 263: return_val=1;
  3499  001EF4  0E01               	movlw	1
  3500  001EF6  0100               	movlb	0	; () banked
  3501  001EF8  6FD1               	movwf	receive_check@return_val& (0+255),b
  3502  001EFA                     l4465:
  3503                           
  3504                           ;spi.c: 265: }
  3505                           ;spi.c: 266: return return_val;
  3506  001EFA  0100               	movlb	0	; () banked
  3507  001EFC  51D1               	movf	receive_check@return_val& (0+255),w,b
  3508  001EFE  0012               	return	
  3509  001F00                     __end_of_receive_check:
  3510                           	opt stack 0
  3511                           tblptru	equ	0xFF8
  3512                           prodh	equ	0xFF4
  3513                           prodl	equ	0xFF3
  3514                           intcon	equ	0xFF2
  3515                           postinc0	equ	0xFEE
  3516                           wreg	equ	0xFE8
  3517                           indf1	equ	0xFE7
  3518                           postinc1	equ	0xFE6
  3519                           postdec1	equ	0xFE5
  3520                           fsr1h	equ	0xFE2
  3521                           fsr1l	equ	0xFE1
  3522                           indf2	equ	0xFDF
  3523                           postinc2	equ	0xFDE
  3524                           postdec2	equ	0xFDD
  3525                           plusw2	equ	0xFDB
  3526                           fsr2h	equ	0xFDA
  3527                           fsr2l	equ	0xFD9
  3528                           status	equ	0xFD8
  3529                           
  3530 ;; *************** function _spi_read *****************
  3531 ;; Defined at:
  3532 ;;		line 71 in file "spi.c"
  3533 ;; Parameters:    Size  Location     Type
  3534 ;;  data            2   30[COMRAM] PTR unsigned char 
  3535 ;;		 -> Registers(400), 
  3536 ;;  adr             1   32[COMRAM] unsigned char 
  3537 ;;  len             1   33[COMRAM] unsigned char 
  3538 ;; Auto vars:     Size  Location     Type
  3539 ;;  i               1   36[COMRAM] unsigned char 
  3540 ;; Return value:  Size  Location     Type
  3541 ;;                  1    wreg      void 
  3542 ;; Registers used:
  3543 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3544 ;; Tracked objects:
  3545 ;;		On entry : 0/0
  3546 ;;		On exit  : 0/0
  3547 ;;		Unchanged: 0/0
  3548 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3549 ;;      Params:         4       0       0       0       0       0       0
  3550 ;;      Locals:         1       0       0       0       0       0       0
  3551 ;;      Temps:          2       0       0       0       0       0       0
  3552 ;;      Totals:         7       0       0       0       0       0       0
  3553 ;;Total ram usage:        7 bytes
  3554 ;; Hardware stack levels used:    1
  3555 ;; Hardware stack levels required when called:    5
  3556 ;; This function calls:
  3557 ;;		_SPI
  3558 ;;		_spi_end_command
  3559 ;;		_spi_start_command
  3560 ;; This function is called by:
  3561 ;;		_receive_check
  3562 ;; This function uses a non-reentrant model
  3563 ;;
  3564                           
  3565                           	psect	text15
  3566  0022D2                     __ptext15:
  3567                           	opt stack 0
  3568  0022D2                     _spi_read:
  3569                           	opt stack 24
  3570                           
  3571                           ;spi.c: 72: unsigned char i=0;
  3572                           
  3573                           ; BSR set to: 0
  3574                           ;incstack = 0
  3575  0022D2  0E00               	movlw	0
  3576  0022D4  6E25               	movwf	spi_read@i,c
  3577                           
  3578                           ;spi.c: 73: spi_start_command();
  3579  0022D6  EC46  F013         	call	_spi_start_command	;wreg free
  3580                           
  3581                           ;spi.c: 74: Registers[21]=SPI(adr);
  3582  0022DA  5021               	movf	spi_read@adr,w,c
  3583  0022DC  ECAA  F012         	call	_SPI
  3584  0022E0  6E23               	movwf	??_spi_read& (0+255),c
  3585  0022E2  6A24               	clrf	(??_spi_read+1)& (0+255),c
  3586  0022E4  C023  F1F2         	movff	??_spi_read,_Registers+42
  3587  0022E8  C024  F1F3         	movff	??_spi_read+1,_Registers+43
  3588                           
  3589                           ;spi.c: 75: for(i=0;i<len;i++){
  3590  0022EC  0E00               	movlw	0
  3591  0022EE  6E25               	movwf	spi_read@i,c
  3592  0022F0  D00D               	goto	l3973
  3593  0022F2                     l3969:
  3594                           
  3595                           ;spi.c: 76: data[i]=SPI(0xFF);
  3596  0022F2  5025               	movf	spi_read@i,w,c
  3597  0022F4  0D01               	mullw	1
  3598  0022F6  50F3               	movf	prodl,w,c
  3599  0022F8  241F               	addwf	spi_read@data,w,c
  3600  0022FA  6ED9               	movwf	fsr2l,c
  3601  0022FC  50F4               	movf	prodh,w,c
  3602  0022FE  2020               	addwfc	spi_read@data+1,w,c
  3603  002300  6EDA               	movwf	fsr2h,c
  3604  002302  0EFF               	movlw	255
  3605  002304  ECAA  F012         	call	_SPI
  3606  002308  6EDF               	movwf	indf2,c
  3607  00230A  2A25               	incf	spi_read@i,f,c
  3608  00230C                     l3973:
  3609  00230C  5022               	movf	spi_read@len,w,c
  3610  00230E  5C25               	subwf	spi_read@i,w,c
  3611  002310  A0D8               	btfss	status,0,c
  3612  002312  D7EF               	goto	l3969
  3613                           
  3614                           ;spi.c: 77: }
  3615                           ;spi.c: 78: spi_end_command();
  3616  002314  EC5B  F013         	call	_spi_end_command	;wreg free
  3617  002318  0012               	return		;funcret
  3618  00231A                     __end_of_spi_read:
  3619                           	opt stack 0
  3620                           tblptru	equ	0xFF8
  3621                           prodh	equ	0xFF4
  3622                           prodl	equ	0xFF3
  3623                           intcon	equ	0xFF2
  3624                           postinc0	equ	0xFEE
  3625                           wreg	equ	0xFE8
  3626                           indf1	equ	0xFE7
  3627                           postinc1	equ	0xFE6
  3628                           postdec1	equ	0xFE5
  3629                           fsr1h	equ	0xFE2
  3630                           fsr1l	equ	0xFE1
  3631                           indf2	equ	0xFDF
  3632                           postinc2	equ	0xFDE
  3633                           postdec2	equ	0xFDD
  3634                           plusw2	equ	0xFDB
  3635                           fsr2h	equ	0xFDA
  3636                           fsr2l	equ	0xFD9
  3637                           status	equ	0xFD8
  3638                           
  3639 ;; *************** function _read_all_adc *****************
  3640 ;; Defined at:
  3641 ;;		line 61 in file "adc_lib.c"
  3642 ;; Parameters:    Size  Location     Type
  3643 ;;		None
  3644 ;; Auto vars:     Size  Location     Type
  3645 ;;  ort             4    6[BANK0 ] long 
  3646 ;;  ort_i           2   14[BANK0 ] unsigned int 
  3647 ;;  tmp             2   10[BANK0 ] unsigned char [2]
  3648 ;;  point           2   12[BANK0 ] PTR unsigned int 
  3649 ;;		 -> read_all_adc@tmp(2), 
  3650 ;; Return value:  Size  Location     Type
  3651 ;;                  1    wreg      void 
  3652 ;; Registers used:
  3653 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3654 ;; Tracked objects:
  3655 ;;		On entry : 0/0
  3656 ;;		On exit  : 0/0
  3657 ;;		Unchanged: 0/0
  3658 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3659 ;;      Params:         0       0       0       0       0       0       0
  3660 ;;      Locals:         0      10       0       0       0       0       0
  3661 ;;      Temps:          2       0       0       0       0       0       0
  3662 ;;      Totals:         2      10       0       0       0       0       0
  3663 ;;Total ram usage:       12 bytes
  3664 ;; Hardware stack levels used:    1
  3665 ;; Hardware stack levels required when called:    4
  3666 ;; This function calls:
  3667 ;;		___aldiv
  3668 ;; This function is called by:
  3669 ;;		_main
  3670 ;; This function uses a non-reentrant model
  3671 ;;
  3672                           
  3673                           	psect	text16
  3674  00119A                     __ptext16:
  3675                           	opt stack 0
  3676  00119A                     _read_all_adc:
  3677                           	opt stack 26
  3678                           
  3679                           ;adc_lib.c: 63: unsigned int * point;
  3680                           ;adc_lib.c: 64: unsigned char tmp[2];
  3681                           ;adc_lib.c: 65: unsigned int ort_i=0;
  3682                           
  3683                           ;incstack = 0
  3684  00119A  0E00               	movlw	0
  3685  00119C  0100               	movlb	0	; () banked
  3686  00119E  6FE0               	movwf	(read_all_adc@ort_i+1)& (0+255),b
  3687  0011A0  0E00               	movlw	0
  3688  0011A2  6FDF               	movwf	read_all_adc@ort_i& (0+255),b
  3689                           
  3690                           ;adc_lib.c: 66: long ort=0;
  3691  0011A4  0E00               	movlw	0
  3692  0011A6  0100               	movlb	0	; () banked
  3693  0011A8  6FD7               	movwf	read_all_adc@ort& (0+255),b
  3694  0011AA  0E00               	movlw	0
  3695  0011AC  6FD8               	movwf	(read_all_adc@ort+1)& (0+255),b
  3696  0011AE  0E00               	movlw	0
  3697  0011B0  6FD9               	movwf	(read_all_adc@ort+2)& (0+255),b
  3698  0011B2  0E00               	movlw	0
  3699  0011B4  6FDA               	movwf	(read_all_adc@ort+3)& (0+255),b
  3700                           
  3701                           ; BSR set to: 0
  3702                           ;adc_lib.c: 68: point=tmp;
  3703  0011B6  0EDB               	movlw	low read_all_adc@tmp
  3704  0011B8  0100               	movlb	0	; () banked
  3705  0011BA  6FDD               	movwf	read_all_adc@point& (0+255),b
  3706  0011BC  0E00               	movlw	high read_all_adc@tmp
  3707  0011BE  0100               	movlb	0	; () banked
  3708  0011C0  6FDE               	movwf	(read_all_adc@point+1)& (0+255),b
  3709                           
  3710                           ; BSR set to: 0
  3711                           ;adc_lib.c: 69: GIE=1;
  3712  0011C2  8EF2               	bsf	intcon,7,c	;volatile
  3713                           
  3714                           ; BSR set to: 0
  3715                           ;adc_lib.c: 70: ort=0;
  3716  0011C4  0E00               	movlw	0
  3717  0011C6  0100               	movlb	0	; () banked
  3718  0011C8  6FD7               	movwf	read_all_adc@ort& (0+255),b
  3719  0011CA  0E00               	movlw	0
  3720  0011CC  6FD8               	movwf	(read_all_adc@ort+1)& (0+255),b
  3721  0011CE  0E00               	movlw	0
  3722  0011D0  6FD9               	movwf	(read_all_adc@ort+2)& (0+255),b
  3723  0011D2  0E00               	movlw	0
  3724  0011D4  6FDA               	movwf	(read_all_adc@ort+3)& (0+255),b
  3725                           
  3726                           ; BSR set to: 0
  3727                           ;adc_lib.c: 71: for(ort_i=0;ort_i<5;ort_i++){
  3728  0011D6  0E00               	movlw	0
  3729  0011D8  0100               	movlb	0	; () banked
  3730  0011DA  6FE0               	movwf	(read_all_adc@ort_i+1)& (0+255),b
  3731  0011DC  0E00               	movlw	0
  3732  0011DE  6FDF               	movwf	read_all_adc@ort_i& (0+255),b
  3733  0011E0                     l4233:
  3734                           
  3735                           ; BSR set to: 0
  3736  0011E0  0100               	movlb	0	; () banked
  3737  0011E2  51E0               	movf	(read_all_adc@ort_i+1)& (0+255),w,b
  3738  0011E4  E125               	bnz	l4245
  3739  0011E6  0E05               	movlw	5
  3740  0011E8  0100               	movlb	0	; () banked
  3741  0011EA  5DDF               	subwf	read_all_adc@ort_i& (0+255),w,b
  3742  0011EC  B0D8               	btfsc	status,0,c
  3743  0011EE  D020               	goto	l4245
  3744                           
  3745                           ; BSR set to: 0
  3746                           ;adc_lib.c: 72: ADCON0=0b01010011;
  3747                           
  3748                           ; BSR set to: 0
  3749                           
  3750                           ; BSR set to: 0
  3751  0011F0  0E53               	movlw	83
  3752  0011F2  6EC2               	movwf	4034,c	;volatile
  3753  0011F4                     l317:
  3754  0011F4  B2C2               	btfsc	4034,1,c	;volatile
  3755  0011F6  D7FE               	goto	l317
  3756                           
  3757                           ;adc_lib.c: 74: tmp[1]=ADRESH;
  3758  0011F8  CFC4 F0DC          	movff	4036,read_all_adc@tmp+1	;volatile
  3759                           
  3760                           ;adc_lib.c: 75: tmp[0]=ADRESL;
  3761  0011FC  CFC3 F0DB          	movff	4035,read_all_adc@tmp	;volatile
  3762                           
  3763                           ;adc_lib.c: 76: ort+=*point;
  3764  001200  C0DD  FFD9         	movff	read_all_adc@point,fsr2l
  3765  001204  C0DE  FFDA         	movff	read_all_adc@point+1,fsr2h
  3766  001208  CFDE F025          	movff	postinc2,??_read_all_adc
  3767  00120C  CFDD F026          	movff	postdec2,??_read_all_adc+1
  3768  001210  5025               	movf	??_read_all_adc,w,c
  3769  001212  0100               	movlb	0	; () banked
  3770  001214  27D7               	addwf	read_all_adc@ort& (0+255),f,b
  3771  001216  5026               	movf	??_read_all_adc+1,w,c
  3772  001218  0100               	movlb	0	; () banked
  3773  00121A  23D8               	addwfc	(read_all_adc@ort+1)& (0+255),f,b
  3774  00121C  0E00               	movlw	0
  3775  00121E  0100               	movlb	0	; () banked
  3776  001220  23D9               	addwfc	(read_all_adc@ort+2)& (0+255),f,b
  3777  001222  0E00               	movlw	0
  3778  001224  0100               	movlb	0	; () banked
  3779  001226  23DA               	addwfc	(read_all_adc@ort+3)& (0+255),f,b
  3780                           
  3781                           ; BSR set to: 0
  3782  001228  0100               	movlb	0	; () banked
  3783  00122A  4BDF               	infsnz	read_all_adc@ort_i& (0+255),f,b
  3784  00122C  2BE0               	incf	(read_all_adc@ort_i+1)& (0+255),f,b
  3785  00122E  D7D8               	goto	l4233
  3786  001230                     l4245:
  3787                           
  3788                           ; BSR set to: 0
  3789                           ;adc_lib.c: 77: }
  3790                           ;adc_lib.c: 78: adc[20]=ort/5;
  3791  001230  C0D7  F01D         	movff	read_all_adc@ort,___aldiv@dividend
  3792  001234  C0D8  F01E         	movff	read_all_adc@ort+1,___aldiv@dividend+1
  3793  001238  C0D9  F01F         	movff	read_all_adc@ort+2,___aldiv@dividend+2
  3794  00123C  C0DA  F020         	movff	read_all_adc@ort+3,___aldiv@dividend+3
  3795  001240  0E05               	movlw	5
  3796  001242  6E21               	movwf	___aldiv@divisor,c
  3797  001244  0E00               	movlw	0
  3798  001246  6E22               	movwf	___aldiv@divisor+1,c
  3799  001248  0E00               	movlw	0
  3800  00124A  6E23               	movwf	___aldiv@divisor+2,c
  3801  00124C  0E00               	movlw	0
  3802  00124E  6E24               	movwf	___aldiv@divisor+3,c
  3803  001250  EC15  F00E         	call	___aldiv	;wreg free
  3804  001254  C01D  F088         	movff	?___aldiv,_adc+40
  3805  001258  C01E  F089         	movff	?___aldiv+1,_adc+41
  3806                           
  3807                           ;adc_lib.c: 80: ort=0;
  3808  00125C  0E00               	movlw	0
  3809  00125E  0100               	movlb	0	; () banked
  3810  001260  6FD7               	movwf	read_all_adc@ort& (0+255),b
  3811  001262  0E00               	movlw	0
  3812  001264  6FD8               	movwf	(read_all_adc@ort+1)& (0+255),b
  3813  001266  0E00               	movlw	0
  3814  001268  6FD9               	movwf	(read_all_adc@ort+2)& (0+255),b
  3815  00126A  0E00               	movlw	0
  3816  00126C  6FDA               	movwf	(read_all_adc@ort+3)& (0+255),b
  3817                           
  3818                           ; BSR set to: 0
  3819                           ;adc_lib.c: 81: for(ort_i=0;ort_i<5;ort_i++){
  3820  00126E  0E00               	movlw	0
  3821  001270  0100               	movlb	0	; () banked
  3822  001272  6FE0               	movwf	(read_all_adc@ort_i+1)& (0+255),b
  3823  001274  0E00               	movlw	0
  3824  001276  6FDF               	movwf	read_all_adc@ort_i& (0+255),b
  3825  001278                     l4251:
  3826                           
  3827                           ; BSR set to: 0
  3828  001278  0100               	movlb	0	; () banked
  3829  00127A  51E0               	movf	(read_all_adc@ort_i+1)& (0+255),w,b
  3830  00127C  E125               	bnz	l4263
  3831  00127E  0E05               	movlw	5
  3832  001280  0100               	movlb	0	; () banked
  3833  001282  5DDF               	subwf	read_all_adc@ort_i& (0+255),w,b
  3834  001284  B0D8               	btfsc	status,0,c
  3835  001286  D020               	goto	l4263
  3836                           
  3837                           ; BSR set to: 0
  3838                           ;adc_lib.c: 82: ADCON0=0b01010111;
  3839                           
  3840                           ; BSR set to: 0
  3841                           
  3842                           ; BSR set to: 0
  3843  001288  0E57               	movlw	87
  3844  00128A  6EC2               	movwf	4034,c	;volatile
  3845  00128C                     l322:
  3846  00128C  B2C2               	btfsc	4034,1,c	;volatile
  3847  00128E  D7FE               	goto	l322
  3848                           
  3849                           ;adc_lib.c: 84: tmp[1]=ADRESH;
  3850  001290  CFC4 F0DC          	movff	4036,read_all_adc@tmp+1	;volatile
  3851                           
  3852                           ;adc_lib.c: 85: tmp[0]=ADRESL;
  3853  001294  CFC3 F0DB          	movff	4035,read_all_adc@tmp	;volatile
  3854                           
  3855                           ;adc_lib.c: 86: ort+=*point;
  3856  001298  C0DD  FFD9         	movff	read_all_adc@point,fsr2l
  3857  00129C  C0DE  FFDA         	movff	read_all_adc@point+1,fsr2h
  3858  0012A0  CFDE F025          	movff	postinc2,??_read_all_adc
  3859  0012A4  CFDD F026          	movff	postdec2,??_read_all_adc+1
  3860  0012A8  5025               	movf	??_read_all_adc,w,c
  3861  0012AA  0100               	movlb	0	; () banked
  3862  0012AC  27D7               	addwf	read_all_adc@ort& (0+255),f,b
  3863  0012AE  5026               	movf	??_read_all_adc+1,w,c
  3864  0012B0  0100               	movlb	0	; () banked
  3865  0012B2  23D8               	addwfc	(read_all_adc@ort+1)& (0+255),f,b
  3866  0012B4  0E00               	movlw	0
  3867  0012B6  0100               	movlb	0	; () banked
  3868  0012B8  23D9               	addwfc	(read_all_adc@ort+2)& (0+255),f,b
  3869  0012BA  0E00               	movlw	0
  3870  0012BC  0100               	movlb	0	; () banked
  3871  0012BE  23DA               	addwfc	(read_all_adc@ort+3)& (0+255),f,b
  3872                           
  3873                           ; BSR set to: 0
  3874  0012C0  0100               	movlb	0	; () banked
  3875  0012C2  4BDF               	infsnz	read_all_adc@ort_i& (0+255),f,b
  3876  0012C4  2BE0               	incf	(read_all_adc@ort_i+1)& (0+255),f,b
  3877  0012C6  D7D8               	goto	l4251
  3878  0012C8                     l4263:
  3879                           
  3880                           ; BSR set to: 0
  3881                           ;adc_lib.c: 87: }
  3882                           ;adc_lib.c: 88: adc[21]=*point;
  3883  0012C8  C0DD  FFD9         	movff	read_all_adc@point,fsr2l
  3884  0012CC  C0DE  FFDA         	movff	read_all_adc@point+1,fsr2h
  3885  0012D0  CFDE F08A          	movff	postinc2,_adc+42
  3886  0012D4  CFDD F08B          	movff	postdec2,_adc+43
  3887                           
  3888                           ; BSR set to: 0
  3889                           ;adc_lib.c: 90: ort=0;
  3890  0012D8  0E00               	movlw	0
  3891  0012DA  0100               	movlb	0	; () banked
  3892  0012DC  6FD7               	movwf	read_all_adc@ort& (0+255),b
  3893  0012DE  0E00               	movlw	0
  3894  0012E0  6FD8               	movwf	(read_all_adc@ort+1)& (0+255),b
  3895  0012E2  0E00               	movlw	0
  3896  0012E4  6FD9               	movwf	(read_all_adc@ort+2)& (0+255),b
  3897  0012E6  0E00               	movlw	0
  3898  0012E8  6FDA               	movwf	(read_all_adc@ort+3)& (0+255),b
  3899                           
  3900                           ; BSR set to: 0
  3901                           ;adc_lib.c: 91: for(ort_i=0;ort_i<5;ort_i++){
  3902  0012EA  0E00               	movlw	0
  3903  0012EC  0100               	movlb	0	; () banked
  3904  0012EE  6FE0               	movwf	(read_all_adc@ort_i+1)& (0+255),b
  3905  0012F0  0E00               	movlw	0
  3906  0012F2  6FDF               	movwf	read_all_adc@ort_i& (0+255),b
  3907  0012F4                     l4269:
  3908                           
  3909                           ; BSR set to: 0
  3910  0012F4  0100               	movlb	0	; () banked
  3911  0012F6  51E0               	movf	(read_all_adc@ort_i+1)& (0+255),w,b
  3912  0012F8  E125               	bnz	l4281
  3913  0012FA  0E05               	movlw	5
  3914  0012FC  0100               	movlb	0	; () banked
  3915  0012FE  5DDF               	subwf	read_all_adc@ort_i& (0+255),w,b
  3916  001300  B0D8               	btfsc	status,0,c
  3917  001302  D020               	goto	l4281
  3918                           
  3919                           ; BSR set to: 0
  3920                           ;adc_lib.c: 92: ADCON0=0b01011011;
  3921                           
  3922                           ; BSR set to: 0
  3923                           
  3924                           ; BSR set to: 0
  3925  001304  0E5B               	movlw	91
  3926  001306  6EC2               	movwf	4034,c	;volatile
  3927  001308                     l327:
  3928  001308  B2C2               	btfsc	4034,1,c	;volatile
  3929  00130A  D7FE               	goto	l327
  3930                           
  3931                           ;adc_lib.c: 94: tmp[1]=ADRESH;
  3932  00130C  CFC4 F0DC          	movff	4036,read_all_adc@tmp+1	;volatile
  3933                           
  3934                           ;adc_lib.c: 95: tmp[0]=ADRESL;
  3935  001310  CFC3 F0DB          	movff	4035,read_all_adc@tmp	;volatile
  3936                           
  3937                           ;adc_lib.c: 96: ort+=*point;
  3938  001314  C0DD  FFD9         	movff	read_all_adc@point,fsr2l
  3939  001318  C0DE  FFDA         	movff	read_all_adc@point+1,fsr2h
  3940  00131C  CFDE F025          	movff	postinc2,??_read_all_adc
  3941  001320  CFDD F026          	movff	postdec2,??_read_all_adc+1
  3942  001324  5025               	movf	??_read_all_adc,w,c
  3943  001326  0100               	movlb	0	; () banked
  3944  001328  27D7               	addwf	read_all_adc@ort& (0+255),f,b
  3945  00132A  5026               	movf	??_read_all_adc+1,w,c
  3946  00132C  0100               	movlb	0	; () banked
  3947  00132E  23D8               	addwfc	(read_all_adc@ort+1)& (0+255),f,b
  3948  001330  0E00               	movlw	0
  3949  001332  0100               	movlb	0	; () banked
  3950  001334  23D9               	addwfc	(read_all_adc@ort+2)& (0+255),f,b
  3951  001336  0E00               	movlw	0
  3952  001338  0100               	movlb	0	; () banked
  3953  00133A  23DA               	addwfc	(read_all_adc@ort+3)& (0+255),f,b
  3954                           
  3955                           ; BSR set to: 0
  3956  00133C  0100               	movlb	0	; () banked
  3957  00133E  4BDF               	infsnz	read_all_adc@ort_i& (0+255),f,b
  3958  001340  2BE0               	incf	(read_all_adc@ort_i+1)& (0+255),f,b
  3959  001342  D7D8               	goto	l4269
  3960  001344                     l4281:
  3961                           
  3962                           ; BSR set to: 0
  3963                           ;adc_lib.c: 97: }
  3964                           ;adc_lib.c: 98: adc[22]=*point;
  3965  001344  C0DD  FFD9         	movff	read_all_adc@point,fsr2l
  3966  001348  C0DE  FFDA         	movff	read_all_adc@point+1,fsr2h
  3967  00134C  CFDE F08C          	movff	postinc2,_adc+44
  3968  001350  CFDD F08D          	movff	postdec2,_adc+45
  3969                           
  3970                           ; BSR set to: 0
  3971                           ;adc_lib.c: 100: ort=0;
  3972  001354  0E00               	movlw	0
  3973  001356  0100               	movlb	0	; () banked
  3974  001358  6FD7               	movwf	read_all_adc@ort& (0+255),b
  3975  00135A  0E00               	movlw	0
  3976  00135C  6FD8               	movwf	(read_all_adc@ort+1)& (0+255),b
  3977  00135E  0E00               	movlw	0
  3978  001360  6FD9               	movwf	(read_all_adc@ort+2)& (0+255),b
  3979  001362  0E00               	movlw	0
  3980  001364  6FDA               	movwf	(read_all_adc@ort+3)& (0+255),b
  3981                           
  3982                           ; BSR set to: 0
  3983                           ;adc_lib.c: 101: for(ort_i=0;ort_i<5;ort_i++){
  3984  001366  0E00               	movlw	0
  3985  001368  0100               	movlb	0	; () banked
  3986  00136A  6FE0               	movwf	(read_all_adc@ort_i+1)& (0+255),b
  3987  00136C  0E00               	movlw	0
  3988  00136E  6FDF               	movwf	read_all_adc@ort_i& (0+255),b
  3989  001370                     l4287:
  3990                           
  3991                           ; BSR set to: 0
  3992  001370  0100               	movlb	0	; () banked
  3993  001372  51E0               	movf	(read_all_adc@ort_i+1)& (0+255),w,b
  3994  001374  E125               	bnz	l4299
  3995  001376  0E05               	movlw	5
  3996  001378  0100               	movlb	0	; () banked
  3997  00137A  5DDF               	subwf	read_all_adc@ort_i& (0+255),w,b
  3998  00137C  B0D8               	btfsc	status,0,c
  3999  00137E  D020               	goto	l4299
  4000                           
  4001                           ; BSR set to: 0
  4002                           ;adc_lib.c: 102: ADCON0=0b01011111;
  4003                           
  4004                           ; BSR set to: 0
  4005                           
  4006                           ; BSR set to: 0
  4007  001380  0E5F               	movlw	95
  4008  001382  6EC2               	movwf	4034,c	;volatile
  4009  001384                     l332:
  4010  001384  B2C2               	btfsc	4034,1,c	;volatile
  4011  001386  D7FE               	goto	l332
  4012                           
  4013                           ;adc_lib.c: 104: tmp[1]=ADRESH;
  4014  001388  CFC4 F0DC          	movff	4036,read_all_adc@tmp+1	;volatile
  4015                           
  4016                           ;adc_lib.c: 105: tmp[0]=ADRESL;
  4017  00138C  CFC3 F0DB          	movff	4035,read_all_adc@tmp	;volatile
  4018                           
  4019                           ;adc_lib.c: 106: ort+=*point;
  4020  001390  C0DD  FFD9         	movff	read_all_adc@point,fsr2l
  4021  001394  C0DE  FFDA         	movff	read_all_adc@point+1,fsr2h
  4022  001398  CFDE F025          	movff	postinc2,??_read_all_adc
  4023  00139C  CFDD F026          	movff	postdec2,??_read_all_adc+1
  4024  0013A0  5025               	movf	??_read_all_adc,w,c
  4025  0013A2  0100               	movlb	0	; () banked
  4026  0013A4  27D7               	addwf	read_all_adc@ort& (0+255),f,b
  4027  0013A6  5026               	movf	??_read_all_adc+1,w,c
  4028  0013A8  0100               	movlb	0	; () banked
  4029  0013AA  23D8               	addwfc	(read_all_adc@ort+1)& (0+255),f,b
  4030  0013AC  0E00               	movlw	0
  4031  0013AE  0100               	movlb	0	; () banked
  4032  0013B0  23D9               	addwfc	(read_all_adc@ort+2)& (0+255),f,b
  4033  0013B2  0E00               	movlw	0
  4034  0013B4  0100               	movlb	0	; () banked
  4035  0013B6  23DA               	addwfc	(read_all_adc@ort+3)& (0+255),f,b
  4036                           
  4037                           ; BSR set to: 0
  4038  0013B8  0100               	movlb	0	; () banked
  4039  0013BA  4BDF               	infsnz	read_all_adc@ort_i& (0+255),f,b
  4040  0013BC  2BE0               	incf	(read_all_adc@ort_i+1)& (0+255),f,b
  4041  0013BE  D7D8               	goto	l4287
  4042  0013C0                     l4299:
  4043                           
  4044                           ; BSR set to: 0
  4045                           ;adc_lib.c: 107: }
  4046                           ;adc_lib.c: 108: adc[23]=*point;
  4047  0013C0  C0DD  FFD9         	movff	read_all_adc@point,fsr2l
  4048  0013C4  C0DE  FFDA         	movff	read_all_adc@point+1,fsr2h
  4049  0013C8  CFDE F08E          	movff	postinc2,_adc+46
  4050  0013CC  CFDD F08F          	movff	postdec2,_adc+47
  4051                           
  4052                           ; BSR set to: 0
  4053                           ;adc_lib.c: 109: GIE=1;
  4054  0013D0  8EF2               	bsf	intcon,7,c	;volatile
  4055                           
  4056                           ; BSR set to: 0
  4057  0013D2  0012               	return		;funcret
  4058  0013D4                     __end_of_read_all_adc:
  4059                           	opt stack 0
  4060                           tblptru	equ	0xFF8
  4061                           prodh	equ	0xFF4
  4062                           prodl	equ	0xFF3
  4063                           intcon	equ	0xFF2
  4064                           postinc0	equ	0xFEE
  4065                           wreg	equ	0xFE8
  4066                           indf1	equ	0xFE7
  4067                           postinc1	equ	0xFE6
  4068                           postdec1	equ	0xFE5
  4069                           fsr1h	equ	0xFE2
  4070                           fsr1l	equ	0xFE1
  4071                           indf2	equ	0xFDF
  4072                           postinc2	equ	0xFDE
  4073                           postdec2	equ	0xFDD
  4074                           plusw2	equ	0xFDB
  4075                           fsr2h	equ	0xFDA
  4076                           fsr2l	equ	0xFD9
  4077                           status	equ	0xFD8
  4078                           
  4079 ;; *************** function _pic_init *****************
  4080 ;; Defined at:
  4081 ;;		line 86 in file "pic_init.c"
  4082 ;; Parameters:    Size  Location     Type
  4083 ;;		None
  4084 ;; Auto vars:     Size  Location     Type
  4085 ;;		None
  4086 ;; Return value:  Size  Location     Type
  4087 ;;                  1    wreg      void 
  4088 ;; Registers used:
  4089 ;;		wreg, status,2, cstack
  4090 ;; Tracked objects:
  4091 ;;		On entry : 0/0
  4092 ;;		On exit  : 0/0
  4093 ;;		Unchanged: 0/0
  4094 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4095 ;;      Params:         0       0       0       0       0       0       0
  4096 ;;      Locals:         0       0       0       0       0       0       0
  4097 ;;      Temps:          0       0       0       0       0       0       0
  4098 ;;      Totals:         0       0       0       0       0       0       0
  4099 ;;Total ram usage:        0 bytes
  4100 ;; Hardware stack levels used:    1
  4101 ;; Hardware stack levels required when called:    4
  4102 ;; This function calls:
  4103 ;;		_adc_dis
  4104 ;;		_cpp_dis
  4105 ;;		_interrupt_dis
  4106 ;;		_mssp_dis
  4107 ;;		_osc_int
  4108 ;;		_port_clear
  4109 ;;		_timers_dis
  4110 ;;		_tris_clear
  4111 ;; This function is called by:
  4112 ;;		_main
  4113 ;; This function uses a non-reentrant model
  4114 ;;
  4115                           
  4116                           	psect	text17
  4117  002578                     __ptext17:
  4118                           	opt stack 0
  4119  002578                     _pic_init:
  4120                           	opt stack 26
  4121                           
  4122                           ;pic_init.c: 87: osc_int();
  4123                           
  4124                           ; BSR set to: 0
  4125                           ;incstack = 0
  4126  002578  EC39  F013         	call	_osc_int	;wreg free
  4127                           
  4128                           ;pic_init.c: 88: tris_clear();
  4129  00257C  EC32  F013         	call	_tris_clear	;wreg free
  4130                           
  4131                           ;pic_init.c: 89: port_clear();
  4132  002580  ECF7  F012         	call	_port_clear	;wreg free
  4133                           
  4134                           ;pic_init.c: 90: adc_dis();
  4135  002584  EC44  F012         	call	_adc_dis	;wreg free
  4136                           
  4137                           ;pic_init.c: 91: timers_dis();
  4138  002588  EC02  F013         	call	_timers_dis	;wreg free
  4139                           
  4140                           ;pic_init.c: 92: interrupt_dis();
  4141  00258C  EC97  F012         	call	_interrupt_dis	;wreg free
  4142                           
  4143                           ;pic_init.c: 93: cpp_dis();
  4144  002590  ECDE  F012         	call	_cpp_dis	;wreg free
  4145                           
  4146                           ;pic_init.c: 94: mssp_dis();
  4147  002594  ECCD  F012         	call	_mssp_dis	;wreg free
  4148  002598  0012               	return		;funcret
  4149  00259A                     __end_of_pic_init:
  4150                           	opt stack 0
  4151                           tblptru	equ	0xFF8
  4152                           prodh	equ	0xFF4
  4153                           prodl	equ	0xFF3
  4154                           intcon	equ	0xFF2
  4155                           postinc0	equ	0xFEE
  4156                           wreg	equ	0xFE8
  4157                           indf1	equ	0xFE7
  4158                           postinc1	equ	0xFE6
  4159                           postdec1	equ	0xFE5
  4160                           fsr1h	equ	0xFE2
  4161                           fsr1l	equ	0xFE1
  4162                           indf2	equ	0xFDF
  4163                           postinc2	equ	0xFDE
  4164                           postdec2	equ	0xFDD
  4165                           plusw2	equ	0xFDB
  4166                           fsr2h	equ	0xFDA
  4167                           fsr2l	equ	0xFD9
  4168                           status	equ	0xFD8
  4169                           
  4170 ;; *************** function _tris_clear *****************
  4171 ;; Defined at:
  4172 ;;		line 3 in file "pic_init.c"
  4173 ;; Parameters:    Size  Location     Type
  4174 ;;		None
  4175 ;; Auto vars:     Size  Location     Type
  4176 ;;		None
  4177 ;; Return value:  Size  Location     Type
  4178 ;;                  1    wreg      void 
  4179 ;; Registers used:
  4180 ;;		wreg, status,2
  4181 ;; Tracked objects:
  4182 ;;		On entry : 0/0
  4183 ;;		On exit  : 0/0
  4184 ;;		Unchanged: 0/0
  4185 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4186 ;;      Params:         0       0       0       0       0       0       0
  4187 ;;      Locals:         0       0       0       0       0       0       0
  4188 ;;      Temps:          0       0       0       0       0       0       0
  4189 ;;      Totals:         0       0       0       0       0       0       0
  4190 ;;Total ram usage:        0 bytes
  4191 ;; Hardware stack levels used:    1
  4192 ;; Hardware stack levels required when called:    3
  4193 ;; This function calls:
  4194 ;;		Nothing
  4195 ;; This function is called by:
  4196 ;;		_pic_init
  4197 ;; This function uses a non-reentrant model
  4198 ;;
  4199                           
  4200                           	psect	text18
  4201  002664                     __ptext18:
  4202                           	opt stack 0
  4203  002664                     _tris_clear:
  4204                           	opt stack 26
  4205                           
  4206                           ;pic_init.c: 4: TRISA=0b11111111;
  4207                           
  4208                           ;incstack = 0
  4209  002664  6892               	setf	3986,c	;volatile
  4210                           
  4211                           ;pic_init.c: 5: TRISB=0b11111111;
  4212  002666  6893               	setf	3987,c	;volatile
  4213                           
  4214                           ;pic_init.c: 6: TRISC=0b11111111;
  4215  002668  6894               	setf	3988,c	;volatile
  4216                           
  4217                           ;pic_init.c: 7: TRISD=0b11111111;
  4218  00266A  6895               	setf	3989,c	;volatile
  4219                           
  4220                           ;pic_init.c: 8: TRISE=0b00000111;
  4221  00266C  0E07               	movlw	7
  4222  00266E  6E96               	movwf	3990,c	;volatile
  4223  002670  0012               	return		;funcret
  4224  002672                     __end_of_tris_clear:
  4225                           	opt stack 0
  4226                           tblptru	equ	0xFF8
  4227                           prodh	equ	0xFF4
  4228                           prodl	equ	0xFF3
  4229                           intcon	equ	0xFF2
  4230                           postinc0	equ	0xFEE
  4231                           wreg	equ	0xFE8
  4232                           indf1	equ	0xFE7
  4233                           postinc1	equ	0xFE6
  4234                           postdec1	equ	0xFE5
  4235                           fsr1h	equ	0xFE2
  4236                           fsr1l	equ	0xFE1
  4237                           indf2	equ	0xFDF
  4238                           postinc2	equ	0xFDE
  4239                           postdec2	equ	0xFDD
  4240                           plusw2	equ	0xFDB
  4241                           fsr2h	equ	0xFDA
  4242                           fsr2l	equ	0xFD9
  4243                           status	equ	0xFD8
  4244                           
  4245 ;; *************** function _timers_dis *****************
  4246 ;; Defined at:
  4247 ;;		line 45 in file "pic_init.c"
  4248 ;; Parameters:    Size  Location     Type
  4249 ;;		None
  4250 ;; Auto vars:     Size  Location     Type
  4251 ;;		None
  4252 ;; Return value:  Size  Location     Type
  4253 ;;                  1    wreg      void 
  4254 ;; Registers used:
  4255 ;;		wreg, status,2
  4256 ;; Tracked objects:
  4257 ;;		On entry : 0/0
  4258 ;;		On exit  : 0/0
  4259 ;;		Unchanged: 0/0
  4260 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4261 ;;      Params:         0       0       0       0       0       0       0
  4262 ;;      Locals:         0       0       0       0       0       0       0
  4263 ;;      Temps:          0       0       0       0       0       0       0
  4264 ;;      Totals:         0       0       0       0       0       0       0
  4265 ;;Total ram usage:        0 bytes
  4266 ;; Hardware stack levels used:    1
  4267 ;; Hardware stack levels required when called:    3
  4268 ;; This function calls:
  4269 ;;		Nothing
  4270 ;; This function is called by:
  4271 ;;		_pic_init
  4272 ;; This function uses a non-reentrant model
  4273 ;;
  4274                           
  4275                           	psect	text19
  4276  002604                     __ptext19:
  4277                           	opt stack 0
  4278  002604                     _timers_dis:
  4279                           	opt stack 26
  4280                           
  4281                           ;pic_init.c: 46: T0CON=0;
  4282                           
  4283                           ;incstack = 0
  4284  002604  0E00               	movlw	0
  4285  002606  6ED5               	movwf	4053,c	;volatile
  4286                           
  4287                           ;pic_init.c: 47: T1CON=0;
  4288  002608  0E00               	movlw	0
  4289  00260A  6ECD               	movwf	4045,c	;volatile
  4290                           
  4291                           ;pic_init.c: 48: T2CON=0;
  4292  00260C  0E00               	movlw	0
  4293  00260E  6EBA               	movwf	4026,c	;volatile
  4294                           
  4295                           ;pic_init.c: 49: T3CON=0;
  4296  002610  0E00               	movlw	0
  4297  002612  6EB1               	movwf	4017,c	;volatile
  4298  002614  0012               	return		;funcret
  4299  002616                     __end_of_timers_dis:
  4300                           	opt stack 0
  4301                           tblptru	equ	0xFF8
  4302                           prodh	equ	0xFF4
  4303                           prodl	equ	0xFF3
  4304                           intcon	equ	0xFF2
  4305                           postinc0	equ	0xFEE
  4306                           wreg	equ	0xFE8
  4307                           indf1	equ	0xFE7
  4308                           postinc1	equ	0xFE6
  4309                           postdec1	equ	0xFE5
  4310                           fsr1h	equ	0xFE2
  4311                           fsr1l	equ	0xFE1
  4312                           indf2	equ	0xFDF
  4313                           postinc2	equ	0xFDE
  4314                           postdec2	equ	0xFDD
  4315                           plusw2	equ	0xFDB
  4316                           fsr2h	equ	0xFDA
  4317                           fsr2l	equ	0xFD9
  4318                           status	equ	0xFD8
  4319                           
  4320 ;; *************** function _port_clear *****************
  4321 ;; Defined at:
  4322 ;;		line 19 in file "pic_init.c"
  4323 ;; Parameters:    Size  Location     Type
  4324 ;;		None
  4325 ;; Auto vars:     Size  Location     Type
  4326 ;;		None
  4327 ;; Return value:  Size  Location     Type
  4328 ;;                  1    wreg      void 
  4329 ;; Registers used:
  4330 ;;		wreg, status,2
  4331 ;; Tracked objects:
  4332 ;;		On entry : 0/0
  4333 ;;		On exit  : 0/0
  4334 ;;		Unchanged: 0/0
  4335 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4336 ;;      Params:         0       0       0       0       0       0       0
  4337 ;;      Locals:         0       0       0       0       0       0       0
  4338 ;;      Temps:          0       0       0       0       0       0       0
  4339 ;;      Totals:         0       0       0       0       0       0       0
  4340 ;;Total ram usage:        0 bytes
  4341 ;; Hardware stack levels used:    1
  4342 ;; Hardware stack levels required when called:    3
  4343 ;; This function calls:
  4344 ;;		Nothing
  4345 ;; This function is called by:
  4346 ;;		_pic_init
  4347 ;; This function uses a non-reentrant model
  4348 ;;
  4349                           
  4350                           	psect	text20
  4351  0025EE                     __ptext20:
  4352                           	opt stack 0
  4353  0025EE                     _port_clear:
  4354                           	opt stack 26
  4355                           
  4356                           ;pic_init.c: 20: PORTA=0;
  4357                           
  4358                           ;incstack = 0
  4359  0025EE  0E00               	movlw	0
  4360  0025F0  6E80               	movwf	3968,c	;volatile
  4361                           
  4362                           ;pic_init.c: 21: PORTB=0;
  4363  0025F2  0E00               	movlw	0
  4364  0025F4  6E81               	movwf	3969,c	;volatile
  4365                           
  4366                           ;pic_init.c: 22: PORTC=0;
  4367  0025F6  0E00               	movlw	0
  4368  0025F8  6E82               	movwf	3970,c	;volatile
  4369                           
  4370                           ;pic_init.c: 23: PORTD=0;
  4371  0025FA  0E00               	movlw	0
  4372  0025FC  6E83               	movwf	3971,c	;volatile
  4373                           
  4374                           ;pic_init.c: 24: PORTE=0;
  4375  0025FE  0E00               	movlw	0
  4376  002600  6E84               	movwf	3972,c	;volatile
  4377  002602  0012               	return		;funcret
  4378  002604                     __end_of_port_clear:
  4379                           	opt stack 0
  4380                           tblptru	equ	0xFF8
  4381                           prodh	equ	0xFF4
  4382                           prodl	equ	0xFF3
  4383                           intcon	equ	0xFF2
  4384                           postinc0	equ	0xFEE
  4385                           wreg	equ	0xFE8
  4386                           indf1	equ	0xFE7
  4387                           postinc1	equ	0xFE6
  4388                           postdec1	equ	0xFE5
  4389                           fsr1h	equ	0xFE2
  4390                           fsr1l	equ	0xFE1
  4391                           indf2	equ	0xFDF
  4392                           postinc2	equ	0xFDE
  4393                           postdec2	equ	0xFDD
  4394                           plusw2	equ	0xFDB
  4395                           fsr2h	equ	0xFDA
  4396                           fsr2l	equ	0xFD9
  4397                           status	equ	0xFD8
  4398                           
  4399 ;; *************** function _osc_int *****************
  4400 ;; Defined at:
  4401 ;;		line 39 in file "pic_init.c"
  4402 ;; Parameters:    Size  Location     Type
  4403 ;;		None
  4404 ;; Auto vars:     Size  Location     Type
  4405 ;;		None
  4406 ;; Return value:  Size  Location     Type
  4407 ;;                  1    wreg      void 
  4408 ;; Registers used:
  4409 ;;		wreg, status,2
  4410 ;; Tracked objects:
  4411 ;;		On entry : 0/0
  4412 ;;		On exit  : 0/0
  4413 ;;		Unchanged: 0/0
  4414 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4415 ;;      Params:         0       0       0       0       0       0       0
  4416 ;;      Locals:         0       0       0       0       0       0       0
  4417 ;;      Temps:          0       0       0       0       0       0       0
  4418 ;;      Totals:         0       0       0       0       0       0       0
  4419 ;;Total ram usage:        0 bytes
  4420 ;; Hardware stack levels used:    1
  4421 ;; Hardware stack levels required when called:    3
  4422 ;; This function calls:
  4423 ;;		Nothing
  4424 ;; This function is called by:
  4425 ;;		_pic_init
  4426 ;; This function uses a non-reentrant model
  4427 ;;
  4428                           
  4429                           	psect	text21
  4430  002672                     __ptext21:
  4431                           	opt stack 0
  4432  002672                     _osc_int:
  4433                           	opt stack 26
  4434                           
  4435                           ;pic_init.c: 40: OSCCON=0b01110000;
  4436                           
  4437                           ;incstack = 0
  4438  002672  0E70               	movlw	112
  4439  002674  6ED3               	movwf	4051,c	;volatile
  4440                           
  4441                           ;pic_init.c: 41: OSCCON2=0b10000000;
  4442  002676  0E80               	movlw	128
  4443  002678  6ED2               	movwf	4050,c	;volatile
  4444                           
  4445                           ;pic_init.c: 42: OSCTUNE=0b01000000;
  4446  00267A  0E40               	movlw	64
  4447  00267C  6E9B               	movwf	3995,c	;volatile
  4448  00267E  0012               	return		;funcret
  4449  002680                     __end_of_osc_int:
  4450                           	opt stack 0
  4451                           tblptru	equ	0xFF8
  4452                           prodh	equ	0xFF4
  4453                           prodl	equ	0xFF3
  4454                           intcon	equ	0xFF2
  4455                           postinc0	equ	0xFEE
  4456                           wreg	equ	0xFE8
  4457                           indf1	equ	0xFE7
  4458                           postinc1	equ	0xFE6
  4459                           postdec1	equ	0xFE5
  4460                           fsr1h	equ	0xFE2
  4461                           fsr1l	equ	0xFE1
  4462                           indf2	equ	0xFDF
  4463                           postinc2	equ	0xFDE
  4464                           postdec2	equ	0xFDD
  4465                           plusw2	equ	0xFDB
  4466                           fsr2h	equ	0xFDA
  4467                           fsr2l	equ	0xFD9
  4468                           status	equ	0xFD8
  4469                           
  4470 ;; *************** function _mssp_dis *****************
  4471 ;; Defined at:
  4472 ;;		line 73 in file "pic_init.c"
  4473 ;; Parameters:    Size  Location     Type
  4474 ;;		None
  4475 ;; Auto vars:     Size  Location     Type
  4476 ;;		None
  4477 ;; Return value:  Size  Location     Type
  4478 ;;                  1    wreg      void 
  4479 ;; Registers used:
  4480 ;;		wreg, status,2
  4481 ;; Tracked objects:
  4482 ;;		On entry : 0/0
  4483 ;;		On exit  : 0/0
  4484 ;;		Unchanged: 0/0
  4485 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4486 ;;      Params:         0       0       0       0       0       0       0
  4487 ;;      Locals:         0       0       0       0       0       0       0
  4488 ;;      Temps:          0       0       0       0       0       0       0
  4489 ;;      Totals:         0       0       0       0       0       0       0
  4490 ;;Total ram usage:        0 bytes
  4491 ;; Hardware stack levels used:    1
  4492 ;; Hardware stack levels required when called:    3
  4493 ;; This function calls:
  4494 ;;		Nothing
  4495 ;; This function is called by:
  4496 ;;		_pic_init
  4497 ;; This function uses a non-reentrant model
  4498 ;;
  4499                           
  4500                           	psect	text22
  4501  00259A                     __ptext22:
  4502                           	opt stack 0
  4503  00259A                     _mssp_dis:
  4504                           	opt stack 26
  4505                           
  4506                           ;pic_init.c: 75: SSP1STAT=0;
  4507                           
  4508                           ;incstack = 0
  4509  00259A  0E00               	movlw	0
  4510  00259C  6EC7               	movwf	4039,c	;volatile
  4511                           
  4512                           ;pic_init.c: 76: SSP1CON1=0;
  4513  00259E  0E00               	movlw	0
  4514  0025A0  6EC6               	movwf	4038,c	;volatile
  4515                           
  4516                           ;pic_init.c: 77: SSP1CON2=0;
  4517  0025A2  0E00               	movlw	0
  4518  0025A4  6EC5               	movwf	4037,c	;volatile
  4519                           
  4520                           ;pic_init.c: 78: SSP1CON3=0;
  4521  0025A6  0E00               	movlw	0
  4522  0025A8  6ECB               	movwf	4043,c	;volatile
  4523                           
  4524                           ;pic_init.c: 79: SSP2STAT=0;
  4525  0025AA  0E00               	movlw	0
  4526  0025AC  6E6D               	movwf	3949,c	;volatile
  4527                           
  4528                           ;pic_init.c: 80: SSP2CON1=0;
  4529  0025AE  0E00               	movlw	0
  4530  0025B0  6E6C               	movwf	3948,c	;volatile
  4531                           
  4532                           ;pic_init.c: 81: SSP2CON2=0;
  4533  0025B2  0E00               	movlw	0
  4534  0025B4  6E6B               	movwf	3947,c	;volatile
  4535                           
  4536                           ;pic_init.c: 82: SSP2CON3=0;
  4537  0025B6  0E00               	movlw	0
  4538  0025B8  6E69               	movwf	3945,c	;volatile
  4539  0025BA  0012               	return		;funcret
  4540  0025BC                     __end_of_mssp_dis:
  4541                           	opt stack 0
  4542                           tblptru	equ	0xFF8
  4543                           prodh	equ	0xFF4
  4544                           prodl	equ	0xFF3
  4545                           intcon	equ	0xFF2
  4546                           postinc0	equ	0xFEE
  4547                           wreg	equ	0xFE8
  4548                           indf1	equ	0xFE7
  4549                           postinc1	equ	0xFE6
  4550                           postdec1	equ	0xFE5
  4551                           fsr1h	equ	0xFE2
  4552                           fsr1l	equ	0xFE1
  4553                           indf2	equ	0xFDF
  4554                           postinc2	equ	0xFDE
  4555                           postdec2	equ	0xFDD
  4556                           plusw2	equ	0xFDB
  4557                           fsr2h	equ	0xFDA
  4558                           fsr2l	equ	0xFD9
  4559                           status	equ	0xFD8
  4560                           
  4561 ;; *************** function _interrupt_dis *****************
  4562 ;; Defined at:
  4563 ;;		line 52 in file "pic_init.c"
  4564 ;; Parameters:    Size  Location     Type
  4565 ;;		None
  4566 ;; Auto vars:     Size  Location     Type
  4567 ;;		None
  4568 ;; Return value:  Size  Location     Type
  4569 ;;                  1    wreg      void 
  4570 ;; Registers used:
  4571 ;;		wreg, status,2
  4572 ;; Tracked objects:
  4573 ;;		On entry : 0/0
  4574 ;;		On exit  : 0/0
  4575 ;;		Unchanged: 0/0
  4576 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4577 ;;      Params:         0       0       0       0       0       0       0
  4578 ;;      Locals:         0       0       0       0       0       0       0
  4579 ;;      Temps:          0       0       0       0       0       0       0
  4580 ;;      Totals:         0       0       0       0       0       0       0
  4581 ;;Total ram usage:        0 bytes
  4582 ;; Hardware stack levels used:    1
  4583 ;; Hardware stack levels required when called:    3
  4584 ;; This function calls:
  4585 ;;		Nothing
  4586 ;; This function is called by:
  4587 ;;		_pic_init
  4588 ;; This function uses a non-reentrant model
  4589 ;;
  4590                           
  4591                           	psect	text23
  4592  00252E                     __ptext23:
  4593                           	opt stack 0
  4594  00252E                     _interrupt_dis:
  4595                           	opt stack 26
  4596                           
  4597                           ;pic_init.c: 54: INTCON =0;
  4598                           
  4599                           ;incstack = 0
  4600  00252E  0E00               	movlw	0
  4601  002530  6EF2               	movwf	intcon,c	;volatile
  4602                           
  4603                           ;pic_init.c: 55: INTCON2=0b10000000;
  4604  002532  0E80               	movlw	128
  4605  002534  6EF1               	movwf	intcon2,c	;volatile
  4606                           
  4607                           ;pic_init.c: 56: INTCON3=0;
  4608  002536  0E00               	movlw	0
  4609  002538  6EF0               	movwf	intcon3,c	;volatile
  4610                           
  4611                           ;pic_init.c: 57: PIR1=0;
  4612  00253A  0E00               	movlw	0
  4613  00253C  6E9E               	movwf	3998,c	;volatile
  4614                           
  4615                           ;pic_init.c: 58: PIR2=0;
  4616  00253E  0E00               	movlw	0
  4617  002540  6EA1               	movwf	4001,c	;volatile
  4618                           
  4619                           ;pic_init.c: 59: PIE1=0;
  4620  002542  0E00               	movlw	0
  4621  002544  6E9D               	movwf	3997,c	;volatile
  4622                           
  4623                           ;pic_init.c: 60: PIE2=0;
  4624  002546  0E00               	movlw	0
  4625  002548  6EA0               	movwf	4000,c	;volatile
  4626                           
  4627                           ;pic_init.c: 61: IPR1=0;
  4628  00254A  0E00               	movlw	0
  4629  00254C  6E9F               	movwf	3999,c	;volatile
  4630                           
  4631                           ;pic_init.c: 62: IPR2=0;
  4632  00254E  0E00               	movlw	0
  4633  002550  6EA2               	movwf	4002,c	;volatile
  4634  002552  0012               	return		;funcret
  4635  002554                     __end_of_interrupt_dis:
  4636                           	opt stack 0
  4637                           tblptru	equ	0xFF8
  4638                           prodh	equ	0xFF4
  4639                           prodl	equ	0xFF3
  4640                           intcon	equ	0xFF2
  4641                           intcon2	equ	0xFF1
  4642                           intcon3	equ	0xFF0
  4643                           postinc0	equ	0xFEE
  4644                           wreg	equ	0xFE8
  4645                           indf1	equ	0xFE7
  4646                           postinc1	equ	0xFE6
  4647                           postdec1	equ	0xFE5
  4648                           fsr1h	equ	0xFE2
  4649                           fsr1l	equ	0xFE1
  4650                           indf2	equ	0xFDF
  4651                           postinc2	equ	0xFDE
  4652                           postdec2	equ	0xFDD
  4653                           plusw2	equ	0xFDB
  4654                           fsr2h	equ	0xFDA
  4655                           fsr2l	equ	0xFD9
  4656                           status	equ	0xFD8
  4657                           
  4658 ;; *************** function _cpp_dis *****************
  4659 ;; Defined at:
  4660 ;;		line 65 in file "pic_init.c"
  4661 ;; Parameters:    Size  Location     Type
  4662 ;;		None
  4663 ;; Auto vars:     Size  Location     Type
  4664 ;;		None
  4665 ;; Return value:  Size  Location     Type
  4666 ;;                  1    wreg      void 
  4667 ;; Registers used:
  4668 ;;		wreg, status,2
  4669 ;; Tracked objects:
  4670 ;;		On entry : 0/0
  4671 ;;		On exit  : 0/0
  4672 ;;		Unchanged: 0/0
  4673 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4674 ;;      Params:         0       0       0       0       0       0       0
  4675 ;;      Locals:         0       0       0       0       0       0       0
  4676 ;;      Temps:          0       0       0       0       0       0       0
  4677 ;;      Totals:         0       0       0       0       0       0       0
  4678 ;;Total ram usage:        0 bytes
  4679 ;; Hardware stack levels used:    1
  4680 ;; Hardware stack levels required when called:    3
  4681 ;; This function calls:
  4682 ;;		Nothing
  4683 ;; This function is called by:
  4684 ;;		_pic_init
  4685 ;; This function uses a non-reentrant model
  4686 ;;
  4687                           
  4688                           	psect	text24
  4689  0025BC                     __ptext24:
  4690                           	opt stack 0
  4691  0025BC                     _cpp_dis:
  4692                           	opt stack 26
  4693                           
  4694                           ;pic_init.c: 66: CCP1CON=0b00000000;
  4695                           
  4696                           ;incstack = 0
  4697  0025BC  0E00               	movlw	0
  4698  0025BE  6EBD               	movwf	4029,c	;volatile
  4699                           
  4700                           ;pic_init.c: 67: CCP2CON=0b00000000;
  4701  0025C0  0E00               	movlw	0
  4702  0025C2  6E66               	movwf	3942,c	;volatile
  4703                           
  4704                           ;pic_init.c: 68: CCP3CON=0b00000000;
  4705  0025C4  0E00               	movlw	0
  4706  0025C6  010F               	movlb	15	; () banked
  4707  0025C8  6F5D               	movwf	93,b	;volatile
  4708                           
  4709                           ;pic_init.c: 69: CCP4CON=0b00000000;
  4710  0025CA  0E00               	movlw	0
  4711  0025CC  010F               	movlb	15	; () banked
  4712  0025CE  6F57               	movwf	87,b	;volatile
  4713                           
  4714                           ;pic_init.c: 70: CCP5CON=0b00000000;
  4715  0025D0  0E00               	movlw	0
  4716  0025D2  010F               	movlb	15	; () banked
  4717  0025D4  6F54               	movwf	84,b	;volatile
  4718                           
  4719                           ; BSR set to: 15
  4720  0025D6  0012               	return		;funcret
  4721  0025D8                     __end_of_cpp_dis:
  4722                           	opt stack 0
  4723                           tblptru	equ	0xFF8
  4724                           prodh	equ	0xFF4
  4725                           prodl	equ	0xFF3
  4726                           intcon	equ	0xFF2
  4727                           intcon2	equ	0xFF1
  4728                           intcon3	equ	0xFF0
  4729                           postinc0	equ	0xFEE
  4730                           wreg	equ	0xFE8
  4731                           indf1	equ	0xFE7
  4732                           postinc1	equ	0xFE6
  4733                           postdec1	equ	0xFE5
  4734                           fsr1h	equ	0xFE2
  4735                           fsr1l	equ	0xFE1
  4736                           indf2	equ	0xFDF
  4737                           postinc2	equ	0xFDE
  4738                           postdec2	equ	0xFDD
  4739                           plusw2	equ	0xFDB
  4740                           fsr2h	equ	0xFDA
  4741                           fsr2l	equ	0xFD9
  4742                           status	equ	0xFD8
  4743                           
  4744 ;; *************** function _adc_dis *****************
  4745 ;; Defined at:
  4746 ;;		line 27 in file "pic_init.c"
  4747 ;; Parameters:    Size  Location     Type
  4748 ;;		None
  4749 ;; Auto vars:     Size  Location     Type
  4750 ;;		None
  4751 ;; Return value:  Size  Location     Type
  4752 ;;                  1    wreg      void 
  4753 ;; Registers used:
  4754 ;;		wreg, status,2
  4755 ;; Tracked objects:
  4756 ;;		On entry : 0/0
  4757 ;;		On exit  : 0/0
  4758 ;;		Unchanged: 0/0
  4759 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4760 ;;      Params:         0       0       0       0       0       0       0
  4761 ;;      Locals:         0       0       0       0       0       0       0
  4762 ;;      Temps:          0       0       0       0       0       0       0
  4763 ;;      Totals:         0       0       0       0       0       0       0
  4764 ;;Total ram usage:        0 bytes
  4765 ;; Hardware stack levels used:    1
  4766 ;; Hardware stack levels required when called:    3
  4767 ;; This function calls:
  4768 ;;		Nothing
  4769 ;; This function is called by:
  4770 ;;		_pic_init
  4771 ;; This function uses a non-reentrant model
  4772 ;;
  4773                           
  4774                           	psect	text25
  4775  002488                     __ptext25:
  4776                           	opt stack 0
  4777  002488                     _adc_dis:
  4778                           	opt stack 26
  4779                           
  4780                           ;pic_init.c: 28: ADCON0=0;
  4781                           
  4782                           ; BSR set to: 15
  4783                           ;incstack = 0
  4784  002488  0E00               	movlw	0
  4785  00248A  6EC2               	movwf	4034,c	;volatile
  4786                           
  4787                           ;pic_init.c: 29: ADCON1=0b00000000;
  4788  00248C  0E00               	movlw	0
  4789  00248E  6EC1               	movwf	4033,c	;volatile
  4790                           
  4791                           ;pic_init.c: 30: ADCON2=0;
  4792  002490  0E00               	movlw	0
  4793  002492  6EC0               	movwf	4032,c	;volatile
  4794                           
  4795                           ;pic_init.c: 31: ANSELA=0;
  4796  002494  0E00               	movlw	0
  4797  002496  010F               	movlb	15	; () banked
  4798  002498  6F38               	movwf	56,b	;volatile
  4799                           
  4800                           ;pic_init.c: 32: ANSELB=0;
  4801  00249A  0E00               	movlw	0
  4802  00249C  010F               	movlb	15	; () banked
  4803  00249E  6F39               	movwf	57,b	;volatile
  4804                           
  4805                           ;pic_init.c: 33: ANSELC=0;
  4806  0024A0  0E00               	movlw	0
  4807  0024A2  010F               	movlb	15	; () banked
  4808  0024A4  6F3A               	movwf	58,b	;volatile
  4809                           
  4810                           ;pic_init.c: 34: ANSELD=0;
  4811  0024A6  0E00               	movlw	0
  4812  0024A8  010F               	movlb	15	; () banked
  4813  0024AA  6F3B               	movwf	59,b	;volatile
  4814                           
  4815                           ;pic_init.c: 35: ANSELE=0;
  4816  0024AC  0E00               	movlw	0
  4817  0024AE  010F               	movlb	15	; () banked
  4818  0024B0  6F3C               	movwf	60,b	;volatile
  4819                           
  4820                           ; BSR set to: 15
  4821  0024B2  0012               	return		;funcret
  4822  0024B4                     __end_of_adc_dis:
  4823                           	opt stack 0
  4824                           tblptru	equ	0xFF8
  4825                           prodh	equ	0xFF4
  4826                           prodl	equ	0xFF3
  4827                           intcon	equ	0xFF2
  4828                           intcon2	equ	0xFF1
  4829                           intcon3	equ	0xFF0
  4830                           postinc0	equ	0xFEE
  4831                           wreg	equ	0xFE8
  4832                           indf1	equ	0xFE7
  4833                           postinc1	equ	0xFE6
  4834                           postdec1	equ	0xFE5
  4835                           fsr1h	equ	0xFE2
  4836                           fsr1l	equ	0xFE1
  4837                           indf2	equ	0xFDF
  4838                           postinc2	equ	0xFDE
  4839                           postdec2	equ	0xFDD
  4840                           plusw2	equ	0xFDB
  4841                           fsr2h	equ	0xFDA
  4842                           fsr2l	equ	0xFD9
  4843                           status	equ	0xFD8
  4844                           
  4845 ;; *************** function _modbus_slave_rtu_init *****************
  4846 ;; Defined at:
  4847 ;;		line 98 in file "mod.c"
  4848 ;; Parameters:    Size  Location     Type
  4849 ;;  adress          1    wreg     unsigned char 
  4850 ;; Auto vars:     Size  Location     Type
  4851 ;;  adress          1   30[COMRAM] unsigned char 
  4852 ;; Return value:  Size  Location     Type
  4853 ;;                  1    wreg      void 
  4854 ;; Registers used:
  4855 ;;		wreg, status,2, status,0
  4856 ;; Tracked objects:
  4857 ;;		On entry : 0/0
  4858 ;;		On exit  : 0/0
  4859 ;;		Unchanged: 0/0
  4860 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4861 ;;      Params:         0       0       0       0       0       0       0
  4862 ;;      Locals:         1       0       0       0       0       0       0
  4863 ;;      Temps:          2       0       0       0       0       0       0
  4864 ;;      Totals:         3       0       0       0       0       0       0
  4865 ;;Total ram usage:        3 bytes
  4866 ;; Hardware stack levels used:    1
  4867 ;; Hardware stack levels required when called:    3
  4868 ;; This function calls:
  4869 ;;		Nothing
  4870 ;; This function is called by:
  4871 ;;		_main
  4872 ;; This function uses a non-reentrant model
  4873 ;;
  4874                           
  4875                           	psect	text26
  4876  00231A                     __ptext26:
  4877                           	opt stack 0
  4878  00231A                     _modbus_slave_rtu_init:
  4879                           	opt stack 27
  4880                           
  4881                           ; BSR set to: 15
  4882                           ;incstack = 0
  4883                           ;modbus_slave_rtu_init@adress stored from wreg
  4884  00231A  6E1F               	movwf	modbus_slave_rtu_init@adress,c
  4885                           
  4886                           ;mod.c: 99: Registers[50]=adress;
  4887  00231C  501F               	movf	modbus_slave_rtu_init@adress,w,c
  4888  00231E  6E1D               	movwf	??_modbus_slave_rtu_init& (0+255),c
  4889  002320  6A1E               	clrf	(??_modbus_slave_rtu_init+1)& (0+255),c
  4890  002322  C01D  F22C         	movff	??_modbus_slave_rtu_init,_Registers+100
  4891  002326  C01E  F22D         	movff	??_modbus_slave_rtu_init+1,_Registers+101
  4892                           
  4893                           ;mod.c: 100: modbus_time_over=0;
  4894  00232A  0E00               	movlw	0
  4895  00232C  6E3B               	movwf	_modbus_time_over,c
  4896                           
  4897                           ;mod.c: 101: modbus_get_start=0;
  4898  00232E  0E00               	movlw	0
  4899  002330  6E3A               	movwf	_modbus_get_start,c
  4900                           
  4901                           ;mod.c: 102: send_count=0;
  4902  002332  0E00               	movlw	0
  4903  002334  6E3D               	movwf	_send_count,c
  4904                           
  4905                           ;mod.c: 103: tmp2_16bit=&tmp2[0];
  4906  002336  0E41               	movlw	low _tmp2
  4907  002338  0100               	movlb	0	; () banked
  4908  00233A  6FA2               	movwf	_tmp2_16bit& (0+255),b
  4909  00233C  0E00               	movlw	high _tmp2
  4910  00233E  0100               	movlb	0	; () banked
  4911  002340  6FA3               	movwf	(_tmp2_16bit+1)& (0+255),b
  4912                           
  4913                           ; BSR set to: 0
  4914                           ;mod.c: 104: LATDbits.LATD4=0;
  4915  002342  988C               	bcf	3980,4,c	;volatile
  4916                           
  4917                           ; BSR set to: 0
  4918                           ;mod.c: 106: TXSTA1=0b00000100;
  4919  002344  0E04               	movlw	4
  4920  002346  6EAC               	movwf	4012,c	;volatile
  4921                           
  4922                           ; BSR set to: 0
  4923                           ;mod.c: 107: RCSTA1=0b10010000;
  4924  002348  0E90               	movlw	144
  4925  00234A  6EAB               	movwf	4011,c	;volatile
  4926                           
  4927                           ; BSR set to: 0
  4928                           ;mod.c: 108: BAUDCON1=0b00000000;
  4929  00234C  0E00               	movlw	0
  4930  00234E  6EB8               	movwf	4024,c	;volatile
  4931                           
  4932                           ; BSR set to: 0
  4933                           ;mod.c: 109: TXSTA1bits.SYNC=0;
  4934  002350  98AC               	bcf	4012,4,c	;volatile
  4935                           
  4936                           ; BSR set to: 0
  4937                           ;mod.c: 110: TXSTA1bits.BRGH=1;
  4938  002352  84AC               	bsf	4012,2,c	;volatile
  4939                           
  4940                           ; BSR set to: 0
  4941                           ;mod.c: 111: BAUDCON1bits.BRG16=1;
  4942  002354  86B8               	bsf	4024,3,c	;volatile
  4943                           
  4944                           ; BSR set to: 0
  4945                           ;mod.c: 113: SPBRGH1=0x06;
  4946  002356  0E06               	movlw	6
  4947  002358  6EB0               	movwf	4016,c	;volatile
  4948                           
  4949                           ; BSR set to: 0
  4950                           ;mod.c: 114: SPBRG1=0x82;
  4951  00235A  0E82               	movlw	130
  4952  00235C  6EAF               	movwf	4015,c	;volatile
  4953                           
  4954                           ; BSR set to: 0
  4955                           ;mod.c: 132: PIE1bits.RC1IE=1;
  4956  00235E  8A9D               	bsf	3997,5,c	;volatile
  4957                           
  4958                           ; BSR set to: 0
  4959  002360  0012               	return		;funcret
  4960  002362                     __end_of_modbus_slave_rtu_init:
  4961                           	opt stack 0
  4962                           tblptru	equ	0xFF8
  4963                           prodh	equ	0xFF4
  4964                           prodl	equ	0xFF3
  4965                           intcon	equ	0xFF2
  4966                           intcon2	equ	0xFF1
  4967                           intcon3	equ	0xFF0
  4968                           postinc0	equ	0xFEE
  4969                           wreg	equ	0xFE8
  4970                           indf1	equ	0xFE7
  4971                           postinc1	equ	0xFE6
  4972                           postdec1	equ	0xFE5
  4973                           fsr1h	equ	0xFE2
  4974                           fsr1l	equ	0xFE1
  4975                           indf2	equ	0xFDF
  4976                           postinc2	equ	0xFDE
  4977                           postdec2	equ	0xFDD
  4978                           plusw2	equ	0xFDB
  4979                           fsr2h	equ	0xFDA
  4980                           fsr2l	equ	0xFD9
  4981                           status	equ	0xFD8
  4982                           
  4983 ;; *************** function _measure *****************
  4984 ;; Defined at:
  4985 ;;		line 1 in file "measure.c"
  4986 ;; Parameters:    Size  Location     Type
  4987 ;;		None
  4988 ;; Auto vars:     Size  Location     Type
  4989 ;;  tmp_watt        4   38[BANK0 ] long 
  4990 ;; Return value:  Size  Location     Type
  4991 ;;                  1    wreg      void 
  4992 ;; Registers used:
  4993 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4994 ;; Tracked objects:
  4995 ;;		On entry : 0/0
  4996 ;;		On exit  : 0/0
  4997 ;;		Unchanged: 0/0
  4998 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4999 ;;      Params:         0       0       0       0       0       0       0
  5000 ;;      Locals:         0       7       0       0       0       0       0
  5001 ;;      Temps:          0       4       0       0       0       0       0
  5002 ;;      Totals:         0      11       0       0       0       0       0
  5003 ;;Total ram usage:       11 bytes
  5004 ;; Hardware stack levels used:    1
  5005 ;; Hardware stack levels required when called:    5
  5006 ;; This function calls:
  5007 ;;		___aldiv
  5008 ;;		___almod
  5009 ;;		___awtoft
  5010 ;;		___ftmul
  5011 ;;		___fttol
  5012 ;;		___lldiv
  5013 ;;		___lmul
  5014 ;;		_save_EEPROM
  5015 ;; This function is called by:
  5016 ;;		_main
  5017 ;; This function uses a non-reentrant model
  5018 ;;
  5019                           
  5020                           	psect	text27
  5021  000606                     __ptext27:
  5022                           	opt stack 0
  5023  000606                     _measure:
  5024                           	opt stack 25
  5025                           
  5026                           ;measure.c: 2: static unsigned long hall_adc_av1=0,hall_adc_av2=0;
  5027                           ;measure.c: 3: static unsigned int akim_i=0;
  5028                           ;measure.c: 4: long tmp_watt=0;
  5029                           
  5030                           ; BSR set to: 0
  5031                           ;incstack = 0
  5032  000606  0E00               	movlw	0
  5033  000608  0100               	movlb	0	; () banked
  5034  00060A  6FF7               	movwf	measure@tmp_watt& (0+255),b
  5035  00060C  0E00               	movlw	0
  5036  00060E  6FF8               	movwf	(measure@tmp_watt+1)& (0+255),b
  5037  000610  0E00               	movlw	0
  5038  000612  6FF9               	movwf	(measure@tmp_watt+2)& (0+255),b
  5039  000614  0E00               	movlw	0
  5040  000616  6FFA               	movwf	(measure@tmp_watt+3)& (0+255),b
  5041                           
  5042                           ; BSR set to: 0
  5043                           ;measure.c: 6: if(akim_i){
  5044  000618  0100               	movlb	0	; () banked
  5045  00061A  51A6               	movf	measure@akim_i& (0+255),w,b
  5046  00061C  0100               	movlb	0	; () banked
  5047  00061E  11A7               	iorwf	(measure@akim_i+1)& (0+255),w,b
  5048  000620  B4D8               	btfsc	status,2,c
  5049  000622  D01D               	goto	l4335
  5050                           
  5051                           ; BSR set to: 0
  5052                           ;measure.c: 7: hall_adc_av1+=adc[23];
  5053  000624  0100               	movlb	0	; () banked
  5054  000626  518E               	movf	(_adc+46)& (0+255),w,b
  5055  000628  0100               	movlb	0	; () banked
  5056  00062A  2798               	addwf	measure@hall_adc_av1& (0+255),f,b
  5057  00062C  0100               	movlb	0	; () banked
  5058  00062E  518F               	movf	(_adc+47)& (0+255),w,b
  5059  000630  0100               	movlb	0	; () banked
  5060  000632  2399               	addwfc	(measure@hall_adc_av1+1)& (0+255),f,b
  5061  000634  0E00               	movlw	0
  5062  000636  0100               	movlb	0	; () banked
  5063  000638  239A               	addwfc	(measure@hall_adc_av1+2)& (0+255),f,b
  5064  00063A  0E00               	movlw	0
  5065  00063C  0100               	movlb	0	; () banked
  5066  00063E  239B               	addwfc	(measure@hall_adc_av1+3)& (0+255),f,b
  5067                           
  5068                           ;measure.c: 8: hall_adc_av2+=adc[21];
  5069  000640  0100               	movlb	0	; () banked
  5070  000642  518A               	movf	(_adc+42)& (0+255),w,b
  5071  000644  0100               	movlb	0	; () banked
  5072  000646  279C               	addwf	measure@hall_adc_av2& (0+255),f,b
  5073  000648  0100               	movlb	0	; () banked
  5074  00064A  518B               	movf	(_adc+43)& (0+255),w,b
  5075  00064C  0100               	movlb	0	; () banked
  5076  00064E  239D               	addwfc	(measure@hall_adc_av2+1)& (0+255),f,b
  5077  000650  0E00               	movlw	0
  5078  000652  0100               	movlb	0	; () banked
  5079  000654  239E               	addwfc	(measure@hall_adc_av2+2)& (0+255),f,b
  5080  000656  0E00               	movlw	0
  5081  000658  0100               	movlb	0	; () banked
  5082  00065A  239F               	addwfc	(measure@hall_adc_av2+3)& (0+255),f,b
  5083                           
  5084                           ;measure.c: 9: }else{
  5085  00065C  D043               	goto	l4341
  5086  00065E                     l4335:
  5087                           
  5088                           ; BSR set to: 0
  5089                           ;measure.c: 10: akim_i=51;
  5090  00065E  0E00               	movlw	0
  5091  000660  0100               	movlb	0	; () banked
  5092  000662  6FA7               	movwf	(measure@akim_i+1)& (0+255),b
  5093  000664  0E33               	movlw	51
  5094  000666  6FA6               	movwf	measure@akim_i& (0+255),b
  5095                           
  5096                           ; BSR set to: 0
  5097                           ;measure.c: 11: Registers[9]=(unsigned int) (hall_adc_av1/50);
  5098  000668  C098  F01D         	movff	measure@hall_adc_av1,___lldiv@dividend
  5099  00066C  C099  F01E         	movff	measure@hall_adc_av1+1,___lldiv@dividend+1
  5100  000670  C09A  F01F         	movff	measure@hall_adc_av1+2,___lldiv@dividend+2
  5101  000674  C09B  F020         	movff	measure@hall_adc_av1+3,___lldiv@dividend+3
  5102  000678  0E32               	movlw	50
  5103  00067A  6E21               	movwf	___lldiv@divisor,c
  5104  00067C  0E00               	movlw	0
  5105  00067E  6E22               	movwf	___lldiv@divisor+1,c
  5106  000680  0E00               	movlw	0
  5107  000682  6E23               	movwf	___lldiv@divisor+2,c
  5108  000684  0E00               	movlw	0
  5109  000686  6E24               	movwf	___lldiv@divisor+3,c
  5110  000688  EC80  F00F         	call	___lldiv	;wreg free
  5111  00068C  C01D  F1DA         	movff	?___lldiv,_Registers+18
  5112  000690  C01E  F1DB         	movff	?___lldiv+1,_Registers+19
  5113                           
  5114                           ;measure.c: 12: Registers[10]=(unsigned int)(hall_adc_av2/50);
  5115  000694  C09C  F01D         	movff	measure@hall_adc_av2,___lldiv@dividend
  5116  000698  C09D  F01E         	movff	measure@hall_adc_av2+1,___lldiv@dividend+1
  5117  00069C  C09E  F01F         	movff	measure@hall_adc_av2+2,___lldiv@dividend+2
  5118  0006A0  C09F  F020         	movff	measure@hall_adc_av2+3,___lldiv@dividend+3
  5119  0006A4  0E32               	movlw	50
  5120  0006A6  6E21               	movwf	___lldiv@divisor,c
  5121  0006A8  0E00               	movlw	0
  5122  0006AA  6E22               	movwf	___lldiv@divisor+1,c
  5123  0006AC  0E00               	movlw	0
  5124  0006AE  6E23               	movwf	___lldiv@divisor+2,c
  5125  0006B0  0E00               	movlw	0
  5126  0006B2  6E24               	movwf	___lldiv@divisor+3,c
  5127  0006B4  EC80  F00F         	call	___lldiv	;wreg free
  5128  0006B8  C01D  F1DC         	movff	?___lldiv,_Registers+20
  5129  0006BC  C01E  F1DD         	movff	?___lldiv+1,_Registers+21
  5130                           
  5131                           ;measure.c: 13: hall_adc_av2=0;
  5132  0006C0  0E00               	movlw	0
  5133  0006C2  0100               	movlb	0	; () banked
  5134  0006C4  6F9C               	movwf	measure@hall_adc_av2& (0+255),b
  5135  0006C6  0E00               	movlw	0
  5136  0006C8  6F9D               	movwf	(measure@hall_adc_av2+1)& (0+255),b
  5137  0006CA  0E00               	movlw	0
  5138  0006CC  6F9E               	movwf	(measure@hall_adc_av2+2)& (0+255),b
  5139  0006CE  0E00               	movlw	0
  5140  0006D0  6F9F               	movwf	(measure@hall_adc_av2+3)& (0+255),b
  5141                           
  5142                           ;measure.c: 14: hall_adc_av1=0;
  5143  0006D2  0E00               	movlw	0
  5144  0006D4  0100               	movlb	0	; () banked
  5145  0006D6  6F98               	movwf	measure@hall_adc_av1& (0+255),b
  5146  0006D8  0E00               	movlw	0
  5147  0006DA  6F99               	movwf	(measure@hall_adc_av1+1)& (0+255),b
  5148  0006DC  0E00               	movlw	0
  5149  0006DE  6F9A               	movwf	(measure@hall_adc_av1+2)& (0+255),b
  5150  0006E0  0E00               	movlw	0
  5151  0006E2  6F9B               	movwf	(measure@hall_adc_av1+3)& (0+255),b
  5152  0006E4                     l4341:
  5153                           
  5154                           ; BSR set to: 0
  5155                           ;measure.c: 15: }
  5156                           ;measure.c: 17: akim_i--;
  5157  0006E4  0100               	movlb	0	; () banked
  5158  0006E6  07A6               	decf	measure@akim_i& (0+255),f,b
  5159  0006E8  A0D8               	btfss	status,0,c
  5160  0006EA  07A7               	decf	(measure@akim_i+1)& (0+255),f,b
  5161                           
  5162                           ; BSR set to: 0
  5163                           ;measure.c: 19: Registers[11]=adc[22];
  5164  0006EC  EE20  F08C         	lfsr	2,_adc+44
  5165  0006F0  CFDE F1DE          	movff	postinc2,_Registers+22
  5166  0006F4  CFDD F1DF          	movff	postdec2,_Registers+23
  5167                           
  5168                           ; BSR set to: 0
  5169                           ;measure.c: 20: Registers[16]=adc[20];
  5170  0006F8  EE20  F088         	lfsr	2,_adc+40
  5171  0006FC  CFDE F1E8          	movff	postinc2,_Registers+32
  5172  000700  CFDD F1E9          	movff	postdec2,_Registers+33
  5173                           
  5174                           ; BSR set to: 0
  5175                           ;measure.c: 22: Registers[4]=(((signed int)Registers[9]-Registers[60])*0.01*Registers[61
      +                          ]);
  5176  000704  C242  F025         	movff	_Registers+122,___awtoft@c
  5177  000708  C243  F026         	movff	_Registers+123,___awtoft@c+1
  5178  00070C  ECD4  F011         	call	___awtoft	;wreg free
  5179  000710  C025  F0D5         	movff	?___awtoft,___ftmul@f2
  5180  000714  C026  F0D6         	movff	?___awtoft+1,___ftmul@f2+1
  5181  000718  C027  F0D7         	movff	?___awtoft+2,___ftmul@f2+2
  5182  00071C  EE21  F0DA         	lfsr	2,_Registers+18
  5183  000720  CFDE F0F0          	movff	postinc2,??_measure
  5184  000724  CFDD F0F1          	movff	postdec2,??_measure+1
  5185  000728  EE22  F040         	lfsr	2,_Registers+120
  5186  00072C  CFDE F0F2          	movff	postinc2,??_measure+2
  5187  000730  CFDD F0F3          	movff	postdec2,??_measure+3
  5188  000734  0100               	movlb	0	; () banked
  5189  000736  1FF2               	comf	(??_measure+2)& (0+255),f,b
  5190  000738  1FF3               	comf	(??_measure+3)& (0+255),f,b
  5191  00073A  4BF2               	infsnz	(??_measure+2)& (0+255),f,b
  5192  00073C  2BF3               	incf	(??_measure+3)& (0+255),f,b
  5193  00073E  0100               	movlb	0	; () banked
  5194  000740  51F0               	movf	??_measure& (0+255),w,b
  5195  000742  0100               	movlb	0	; () banked
  5196  000744  25F2               	addwf	(??_measure+2)& (0+255),w,b
  5197  000746  6E25               	movwf	___awtoft@c,c
  5198  000748  0100               	movlb	0	; () banked
  5199  00074A  51F1               	movf	(??_measure+1)& (0+255),w,b
  5200  00074C  0100               	movlb	0	; () banked
  5201  00074E  21F3               	addwfc	(??_measure+3)& (0+255),w,b
  5202  000750  6E26               	movwf	___awtoft@c+1,c
  5203  000752  ECD4  F011         	call	___awtoft	;wreg free
  5204  000756  C025  F0D2         	movff	?___awtoft,___ftmul@f1
  5205  00075A  C026  F0D3         	movff	?___awtoft+1,___ftmul@f1+1
  5206  00075E  C027  F0D4         	movff	?___awtoft+2,___ftmul@f1+2
  5207  000762  ECB4  F00B         	call	___ftmul	;wreg free
  5208  000766  C0D2  F0F4         	movff	?___ftmul,_measure$2382
  5209  00076A  C0D3  F0F5         	movff	?___ftmul+1,_measure$2382+1
  5210  00076E  C0D4  F0F6         	movff	?___ftmul+2,_measure$2382+2
  5211                           
  5212                           ;measure.c: 22: Registers[4]=(((signed int)Registers[9]-Registers[60])*0.01*Registers[61
      +                          ]);
  5213  000772  0ED7               	movlw	215
  5214  000774  0100               	movlb	0	; () banked
  5215  000776  6FD5               	movwf	___ftmul@f2& (0+255),b
  5216  000778  0E23               	movlw	35
  5217  00077A  0100               	movlb	0	; () banked
  5218  00077C  6FD6               	movwf	(___ftmul@f2+1)& (0+255),b
  5219  00077E  0E3C               	movlw	60
  5220  000780  0100               	movlb	0	; () banked
  5221  000782  6FD7               	movwf	(___ftmul@f2+2)& (0+255),b
  5222  000784  C0F4  F0D2         	movff	_measure$2382,___ftmul@f1
  5223  000788  C0F5  F0D3         	movff	_measure$2382+1,___ftmul@f1+1
  5224  00078C  C0F6  F0D4         	movff	_measure$2382+2,___ftmul@f1+2
  5225  000790  ECB4  F00B         	call	___ftmul	;wreg free
  5226  000794  C0D2  F0E1         	movff	?___ftmul,___fttol@f1
  5227  000798  C0D3  F0E2         	movff	?___ftmul+1,___fttol@f1+1
  5228  00079C  C0D4  F0E3         	movff	?___ftmul+2,___fttol@f1+2
  5229  0007A0  EC63  F00C         	call	___fttol	;wreg free
  5230  0007A4  0100               	movlb	0	; () banked
  5231  0007A6  C0E1  F1D0         	movff	?___fttol,_Registers+8
  5232  0007AA  0100               	movlb	0	; () banked
  5233  0007AC  C0E2  F1D1         	movff	?___fttol+1,_Registers+9
  5234                           
  5235                           ; BSR set to: 0
  5236                           ;measure.c: 23: Registers[5]=(((signed int)Registers[10]-Registers[62])*0.01*Registers[6
      +                          3]);
  5237  0007B0  C246  F025         	movff	_Registers+126,___awtoft@c
  5238  0007B4  C247  F026         	movff	_Registers+127,___awtoft@c+1
  5239  0007B8  ECD4  F011         	call	___awtoft	;wreg free
  5240  0007BC  C025  F0D5         	movff	?___awtoft,___ftmul@f2
  5241  0007C0  C026  F0D6         	movff	?___awtoft+1,___ftmul@f2+1
  5242  0007C4  C027  F0D7         	movff	?___awtoft+2,___ftmul@f2+2
  5243  0007C8  EE21  F0DC         	lfsr	2,_Registers+20
  5244  0007CC  CFDE F0F0          	movff	postinc2,??_measure
  5245  0007D0  CFDD F0F1          	movff	postdec2,??_measure+1
  5246  0007D4  EE22  F044         	lfsr	2,_Registers+124
  5247  0007D8  CFDE F0F2          	movff	postinc2,??_measure+2
  5248  0007DC  CFDD F0F3          	movff	postdec2,??_measure+3
  5249  0007E0  0100               	movlb	0	; () banked
  5250  0007E2  1FF2               	comf	(??_measure+2)& (0+255),f,b
  5251  0007E4  1FF3               	comf	(??_measure+3)& (0+255),f,b
  5252  0007E6  4BF2               	infsnz	(??_measure+2)& (0+255),f,b
  5253  0007E8  2BF3               	incf	(??_measure+3)& (0+255),f,b
  5254  0007EA  0100               	movlb	0	; () banked
  5255  0007EC  51F0               	movf	??_measure& (0+255),w,b
  5256  0007EE  0100               	movlb	0	; () banked
  5257  0007F0  25F2               	addwf	(??_measure+2)& (0+255),w,b
  5258  0007F2  6E25               	movwf	___awtoft@c,c
  5259  0007F4  0100               	movlb	0	; () banked
  5260  0007F6  51F1               	movf	(??_measure+1)& (0+255),w,b
  5261  0007F8  0100               	movlb	0	; () banked
  5262  0007FA  21F3               	addwfc	(??_measure+3)& (0+255),w,b
  5263  0007FC  6E26               	movwf	___awtoft@c+1,c
  5264  0007FE  ECD4  F011         	call	___awtoft	;wreg free
  5265  000802  C025  F0D2         	movff	?___awtoft,___ftmul@f1
  5266  000806  C026  F0D3         	movff	?___awtoft+1,___ftmul@f1+1
  5267  00080A  C027  F0D4         	movff	?___awtoft+2,___ftmul@f1+2
  5268  00080E  ECB4  F00B         	call	___ftmul	;wreg free
  5269  000812  C0D2  F0F4         	movff	?___ftmul,_measure$2382
  5270  000816  C0D3  F0F5         	movff	?___ftmul+1,_measure$2382+1
  5271  00081A  C0D4  F0F6         	movff	?___ftmul+2,_measure$2382+2
  5272                           
  5273                           ;measure.c: 23: Registers[5]=(((signed int)Registers[10]-Registers[62])*0.01*Registers[6
      +                          3]);
  5274  00081E  0ED7               	movlw	215
  5275  000820  0100               	movlb	0	; () banked
  5276  000822  6FD5               	movwf	___ftmul@f2& (0+255),b
  5277  000824  0E23               	movlw	35
  5278  000826  0100               	movlb	0	; () banked
  5279  000828  6FD6               	movwf	(___ftmul@f2+1)& (0+255),b
  5280  00082A  0E3C               	movlw	60
  5281  00082C  0100               	movlb	0	; () banked
  5282  00082E  6FD7               	movwf	(___ftmul@f2+2)& (0+255),b
  5283  000830  C0F4  F0D2         	movff	_measure$2382,___ftmul@f1
  5284  000834  C0F5  F0D3         	movff	_measure$2382+1,___ftmul@f1+1
  5285  000838  C0F6  F0D4         	movff	_measure$2382+2,___ftmul@f1+2
  5286  00083C  ECB4  F00B         	call	___ftmul	;wreg free
  5287  000840  C0D2  F0E1         	movff	?___ftmul,___fttol@f1
  5288  000844  C0D3  F0E2         	movff	?___ftmul+1,___fttol@f1+1
  5289  000848  C0D4  F0E3         	movff	?___ftmul+2,___fttol@f1+2
  5290  00084C  EC63  F00C         	call	___fttol	;wreg free
  5291  000850  0100               	movlb	0	; () banked
  5292  000852  C0E1  F1D2         	movff	?___fttol,_Registers+10
  5293  000856  0100               	movlb	0	; () banked
  5294  000858  C0E2  F1D3         	movff	?___fttol+1,_Registers+11
  5295                           
  5296                           ; BSR set to: 0
  5297                           ;measure.c: 24: Registers[6]=(((signed int)Registers[11]-Registers[64])*0.01*Registers[6
      +                          5]);
  5298  00085C  C24A  F025         	movff	_Registers+130,___awtoft@c
  5299  000860  C24B  F026         	movff	_Registers+131,___awtoft@c+1
  5300  000864  ECD4  F011         	call	___awtoft	;wreg free
  5301  000868  C025  F0D5         	movff	?___awtoft,___ftmul@f2
  5302  00086C  C026  F0D6         	movff	?___awtoft+1,___ftmul@f2+1
  5303  000870  C027  F0D7         	movff	?___awtoft+2,___ftmul@f2+2
  5304  000874  EE21  F0DE         	lfsr	2,_Registers+22
  5305  000878  CFDE F0F0          	movff	postinc2,??_measure
  5306  00087C  CFDD F0F1          	movff	postdec2,??_measure+1
  5307  000880  EE22  F048         	lfsr	2,_Registers+128
  5308  000884  CFDE F0F2          	movff	postinc2,??_measure+2
  5309  000888  CFDD F0F3          	movff	postdec2,??_measure+3
  5310  00088C  0100               	movlb	0	; () banked
  5311  00088E  1FF2               	comf	(??_measure+2)& (0+255),f,b
  5312  000890  1FF3               	comf	(??_measure+3)& (0+255),f,b
  5313  000892  4BF2               	infsnz	(??_measure+2)& (0+255),f,b
  5314  000894  2BF3               	incf	(??_measure+3)& (0+255),f,b
  5315  000896  0100               	movlb	0	; () banked
  5316  000898  51F0               	movf	??_measure& (0+255),w,b
  5317  00089A  0100               	movlb	0	; () banked
  5318  00089C  25F2               	addwf	(??_measure+2)& (0+255),w,b
  5319  00089E  6E25               	movwf	___awtoft@c,c
  5320  0008A0  0100               	movlb	0	; () banked
  5321  0008A2  51F1               	movf	(??_measure+1)& (0+255),w,b
  5322  0008A4  0100               	movlb	0	; () banked
  5323  0008A6  21F3               	addwfc	(??_measure+3)& (0+255),w,b
  5324  0008A8  6E26               	movwf	___awtoft@c+1,c
  5325  0008AA  ECD4  F011         	call	___awtoft	;wreg free
  5326  0008AE  C025  F0D2         	movff	?___awtoft,___ftmul@f1
  5327  0008B2  C026  F0D3         	movff	?___awtoft+1,___ftmul@f1+1
  5328  0008B6  C027  F0D4         	movff	?___awtoft+2,___ftmul@f1+2
  5329  0008BA  ECB4  F00B         	call	___ftmul	;wreg free
  5330  0008BE  C0D2  F0F4         	movff	?___ftmul,_measure$2382
  5331  0008C2  C0D3  F0F5         	movff	?___ftmul+1,_measure$2382+1
  5332  0008C6  C0D4  F0F6         	movff	?___ftmul+2,_measure$2382+2
  5333                           
  5334                           ;measure.c: 24: Registers[6]=(((signed int)Registers[11]-Registers[64])*0.01*Registers[6
      +                          5]);
  5335  0008CA  0ED7               	movlw	215
  5336  0008CC  0100               	movlb	0	; () banked
  5337  0008CE  6FD5               	movwf	___ftmul@f2& (0+255),b
  5338  0008D0  0E23               	movlw	35
  5339  0008D2  0100               	movlb	0	; () banked
  5340  0008D4  6FD6               	movwf	(___ftmul@f2+1)& (0+255),b
  5341  0008D6  0E3C               	movlw	60
  5342  0008D8  0100               	movlb	0	; () banked
  5343  0008DA  6FD7               	movwf	(___ftmul@f2+2)& (0+255),b
  5344  0008DC  C0F4  F0D2         	movff	_measure$2382,___ftmul@f1
  5345  0008E0  C0F5  F0D3         	movff	_measure$2382+1,___ftmul@f1+1
  5346  0008E4  C0F6  F0D4         	movff	_measure$2382+2,___ftmul@f1+2
  5347  0008E8  ECB4  F00B         	call	___ftmul	;wreg free
  5348  0008EC  C0D2  F0E1         	movff	?___ftmul,___fttol@f1
  5349  0008F0  C0D3  F0E2         	movff	?___ftmul+1,___fttol@f1+1
  5350  0008F4  C0D4  F0E3         	movff	?___ftmul+2,___fttol@f1+2
  5351  0008F8  EC63  F00C         	call	___fttol	;wreg free
  5352  0008FC  0100               	movlb	0	; () banked
  5353  0008FE  C0E1  F1D4         	movff	?___fttol,_Registers+12
  5354  000902  0100               	movlb	0	; () banked
  5355  000904  C0E2  F1D5         	movff	?___fttol+1,_Registers+13
  5356                           
  5357                           ; BSR set to: 0
  5358                           ;measure.c: 25: Registers[15]=(((signed int)Registers[16]-Registers[66])*0.01*Registers[
      +                          67]);
  5359  000908  C24E  F025         	movff	_Registers+134,___awtoft@c
  5360  00090C  C24F  F026         	movff	_Registers+135,___awtoft@c+1
  5361  000910  ECD4  F011         	call	___awtoft	;wreg free
  5362  000914  C025  F0D5         	movff	?___awtoft,___ftmul@f2
  5363  000918  C026  F0D6         	movff	?___awtoft+1,___ftmul@f2+1
  5364  00091C  C027  F0D7         	movff	?___awtoft+2,___ftmul@f2+2
  5365  000920  EE21  F0E8         	lfsr	2,_Registers+32
  5366  000924  CFDE F0F0          	movff	postinc2,??_measure
  5367  000928  CFDD F0F1          	movff	postdec2,??_measure+1
  5368  00092C  EE22  F04C         	lfsr	2,_Registers+132
  5369  000930  CFDE F0F2          	movff	postinc2,??_measure+2
  5370  000934  CFDD F0F3          	movff	postdec2,??_measure+3
  5371  000938  0100               	movlb	0	; () banked
  5372  00093A  1FF2               	comf	(??_measure+2)& (0+255),f,b
  5373  00093C  1FF3               	comf	(??_measure+3)& (0+255),f,b
  5374  00093E  4BF2               	infsnz	(??_measure+2)& (0+255),f,b
  5375  000940  2BF3               	incf	(??_measure+3)& (0+255),f,b
  5376  000942  0100               	movlb	0	; () banked
  5377  000944  51F0               	movf	??_measure& (0+255),w,b
  5378  000946  0100               	movlb	0	; () banked
  5379  000948  25F2               	addwf	(??_measure+2)& (0+255),w,b
  5380  00094A  6E25               	movwf	___awtoft@c,c
  5381  00094C  0100               	movlb	0	; () banked
  5382  00094E  51F1               	movf	(??_measure+1)& (0+255),w,b
  5383  000950  0100               	movlb	0	; () banked
  5384  000952  21F3               	addwfc	(??_measure+3)& (0+255),w,b
  5385  000954  6E26               	movwf	___awtoft@c+1,c
  5386  000956  ECD4  F011         	call	___awtoft	;wreg free
  5387  00095A  C025  F0D2         	movff	?___awtoft,___ftmul@f1
  5388  00095E  C026  F0D3         	movff	?___awtoft+1,___ftmul@f1+1
  5389  000962  C027  F0D4         	movff	?___awtoft+2,___ftmul@f1+2
  5390  000966  ECB4  F00B         	call	___ftmul	;wreg free
  5391  00096A  C0D2  F0F4         	movff	?___ftmul,_measure$2382
  5392  00096E  C0D3  F0F5         	movff	?___ftmul+1,_measure$2382+1
  5393  000972  C0D4  F0F6         	movff	?___ftmul+2,_measure$2382+2
  5394                           
  5395                           ;measure.c: 25: Registers[15]=(((signed int)Registers[16]-Registers[66])*0.01*Registers[
      +                          67]);
  5396  000976  0ED7               	movlw	215
  5397  000978  0100               	movlb	0	; () banked
  5398  00097A  6FD5               	movwf	___ftmul@f2& (0+255),b
  5399  00097C  0E23               	movlw	35
  5400  00097E  0100               	movlb	0	; () banked
  5401  000980  6FD6               	movwf	(___ftmul@f2+1)& (0+255),b
  5402  000982  0E3C               	movlw	60
  5403  000984  0100               	movlb	0	; () banked
  5404  000986  6FD7               	movwf	(___ftmul@f2+2)& (0+255),b
  5405  000988  C0F4  F0D2         	movff	_measure$2382,___ftmul@f1
  5406  00098C  C0F5  F0D3         	movff	_measure$2382+1,___ftmul@f1+1
  5407  000990  C0F6  F0D4         	movff	_measure$2382+2,___ftmul@f1+2
  5408  000994  ECB4  F00B         	call	___ftmul	;wreg free
  5409  000998  C0D2  F0E1         	movff	?___ftmul,___fttol@f1
  5410  00099C  C0D3  F0E2         	movff	?___ftmul+1,___fttol@f1+1
  5411  0009A0  C0D4  F0E3         	movff	?___ftmul+2,___fttol@f1+2
  5412  0009A4  EC63  F00C         	call	___fttol	;wreg free
  5413  0009A8  0100               	movlb	0	; () banked
  5414  0009AA  C0E1  F1E6         	movff	?___fttol,_Registers+30
  5415  0009AE  0100               	movlb	0	; () banked
  5416  0009B0  C0E2  F1E7         	movff	?___fttol+1,_Registers+31
  5417                           
  5418                           ; BSR set to: 0
  5419                           ;measure.c: 26: Registers[7]=(((signed int)Registers[12]-Registers[68])*0.01*Registers[6
      +                          9]);
  5420  0009B4  C252  F025         	movff	_Registers+138,___awtoft@c
  5421  0009B8  C253  F026         	movff	_Registers+139,___awtoft@c+1
  5422  0009BC  ECD4  F011         	call	___awtoft	;wreg free
  5423  0009C0  C025  F0D5         	movff	?___awtoft,___ftmul@f2
  5424  0009C4  C026  F0D6         	movff	?___awtoft+1,___ftmul@f2+1
  5425  0009C8  C027  F0D7         	movff	?___awtoft+2,___ftmul@f2+2
  5426  0009CC  EE21  F0E0         	lfsr	2,_Registers+24
  5427  0009D0  CFDE F0F0          	movff	postinc2,??_measure
  5428  0009D4  CFDD F0F1          	movff	postdec2,??_measure+1
  5429  0009D8  EE22  F050         	lfsr	2,_Registers+136
  5430  0009DC  CFDE F0F2          	movff	postinc2,??_measure+2
  5431  0009E0  CFDD F0F3          	movff	postdec2,??_measure+3
  5432  0009E4  0100               	movlb	0	; () banked
  5433  0009E6  1FF2               	comf	(??_measure+2)& (0+255),f,b
  5434  0009E8  1FF3               	comf	(??_measure+3)& (0+255),f,b
  5435  0009EA  4BF2               	infsnz	(??_measure+2)& (0+255),f,b
  5436  0009EC  2BF3               	incf	(??_measure+3)& (0+255),f,b
  5437  0009EE  0100               	movlb	0	; () banked
  5438  0009F0  51F0               	movf	??_measure& (0+255),w,b
  5439  0009F2  0100               	movlb	0	; () banked
  5440  0009F4  25F2               	addwf	(??_measure+2)& (0+255),w,b
  5441  0009F6  6E25               	movwf	___awtoft@c,c
  5442  0009F8  0100               	movlb	0	; () banked
  5443  0009FA  51F1               	movf	(??_measure+1)& (0+255),w,b
  5444  0009FC  0100               	movlb	0	; () banked
  5445  0009FE  21F3               	addwfc	(??_measure+3)& (0+255),w,b
  5446  000A00  6E26               	movwf	___awtoft@c+1,c
  5447  000A02  ECD4  F011         	call	___awtoft	;wreg free
  5448  000A06  C025  F0D2         	movff	?___awtoft,___ftmul@f1
  5449  000A0A  C026  F0D3         	movff	?___awtoft+1,___ftmul@f1+1
  5450  000A0E  C027  F0D4         	movff	?___awtoft+2,___ftmul@f1+2
  5451  000A12  ECB4  F00B         	call	___ftmul	;wreg free
  5452  000A16  C0D2  F0F4         	movff	?___ftmul,_measure$2382
  5453  000A1A  C0D3  F0F5         	movff	?___ftmul+1,_measure$2382+1
  5454  000A1E  C0D4  F0F6         	movff	?___ftmul+2,_measure$2382+2
  5455                           
  5456                           ;measure.c: 26: Registers[7]=(((signed int)Registers[12]-Registers[68])*0.01*Registers[6
      +                          9]);
  5457  000A22  0ED7               	movlw	215
  5458  000A24  0100               	movlb	0	; () banked
  5459  000A26  6FD5               	movwf	___ftmul@f2& (0+255),b
  5460  000A28  0E23               	movlw	35
  5461  000A2A  0100               	movlb	0	; () banked
  5462  000A2C  6FD6               	movwf	(___ftmul@f2+1)& (0+255),b
  5463  000A2E  0E3C               	movlw	60
  5464  000A30  0100               	movlb	0	; () banked
  5465  000A32  6FD7               	movwf	(___ftmul@f2+2)& (0+255),b
  5466  000A34  C0F4  F0D2         	movff	_measure$2382,___ftmul@f1
  5467  000A38  C0F5  F0D3         	movff	_measure$2382+1,___ftmul@f1+1
  5468  000A3C  C0F6  F0D4         	movff	_measure$2382+2,___ftmul@f1+2
  5469  000A40  ECB4  F00B         	call	___ftmul	;wreg free
  5470  000A44  C0D2  F0E1         	movff	?___ftmul,___fttol@f1
  5471  000A48  C0D3  F0E2         	movff	?___ftmul+1,___fttol@f1+1
  5472  000A4C  C0D4  F0E3         	movff	?___ftmul+2,___fttol@f1+2
  5473  000A50  EC63  F00C         	call	___fttol	;wreg free
  5474  000A54  0100               	movlb	0	; () banked
  5475  000A56  C0E1  F1D6         	movff	?___fttol,_Registers+14
  5476  000A5A  0100               	movlb	0	; () banked
  5477  000A5C  C0E2  F1D7         	movff	?___fttol+1,_Registers+15
  5478                           
  5479                           ; BSR set to: 0
  5480                           ;measure.c: 29: tmp_watt=Registers[4];
  5481  000A60  EE21  F0D0         	lfsr	2,_Registers+8
  5482  000A64  CFDE F0F7          	movff	postinc2,measure@tmp_watt
  5483  000A68  CFDD F0F8          	movff	postdec2,measure@tmp_watt+1
  5484  000A6C  0100               	movlb	0	; () banked
  5485  000A6E  0E00               	movlw	0
  5486  000A70  BFF8               	btfsc	(measure@tmp_watt+1)& (0+255),7,b
  5487  000A72  0EFF               	movlw	-1
  5488  000A74  6FF9               	movwf	(measure@tmp_watt+2)& (0+255),b
  5489  000A76  6FFA               	movwf	(measure@tmp_watt+3)& (0+255),b
  5490                           
  5491                           ; BSR set to: 0
  5492                           ;measure.c: 30: tmp_watt*=Registers[6];
  5493  000A78  C0F7  F01D         	movff	measure@tmp_watt,___lmul@multiplier
  5494  000A7C  C0F8  F01E         	movff	measure@tmp_watt+1,___lmul@multiplier+1
  5495  000A80  C0F9  F01F         	movff	measure@tmp_watt+2,___lmul@multiplier+2
  5496  000A84  C0FA  F020         	movff	measure@tmp_watt+3,___lmul@multiplier+3
  5497  000A88  EE21  F0D4         	lfsr	2,_Registers+12
  5498  000A8C  CFDE F021          	movff	postinc2,___lmul@multiplicand
  5499  000A90  CFDD F022          	movff	postdec2,___lmul@multiplicand+1
  5500  000A94  0E00               	movlw	0
  5501  000A96  BE22               	btfsc	___lmul@multiplicand+1,7,c
  5502  000A98  0EFF               	movlw	-1
  5503  000A9A  6E23               	movwf	___lmul@multiplicand+2,c
  5504  000A9C  6E24               	movwf	___lmul@multiplicand+3,c
  5505  000A9E  ECE3  F010         	call	___lmul	;wreg free
  5506  000AA2  C01D  F0F7         	movff	?___lmul,measure@tmp_watt
  5507  000AA6  C01E  F0F8         	movff	?___lmul+1,measure@tmp_watt+1
  5508  000AAA  C01F  F0F9         	movff	?___lmul+2,measure@tmp_watt+2
  5509  000AAE  C020  F0FA         	movff	?___lmul+3,measure@tmp_watt+3
  5510                           
  5511                           ;measure.c: 31: tmp_watt/=100;
  5512  000AB2  C0F7  F01D         	movff	measure@tmp_watt,___aldiv@dividend
  5513  000AB6  C0F8  F01E         	movff	measure@tmp_watt+1,___aldiv@dividend+1
  5514  000ABA  C0F9  F01F         	movff	measure@tmp_watt+2,___aldiv@dividend+2
  5515  000ABE  C0FA  F020         	movff	measure@tmp_watt+3,___aldiv@dividend+3
  5516  000AC2  0E64               	movlw	100
  5517  000AC4  6E21               	movwf	___aldiv@divisor,c
  5518  000AC6  0E00               	movlw	0
  5519  000AC8  6E22               	movwf	___aldiv@divisor+1,c
  5520  000ACA  0E00               	movlw	0
  5521  000ACC  6E23               	movwf	___aldiv@divisor+2,c
  5522  000ACE  0E00               	movlw	0
  5523  000AD0  6E24               	movwf	___aldiv@divisor+3,c
  5524  000AD2  EC15  F00E         	call	___aldiv	;wreg free
  5525  000AD6  C01D  F0F7         	movff	?___aldiv,measure@tmp_watt
  5526  000ADA  C01E  F0F8         	movff	?___aldiv+1,measure@tmp_watt+1
  5527  000ADE  C01F  F0F9         	movff	?___aldiv+2,measure@tmp_watt+2
  5528  000AE2  C020  F0FA         	movff	?___aldiv+3,measure@tmp_watt+3
  5529                           
  5530                           ;measure.c: 32: Registers[2]=tmp_watt;
  5531  000AE6  C0F7  F1CC         	movff	measure@tmp_watt,_Registers+4
  5532  000AEA  C0F8  F1CD         	movff	measure@tmp_watt+1,_Registers+5
  5533                           
  5534                           ;measure.c: 34: tmp_watt=Registers[5];
  5535  000AEE  EE21  F0D2         	lfsr	2,_Registers+10
  5536  000AF2  CFDE F0F7          	movff	postinc2,measure@tmp_watt
  5537  000AF6  CFDD F0F8          	movff	postdec2,measure@tmp_watt+1
  5538  000AFA  0100               	movlb	0	; () banked
  5539  000AFC  0E00               	movlw	0
  5540  000AFE  BFF8               	btfsc	(measure@tmp_watt+1)& (0+255),7,b
  5541  000B00  0EFF               	movlw	-1
  5542  000B02  6FF9               	movwf	(measure@tmp_watt+2)& (0+255),b
  5543  000B04  6FFA               	movwf	(measure@tmp_watt+3)& (0+255),b
  5544                           
  5545                           ; BSR set to: 0
  5546                           ;measure.c: 35: tmp_watt*=Registers[6];
  5547  000B06  C0F7  F01D         	movff	measure@tmp_watt,___lmul@multiplier
  5548  000B0A  C0F8  F01E         	movff	measure@tmp_watt+1,___lmul@multiplier+1
  5549  000B0E  C0F9  F01F         	movff	measure@tmp_watt+2,___lmul@multiplier+2
  5550  000B12  C0FA  F020         	movff	measure@tmp_watt+3,___lmul@multiplier+3
  5551  000B16  EE21  F0D4         	lfsr	2,_Registers+12
  5552  000B1A  CFDE F021          	movff	postinc2,___lmul@multiplicand
  5553  000B1E  CFDD F022          	movff	postdec2,___lmul@multiplicand+1
  5554  000B22  0E00               	movlw	0
  5555  000B24  BE22               	btfsc	___lmul@multiplicand+1,7,c
  5556  000B26  0EFF               	movlw	-1
  5557  000B28  6E23               	movwf	___lmul@multiplicand+2,c
  5558  000B2A  6E24               	movwf	___lmul@multiplicand+3,c
  5559  000B2C  ECE3  F010         	call	___lmul	;wreg free
  5560  000B30  C01D  F0F7         	movff	?___lmul,measure@tmp_watt
  5561  000B34  C01E  F0F8         	movff	?___lmul+1,measure@tmp_watt+1
  5562  000B38  C01F  F0F9         	movff	?___lmul+2,measure@tmp_watt+2
  5563  000B3C  C020  F0FA         	movff	?___lmul+3,measure@tmp_watt+3
  5564                           
  5565                           ;measure.c: 36: tmp_watt/=100;
  5566  000B40  C0F7  F01D         	movff	measure@tmp_watt,___aldiv@dividend
  5567  000B44  C0F8  F01E         	movff	measure@tmp_watt+1,___aldiv@dividend+1
  5568  000B48  C0F9  F01F         	movff	measure@tmp_watt+2,___aldiv@dividend+2
  5569  000B4C  C0FA  F020         	movff	measure@tmp_watt+3,___aldiv@dividend+3
  5570  000B50  0E64               	movlw	100
  5571  000B52  6E21               	movwf	___aldiv@divisor,c
  5572  000B54  0E00               	movlw	0
  5573  000B56  6E22               	movwf	___aldiv@divisor+1,c
  5574  000B58  0E00               	movlw	0
  5575  000B5A  6E23               	movwf	___aldiv@divisor+2,c
  5576  000B5C  0E00               	movlw	0
  5577  000B5E  6E24               	movwf	___aldiv@divisor+3,c
  5578  000B60  EC15  F00E         	call	___aldiv	;wreg free
  5579  000B64  C01D  F0F7         	movff	?___aldiv,measure@tmp_watt
  5580  000B68  C01E  F0F8         	movff	?___aldiv+1,measure@tmp_watt+1
  5581  000B6C  C01F  F0F9         	movff	?___aldiv+2,measure@tmp_watt+2
  5582  000B70  C020  F0FA         	movff	?___aldiv+3,measure@tmp_watt+3
  5583                           
  5584                           ;measure.c: 37: Registers[3]=tmp_watt;
  5585  000B74  C0F7  F1CE         	movff	measure@tmp_watt,_Registers+6
  5586  000B78  C0F8  F1CF         	movff	measure@tmp_watt+1,_Registers+7
  5587                           
  5588                           ;measure.c: 42: if(watt1_integ/360000){
  5589  000B7C  C090  F01D         	movff	_watt1_integ,___aldiv@dividend
  5590  000B80  C091  F01E         	movff	_watt1_integ+1,___aldiv@dividend+1
  5591  000B84  C092  F01F         	movff	_watt1_integ+2,___aldiv@dividend+2
  5592  000B88  C093  F020         	movff	_watt1_integ+3,___aldiv@dividend+3
  5593  000B8C  0E40               	movlw	64
  5594  000B8E  6E21               	movwf	___aldiv@divisor,c
  5595  000B90  0E7E               	movlw	126
  5596  000B92  6E22               	movwf	___aldiv@divisor+1,c
  5597  000B94  0E05               	movlw	5
  5598  000B96  6E23               	movwf	___aldiv@divisor+2,c
  5599  000B98  0E00               	movlw	0
  5600  000B9A  6E24               	movwf	___aldiv@divisor+3,c
  5601  000B9C  EC15  F00E         	call	___aldiv	;wreg free
  5602  000BA0  501D               	movf	?___aldiv,w,c
  5603  000BA2  101E               	iorwf	?___aldiv+1,w,c
  5604  000BA4  101F               	iorwf	?___aldiv+2,w,c
  5605  000BA6  1020               	iorwf	?___aldiv+3,w,c
  5606  000BA8  B4D8               	btfsc	status,2,c
  5607  000BAA  D03A               	goto	l4391
  5608                           
  5609                           ;measure.c: 43: Registers[55]-=(signed int)(watt1_integ/360000);
  5610  000BAC  C090  F01D         	movff	_watt1_integ,___aldiv@dividend
  5611  000BB0  C091  F01E         	movff	_watt1_integ+1,___aldiv@dividend+1
  5612  000BB4  C092  F01F         	movff	_watt1_integ+2,___aldiv@dividend+2
  5613  000BB8  C093  F020         	movff	_watt1_integ+3,___aldiv@dividend+3
  5614  000BBC  0E40               	movlw	64
  5615  000BBE  6E21               	movwf	___aldiv@divisor,c
  5616  000BC0  0E7E               	movlw	126
  5617  000BC2  6E22               	movwf	___aldiv@divisor+1,c
  5618  000BC4  0E05               	movlw	5
  5619  000BC6  6E23               	movwf	___aldiv@divisor+2,c
  5620  000BC8  0E00               	movlw	0
  5621  000BCA  6E24               	movwf	___aldiv@divisor+3,c
  5622  000BCC  EC15  F00E         	call	___aldiv	;wreg free
  5623  000BD0  EE22  F036         	lfsr	2,_Registers+110
  5624  000BD4  501D               	movf	?___aldiv,w,c
  5625  000BD6  5EDE               	subwf	postinc2,f,c
  5626  000BD8  501E               	movf	?___aldiv+1,w,c
  5627  000BDA  5ADD               	subwfb	postdec2,f,c
  5628                           
  5629                           ;measure.c: 44: watt1_integ%=360000;
  5630  000BDC  C090  F01D         	movff	_watt1_integ,___almod@dividend
  5631  000BE0  C091  F01E         	movff	_watt1_integ+1,___almod@dividend+1
  5632  000BE4  C092  F01F         	movff	_watt1_integ+2,___almod@dividend+2
  5633  000BE8  C093  F020         	movff	_watt1_integ+3,___almod@dividend+3
  5634  000BEC  0E40               	movlw	64
  5635  000BEE  6E21               	movwf	___almod@divisor,c
  5636  000BF0  0E7E               	movlw	126
  5637  000BF2  6E22               	movwf	___almod@divisor+1,c
  5638  000BF4  0E05               	movlw	5
  5639  000BF6  6E23               	movwf	___almod@divisor+2,c
  5640  000BF8  0E00               	movlw	0
  5641  000BFA  6E24               	movwf	___almod@divisor+3,c
  5642  000BFC  ECDE  F00E         	call	___almod	;wreg free
  5643  000C00  C01D  F090         	movff	?___almod,_watt1_integ
  5644  000C04  C01E  F091         	movff	?___almod+1,_watt1_integ+1
  5645  000C08  C01F  F092         	movff	?___almod+2,_watt1_integ+2
  5646  000C0C  C020  F093         	movff	?___almod+3,_watt1_integ+3
  5647                           
  5648                           ;measure.c: 45: save_EEPROM(&Registers[50],50);
  5649  000C10  0E2C               	movlw	low (_Registers+100)
  5650  000C12  6E1F               	movwf	save_EEPROM@point,c
  5651  000C14  0E02               	movlw	high (_Registers+100)
  5652  000C16  6E20               	movwf	save_EEPROM@point+1,c
  5653  000C18  0E32               	movlw	50
  5654  000C1A  6E21               	movwf	save_EEPROM@len,c
  5655  000C1C  EC13  F011         	call	_save_EEPROM	;wreg free
  5656  000C20                     l4391:
  5657                           
  5658                           ;measure.c: 46: }
  5659                           ;measure.c: 48: if(watt2_integ/360000){
  5660  000C20  C094  F01D         	movff	_watt2_integ,___aldiv@dividend
  5661  000C24  C095  F01E         	movff	_watt2_integ+1,___aldiv@dividend+1
  5662  000C28  C096  F01F         	movff	_watt2_integ+2,___aldiv@dividend+2
  5663  000C2C  C097  F020         	movff	_watt2_integ+3,___aldiv@dividend+3
  5664  000C30  0E40               	movlw	64
  5665  000C32  6E21               	movwf	___aldiv@divisor,c
  5666  000C34  0E7E               	movlw	126
  5667  000C36  6E22               	movwf	___aldiv@divisor+1,c
  5668  000C38  0E05               	movlw	5
  5669  000C3A  6E23               	movwf	___aldiv@divisor+2,c
  5670  000C3C  0E00               	movlw	0
  5671  000C3E  6E24               	movwf	___aldiv@divisor+3,c
  5672  000C40  EC15  F00E         	call	___aldiv	;wreg free
  5673  000C44  501D               	movf	?___aldiv,w,c
  5674  000C46  101E               	iorwf	?___aldiv+1,w,c
  5675  000C48  101F               	iorwf	?___aldiv+2,w,c
  5676  000C4A  1020               	iorwf	?___aldiv+3,w,c
  5677  000C4C  B4D8               	btfsc	status,2,c
  5678  000C4E  0012               	return	
  5679                           
  5680                           ;measure.c: 49: Registers[56]+=(signed int)(watt2_integ/360000);
  5681  000C50  C094  F01D         	movff	_watt2_integ,___aldiv@dividend
  5682  000C54  C095  F01E         	movff	_watt2_integ+1,___aldiv@dividend+1
  5683  000C58  C096  F01F         	movff	_watt2_integ+2,___aldiv@dividend+2
  5684  000C5C  C097  F020         	movff	_watt2_integ+3,___aldiv@dividend+3
  5685  000C60  0E40               	movlw	64
  5686  000C62  6E21               	movwf	___aldiv@divisor,c
  5687  000C64  0E7E               	movlw	126
  5688  000C66  6E22               	movwf	___aldiv@divisor+1,c
  5689  000C68  0E05               	movlw	5
  5690  000C6A  6E23               	movwf	___aldiv@divisor+2,c
  5691  000C6C  0E00               	movlw	0
  5692  000C6E  6E24               	movwf	___aldiv@divisor+3,c
  5693  000C70  EC15  F00E         	call	___aldiv	;wreg free
  5694  000C74  EE22  F038         	lfsr	2,_Registers+112
  5695  000C78  501D               	movf	?___aldiv,w,c
  5696  000C7A  26DE               	addwf	postinc2,f,c
  5697  000C7C  501E               	movf	?___aldiv+1,w,c
  5698  000C7E  22DD               	addwfc	postdec2,f,c
  5699                           
  5700                           ;measure.c: 50: watt2_integ%=360000;
  5701  000C80  C094  F01D         	movff	_watt2_integ,___almod@dividend
  5702  000C84  C095  F01E         	movff	_watt2_integ+1,___almod@dividend+1
  5703  000C88  C096  F01F         	movff	_watt2_integ+2,___almod@dividend+2
  5704  000C8C  C097  F020         	movff	_watt2_integ+3,___almod@dividend+3
  5705  000C90  0E40               	movlw	64
  5706  000C92  6E21               	movwf	___almod@divisor,c
  5707  000C94  0E7E               	movlw	126
  5708  000C96  6E22               	movwf	___almod@divisor+1,c
  5709  000C98  0E05               	movlw	5
  5710  000C9A  6E23               	movwf	___almod@divisor+2,c
  5711  000C9C  0E00               	movlw	0
  5712  000C9E  6E24               	movwf	___almod@divisor+3,c
  5713  000CA0  ECDE  F00E         	call	___almod	;wreg free
  5714  000CA4  C01D  F094         	movff	?___almod,_watt2_integ
  5715  000CA8  C01E  F095         	movff	?___almod+1,_watt2_integ+1
  5716  000CAC  C01F  F096         	movff	?___almod+2,_watt2_integ+2
  5717  000CB0  C020  F097         	movff	?___almod+3,_watt2_integ+3
  5718                           
  5719                           ;measure.c: 51: save_EEPROM(&Registers[50],50);
  5720  000CB4  0E2C               	movlw	low (_Registers+100)
  5721  000CB6  6E1F               	movwf	save_EEPROM@point,c
  5722  000CB8  0E02               	movlw	high (_Registers+100)
  5723  000CBA  6E20               	movwf	save_EEPROM@point+1,c
  5724  000CBC  0E32               	movlw	50
  5725  000CBE  6E21               	movwf	save_EEPROM@len,c
  5726  000CC0  EC13  F011         	call	_save_EEPROM	;wreg free
  5727  000CC4  0012               	return	
  5728  000CC6                     __end_of_measure:
  5729                           	opt stack 0
  5730                           tblptru	equ	0xFF8
  5731                           prodh	equ	0xFF4
  5732                           prodl	equ	0xFF3
  5733                           intcon	equ	0xFF2
  5734                           intcon2	equ	0xFF1
  5735                           intcon3	equ	0xFF0
  5736                           postinc0	equ	0xFEE
  5737                           wreg	equ	0xFE8
  5738                           indf1	equ	0xFE7
  5739                           postinc1	equ	0xFE6
  5740                           postdec1	equ	0xFE5
  5741                           fsr1h	equ	0xFE2
  5742                           fsr1l	equ	0xFE1
  5743                           indf2	equ	0xFDF
  5744                           postinc2	equ	0xFDE
  5745                           postdec2	equ	0xFDD
  5746                           plusw2	equ	0xFDB
  5747                           fsr2h	equ	0xFDA
  5748                           fsr2l	equ	0xFD9
  5749                           status	equ	0xFD8
  5750                           
  5751 ;; *************** function _save_EEPROM *****************
  5752 ;; Defined at:
  5753 ;;		line 45 in file "eeprom.c"
  5754 ;; Parameters:    Size  Location     Type
  5755 ;;  point           2   30[COMRAM] PTR int 
  5756 ;;		 -> Registers(400), 
  5757 ;;  len             1   32[COMRAM] unsigned char 
  5758 ;; Auto vars:     Size  Location     Type
  5759 ;;  tmp_8bit        2   35[COMRAM] unsigned char [2]
  5760 ;;  tmp_16bit       2   33[COMRAM] PTR unsigned int 
  5761 ;;		 -> save_EEPROM@tmp_8bit(2), 
  5762 ;;  addr            1   37[COMRAM] unsigned char 
  5763 ;; Return value:  Size  Location     Type
  5764 ;;                  1    wreg      void 
  5765 ;; Registers used:
  5766 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5767 ;; Tracked objects:
  5768 ;;		On entry : 0/0
  5769 ;;		On exit  : 0/0
  5770 ;;		Unchanged: 0/0
  5771 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5772 ;;      Params:         3       0       0       0       0       0       0
  5773 ;;      Locals:         5       0       0       0       0       0       0
  5774 ;;      Temps:          0       0       0       0       0       0       0
  5775 ;;      Totals:         8       0       0       0       0       0       0
  5776 ;;Total ram usage:        8 bytes
  5777 ;; Hardware stack levels used:    1
  5778 ;; Hardware stack levels required when called:    4
  5779 ;; This function calls:
  5780 ;;		_write_eeprom
  5781 ;; This function is called by:
  5782 ;;		_measure
  5783 ;;		_main
  5784 ;; This function uses a non-reentrant model
  5785 ;;
  5786                           
  5787                           	psect	text28
  5788  002226                     __ptext28:
  5789                           	opt stack 0
  5790  002226                     _save_EEPROM:
  5791                           	opt stack 26
  5792                           
  5793                           ;eeprom.c: 46: unsigned char addr;
  5794                           ;eeprom.c: 47: unsigned char tmp_8bit[2];
  5795                           ;eeprom.c: 48: unsigned int * tmp_16bit;
  5796                           ;eeprom.c: 49: tmp_16bit=&tmp_8bit[0];
  5797                           
  5798                           ;incstack = 0
  5799  002226  0E24               	movlw	low save_EEPROM@tmp_8bit
  5800  002228  6E22               	movwf	save_EEPROM@tmp_16bit,c
  5801  00222A  0E00               	movlw	high save_EEPROM@tmp_8bit
  5802  00222C  6E23               	movwf	save_EEPROM@tmp_16bit+1,c
  5803                           
  5804                           ;eeprom.c: 50: for(addr=0;addr<len;addr++){
  5805  00222E  0E00               	movlw	0
  5806  002230  6E26               	movwf	save_EEPROM@addr,c
  5807  002232  D01F               	goto	l2783
  5808  002234                     l2773:
  5809                           
  5810                           ;eeprom.c: 51: *tmp_16bit=*point;
  5811  002234  C01F  FFD9         	movff	save_EEPROM@point,fsr2l
  5812  002238  C020  FFDA         	movff	save_EEPROM@point+1,fsr2h
  5813  00223C  C022  FFE1         	movff	save_EEPROM@tmp_16bit,fsr1l
  5814  002240  C023  FFE2         	movff	save_EEPROM@tmp_16bit+1,fsr1h
  5815  002244  CFDE FFE6          	movff	postinc2,postinc1
  5816  002248  CFDD FFE5          	movff	postdec2,postdec1
  5817                           
  5818                           ;eeprom.c: 52: write_eeprom (addr*2,tmp_8bit[1]);
  5819  00224C  C025  F01D         	movff	save_EEPROM@tmp_8bit+1,write_eeprom@value
  5820  002250  5026               	movf	save_EEPROM@addr,w,c
  5821  002252  0D02               	mullw	2
  5822  002254  50F3               	movf	prodl,w,c
  5823  002256  EC5A  F012         	call	_write_eeprom
  5824                           
  5825                           ;eeprom.c: 53: write_eeprom (addr*2+1,tmp_8bit[0]);
  5826  00225A  C024  F01D         	movff	save_EEPROM@tmp_8bit,write_eeprom@value
  5827  00225E  5026               	movf	save_EEPROM@addr,w,c
  5828  002260  0D02               	mullw	2
  5829  002262  28F3               	incf	prodl,w,c
  5830  002264  EC5A  F012         	call	_write_eeprom
  5831                           
  5832                           ;eeprom.c: 54: point++;
  5833  002268  0E02               	movlw	2
  5834  00226A  261F               	addwf	save_EEPROM@point,f,c
  5835  00226C  0E00               	movlw	0
  5836  00226E  2220               	addwfc	save_EEPROM@point+1,f,c
  5837  002270  2A26               	incf	save_EEPROM@addr,f,c
  5838  002272                     l2783:
  5839  002272  5021               	movf	save_EEPROM@len,w,c
  5840  002274  5C26               	subwf	save_EEPROM@addr,w,c
  5841  002276  B0D8               	btfsc	status,0,c
  5842  002278  0012               	return	
  5843  00227A  D7DC               	goto	l2773
  5844  00227C                     __end_of_save_EEPROM:
  5845                           	opt stack 0
  5846                           tblptru	equ	0xFF8
  5847                           prodh	equ	0xFF4
  5848                           prodl	equ	0xFF3
  5849                           intcon	equ	0xFF2
  5850                           intcon2	equ	0xFF1
  5851                           intcon3	equ	0xFF0
  5852                           postinc0	equ	0xFEE
  5853                           wreg	equ	0xFE8
  5854                           indf1	equ	0xFE7
  5855                           postinc1	equ	0xFE6
  5856                           postdec1	equ	0xFE5
  5857                           fsr1h	equ	0xFE2
  5858                           fsr1l	equ	0xFE1
  5859                           indf2	equ	0xFDF
  5860                           postinc2	equ	0xFDE
  5861                           postdec2	equ	0xFDD
  5862                           plusw2	equ	0xFDB
  5863                           fsr2h	equ	0xFDA
  5864                           fsr2l	equ	0xFD9
  5865                           status	equ	0xFD8
  5866                           
  5867 ;; *************** function _write_eeprom *****************
  5868 ;; Defined at:
  5869 ;;		line 8 in file "eeprom.c"
  5870 ;; Parameters:    Size  Location     Type
  5871 ;;  addr            1    wreg     unsigned char 
  5872 ;;  value           1   28[COMRAM] unsigned char 
  5873 ;; Auto vars:     Size  Location     Type
  5874 ;;  addr            1   29[COMRAM] unsigned char 
  5875 ;; Return value:  Size  Location     Type
  5876 ;;                  1    wreg      void 
  5877 ;; Registers used:
  5878 ;;		wreg, status,2
  5879 ;; Tracked objects:
  5880 ;;		On entry : 0/0
  5881 ;;		On exit  : 0/0
  5882 ;;		Unchanged: 0/0
  5883 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5884 ;;      Params:         1       0       0       0       0       0       0
  5885 ;;      Locals:         1       0       0       0       0       0       0
  5886 ;;      Temps:          0       0       0       0       0       0       0
  5887 ;;      Totals:         2       0       0       0       0       0       0
  5888 ;;Total ram usage:        2 bytes
  5889 ;; Hardware stack levels used:    1
  5890 ;; Hardware stack levels required when called:    3
  5891 ;; This function calls:
  5892 ;;		Nothing
  5893 ;; This function is called by:
  5894 ;;		_save_EEPROM
  5895 ;; This function uses a non-reentrant model
  5896 ;;
  5897                           
  5898                           	psect	text29
  5899  0024B4                     __ptext29:
  5900                           	opt stack 0
  5901  0024B4                     _write_eeprom:
  5902                           	opt stack 26
  5903                           
  5904                           ;incstack = 0
  5905                           ;write_eeprom@addr stored from wreg
  5906  0024B4  6E1E               	movwf	write_eeprom@addr,c
  5907                           
  5908                           ;eeprom.c: 9: EEADR=addr;
  5909  0024B6  C01E  FFA9         	movff	write_eeprom@addr,4009	;volatile
  5910                           
  5911                           ;eeprom.c: 10: EEDATA=value;
  5912  0024BA  C01D  FFA8         	movff	write_eeprom@value,4008	;volatile
  5913                           
  5914                           ;eeprom.c: 11: EECON1bits.EEPGD=0;
  5915  0024BE  9EA6               	bcf	4006,7,c	;volatile
  5916                           
  5917                           ;eeprom.c: 12: EECON1bits.CFGS=0;
  5918  0024C0  9CA6               	bcf	4006,6,c	;volatile
  5919                           
  5920                           ;eeprom.c: 13: GIE=0;
  5921  0024C2  9EF2               	bcf	intcon,7,c	;volatile
  5922                           
  5923                           ;eeprom.c: 14: EECON1bits.WREN=1;
  5924  0024C4  84A6               	bsf	4006,2,c	;volatile
  5925                           
  5926                           ;eeprom.c: 15: EECON2=0x55;
  5927  0024C6  0E55               	movlw	85
  5928  0024C8  6EA7               	movwf	4007,c	;volatile
  5929                           
  5930                           ;eeprom.c: 16: EECON2=0x0AA;
  5931  0024CA  0EAA               	movlw	170
  5932  0024CC  6EA7               	movwf	4007,c	;volatile
  5933                           
  5934                           ;eeprom.c: 17: EECON1bits.WR=1;
  5935  0024CE  82A6               	bsf	4006,1,c	;volatile
  5936                           
  5937                           ;eeprom.c: 18: GIE=1;
  5938  0024D0  8EF2               	bsf	intcon,7,c	;volatile
  5939  0024D2                     l471:
  5940                           
  5941                           ;eeprom.c: 22: {
  5942                           ;eeprom.c: 23: __nop();
  5943  0024D2  F000               	nop	
  5944  0024D4  A8A1               	btfss	4001,4,c	;volatile
  5945  0024D6  D7FD               	goto	l471
  5946                           
  5947                           ;eeprom.c: 24: }
  5948                           ;eeprom.c: 25: EECON1bits.WREN=0;
  5949  0024D8  94A6               	bcf	4006,2,c	;volatile
  5950                           
  5951                           ;eeprom.c: 26: PIR2bits.EEIF=0;
  5952  0024DA  98A1               	bcf	4001,4,c	;volatile
  5953  0024DC  0012               	return		;funcret
  5954  0024DE                     __end_of_write_eeprom:
  5955                           	opt stack 0
  5956                           tblptru	equ	0xFF8
  5957                           prodh	equ	0xFF4
  5958                           prodl	equ	0xFF3
  5959                           intcon	equ	0xFF2
  5960                           intcon2	equ	0xFF1
  5961                           intcon3	equ	0xFF0
  5962                           postinc0	equ	0xFEE
  5963                           wreg	equ	0xFE8
  5964                           indf1	equ	0xFE7
  5965                           postinc1	equ	0xFE6
  5966                           postdec1	equ	0xFE5
  5967                           fsr1h	equ	0xFE2
  5968                           fsr1l	equ	0xFE1
  5969                           indf2	equ	0xFDF
  5970                           postinc2	equ	0xFDE
  5971                           postdec2	equ	0xFDD
  5972                           plusw2	equ	0xFDB
  5973                           fsr2h	equ	0xFDA
  5974                           fsr2l	equ	0xFD9
  5975                           status	equ	0xFD8
  5976                           
  5977 ;; *************** function ___lmul *****************
  5978 ;; Defined at:
  5979 ;;		line 15 in file "/opt/microchip/xc8/v1.38/sources/common/Umul32.c"
  5980 ;; Parameters:    Size  Location     Type
  5981 ;;  multiplier      4   28[COMRAM] unsigned long 
  5982 ;;  multiplicand    4   32[COMRAM] unsigned long 
  5983 ;; Auto vars:     Size  Location     Type
  5984 ;;  product         4    0[BANK0 ] unsigned long 
  5985 ;; Return value:  Size  Location     Type
  5986 ;;                  4   28[COMRAM] unsigned long 
  5987 ;; Registers used:
  5988 ;;		wreg, status,2, status,0
  5989 ;; Tracked objects:
  5990 ;;		On entry : 0/0
  5991 ;;		On exit  : 0/0
  5992 ;;		Unchanged: 0/0
  5993 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5994 ;;      Params:         8       0       0       0       0       0       0
  5995 ;;      Locals:         0       4       0       0       0       0       0
  5996 ;;      Temps:          0       0       0       0       0       0       0
  5997 ;;      Totals:         8       4       0       0       0       0       0
  5998 ;;Total ram usage:       12 bytes
  5999 ;; Hardware stack levels used:    1
  6000 ;; Hardware stack levels required when called:    3
  6001 ;; This function calls:
  6002 ;;		Nothing
  6003 ;; This function is called by:
  6004 ;;		_measure
  6005 ;; This function uses a non-reentrant model
  6006 ;;
  6007                           
  6008                           	psect	text30
  6009  0021C6                     __ptext30:
  6010                           	opt stack 0
  6011  0021C6                     ___lmul:
  6012                           	opt stack 26
  6013                           
  6014                           ;incstack = 0
  6015  0021C6  0E00               	movlw	0
  6016  0021C8  0100               	movlb	0	; () banked
  6017  0021CA  6FD1               	movwf	___lmul@product& (0+255),b
  6018  0021CC  0E00               	movlw	0
  6019  0021CE  6FD2               	movwf	(___lmul@product+1)& (0+255),b
  6020  0021D0  0E00               	movlw	0
  6021  0021D2  6FD3               	movwf	(___lmul@product+2)& (0+255),b
  6022  0021D4  0E00               	movlw	0
  6023  0021D6  6FD4               	movwf	(___lmul@product+3)& (0+255),b
  6024  0021D8                     l4043:
  6025  0021D8  A01D               	btfss	___lmul@multiplier,0,c
  6026  0021DA  D00C               	goto	l4047
  6027  0021DC  5021               	movf	___lmul@multiplicand,w,c
  6028  0021DE  0100               	movlb	0	; () banked
  6029  0021E0  27D1               	addwf	___lmul@product& (0+255),f,b
  6030  0021E2  5022               	movf	___lmul@multiplicand+1,w,c
  6031  0021E4  0100               	movlb	0	; () banked
  6032  0021E6  23D2               	addwfc	(___lmul@product+1)& (0+255),f,b
  6033  0021E8  5023               	movf	___lmul@multiplicand+2,w,c
  6034  0021EA  0100               	movlb	0	; () banked
  6035  0021EC  23D3               	addwfc	(___lmul@product+2)& (0+255),f,b
  6036  0021EE  5024               	movf	___lmul@multiplicand+3,w,c
  6037  0021F0  0100               	movlb	0	; () banked
  6038  0021F2  23D4               	addwfc	(___lmul@product+3)& (0+255),f,b
  6039  0021F4                     l4047:
  6040  0021F4  90D8               	bcf	status,0,c
  6041  0021F6  3621               	rlcf	___lmul@multiplicand,f,c
  6042  0021F8  3622               	rlcf	___lmul@multiplicand+1,f,c
  6043  0021FA  3623               	rlcf	___lmul@multiplicand+2,f,c
  6044  0021FC  3624               	rlcf	___lmul@multiplicand+3,f,c
  6045  0021FE  90D8               	bcf	status,0,c
  6046  002200  3220               	rrcf	___lmul@multiplier+3,f,c
  6047  002202  321F               	rrcf	___lmul@multiplier+2,f,c
  6048  002204  321E               	rrcf	___lmul@multiplier+1,f,c
  6049  002206  321D               	rrcf	___lmul@multiplier,f,c
  6050  002208  501D               	movf	___lmul@multiplier,w,c
  6051  00220A  101E               	iorwf	___lmul@multiplier+1,w,c
  6052  00220C  101F               	iorwf	___lmul@multiplier+2,w,c
  6053  00220E  1020               	iorwf	___lmul@multiplier+3,w,c
  6054  002210  A4D8               	btfss	status,2,c
  6055  002212  D7E2               	goto	l4043
  6056  002214  C0D1  F01D         	movff	___lmul@product,?___lmul
  6057  002218  C0D2  F01E         	movff	___lmul@product+1,?___lmul+1
  6058  00221C  C0D3  F01F         	movff	___lmul@product+2,?___lmul+2
  6059  002220  C0D4  F020         	movff	___lmul@product+3,?___lmul+3
  6060  002224  0012               	return		;funcret
  6061  002226                     __end_of___lmul:
  6062                           	opt stack 0
  6063                           tblptru	equ	0xFF8
  6064                           prodh	equ	0xFF4
  6065                           prodl	equ	0xFF3
  6066                           intcon	equ	0xFF2
  6067                           intcon2	equ	0xFF1
  6068                           intcon3	equ	0xFF0
  6069                           postinc0	equ	0xFEE
  6070                           wreg	equ	0xFE8
  6071                           indf1	equ	0xFE7
  6072                           postinc1	equ	0xFE6
  6073                           postdec1	equ	0xFE5
  6074                           fsr1h	equ	0xFE2
  6075                           fsr1l	equ	0xFE1
  6076                           indf2	equ	0xFDF
  6077                           postinc2	equ	0xFDE
  6078                           postdec2	equ	0xFDD
  6079                           plusw2	equ	0xFDB
  6080                           fsr2h	equ	0xFDA
  6081                           fsr2l	equ	0xFD9
  6082                           status	equ	0xFD8
  6083                           
  6084 ;; *************** function ___lldiv *****************
  6085 ;; Defined at:
  6086 ;;		line 8 in file "/opt/microchip/xc8/v1.38/sources/common/lldiv.c"
  6087 ;; Parameters:    Size  Location     Type
  6088 ;;  dividend        4   28[COMRAM] unsigned long 
  6089 ;;  divisor         4   32[COMRAM] unsigned long 
  6090 ;; Auto vars:     Size  Location     Type
  6091 ;;  quotient        4    0[BANK0 ] unsigned long 
  6092 ;;  counter         1    4[BANK0 ] unsigned char 
  6093 ;; Return value:  Size  Location     Type
  6094 ;;                  4   28[COMRAM] unsigned long 
  6095 ;; Registers used:
  6096 ;;		wreg, status,2, status,0
  6097 ;; Tracked objects:
  6098 ;;		On entry : 0/0
  6099 ;;		On exit  : 0/0
  6100 ;;		Unchanged: 0/0
  6101 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6102 ;;      Params:         8       0       0       0       0       0       0
  6103 ;;      Locals:         0       5       0       0       0       0       0
  6104 ;;      Temps:          0       0       0       0       0       0       0
  6105 ;;      Totals:         8       5       0       0       0       0       0
  6106 ;;Total ram usage:       13 bytes
  6107 ;; Hardware stack levels used:    1
  6108 ;; Hardware stack levels required when called:    3
  6109 ;; This function calls:
  6110 ;;		Nothing
  6111 ;; This function is called by:
  6112 ;;		_measure
  6113 ;; This function uses a non-reentrant model
  6114 ;;
  6115                           
  6116                           	psect	text31
  6117  001F00                     __ptext31:
  6118                           	opt stack 0
  6119  001F00                     ___lldiv:
  6120                           	opt stack 26
  6121                           
  6122                           ;incstack = 0
  6123  001F00  0E00               	movlw	0
  6124  001F02  0100               	movlb	0	; () banked
  6125  001F04  6FD1               	movwf	___lldiv@quotient& (0+255),b
  6126  001F06  0E00               	movlw	0
  6127  001F08  6FD2               	movwf	(___lldiv@quotient+1)& (0+255),b
  6128  001F0A  0E00               	movlw	0
  6129  001F0C  6FD3               	movwf	(___lldiv@quotient+2)& (0+255),b
  6130  001F0E  0E00               	movlw	0
  6131  001F10  6FD4               	movwf	(___lldiv@quotient+3)& (0+255),b
  6132                           
  6133                           ; BSR set to: 0
  6134  001F12  5021               	movf	___lldiv@divisor,w,c
  6135  001F14  1022               	iorwf	___lldiv@divisor+1,w,c
  6136  001F16  1023               	iorwf	___lldiv@divisor+2,w,c
  6137  001F18  1024               	iorwf	___lldiv@divisor+3,w,c
  6138  001F1A  B4D8               	btfsc	status,2,c
  6139  001F1C  D02F               	goto	l961
  6140                           
  6141                           ; BSR set to: 0
  6142  001F1E  0E01               	movlw	1
  6143  001F20  0100               	movlb	0	; () banked
  6144  001F22  6FD5               	movwf	___lldiv@counter& (0+255),b
  6145  001F24  D007               	goto	l4209
  6146  001F26                     l4207:
  6147                           
  6148                           ; BSR set to: 0
  6149  001F26  90D8               	bcf	status,0,c
  6150  001F28  3621               	rlcf	___lldiv@divisor,f,c
  6151  001F2A  3622               	rlcf	___lldiv@divisor+1,f,c
  6152  001F2C  3623               	rlcf	___lldiv@divisor+2,f,c
  6153  001F2E  3624               	rlcf	___lldiv@divisor+3,f,c
  6154  001F30  0100               	movlb	0	; () banked
  6155  001F32  2BD5               	incf	___lldiv@counter& (0+255),f,b
  6156  001F34                     l4209:
  6157                           
  6158                           ; BSR set to: 0
  6159  001F34  AE24               	btfss	___lldiv@divisor+3,7,c
  6160  001F36  D7F7               	goto	l4207
  6161  001F38                     l4211:
  6162                           
  6163                           ; BSR set to: 0
  6164  001F38  0100               	movlb	0	; () banked
  6165  001F3A  90D8               	bcf	status,0,c
  6166  001F3C  37D1               	rlcf	___lldiv@quotient& (0+255),f,b
  6167  001F3E  37D2               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
  6168  001F40  37D3               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
  6169  001F42  37D4               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
  6170                           
  6171                           ; BSR set to: 0
  6172  001F44  5021               	movf	___lldiv@divisor,w,c
  6173  001F46  5C1D               	subwf	___lldiv@dividend,w,c
  6174  001F48  5022               	movf	___lldiv@divisor+1,w,c
  6175  001F4A  581E               	subwfb	___lldiv@dividend+1,w,c
  6176  001F4C  5023               	movf	___lldiv@divisor+2,w,c
  6177  001F4E  581F               	subwfb	___lldiv@dividend+2,w,c
  6178  001F50  5024               	movf	___lldiv@divisor+3,w,c
  6179  001F52  5820               	subwfb	___lldiv@dividend+3,w,c
  6180  001F54  A0D8               	btfss	status,0,c
  6181  001F56  D00A               	goto	l4219
  6182                           
  6183                           ; BSR set to: 0
  6184  001F58  5021               	movf	___lldiv@divisor,w,c
  6185  001F5A  5E1D               	subwf	___lldiv@dividend,f,c
  6186  001F5C  5022               	movf	___lldiv@divisor+1,w,c
  6187  001F5E  5A1E               	subwfb	___lldiv@dividend+1,f,c
  6188  001F60  5023               	movf	___lldiv@divisor+2,w,c
  6189  001F62  5A1F               	subwfb	___lldiv@dividend+2,f,c
  6190  001F64  5024               	movf	___lldiv@divisor+3,w,c
  6191  001F66  5A20               	subwfb	___lldiv@dividend+3,f,c
  6192                           
  6193                           ; BSR set to: 0
  6194  001F68  0100               	movlb	0	; () banked
  6195  001F6A  81D1               	bsf	___lldiv@quotient& (0+255),0,b
  6196  001F6C                     l4219:
  6197                           
  6198                           ; BSR set to: 0
  6199  001F6C  90D8               	bcf	status,0,c
  6200  001F6E  3224               	rrcf	___lldiv@divisor+3,f,c
  6201  001F70  3223               	rrcf	___lldiv@divisor+2,f,c
  6202  001F72  3222               	rrcf	___lldiv@divisor+1,f,c
  6203  001F74  3221               	rrcf	___lldiv@divisor,f,c
  6204                           
  6205                           ; BSR set to: 0
  6206  001F76  0100               	movlb	0	; () banked
  6207  001F78  2FD5               	decfsz	___lldiv@counter& (0+255),f,b
  6208  001F7A  D7DE               	goto	l4211
  6209  001F7C                     l961:
  6210                           
  6211                           ; BSR set to: 0
  6212  001F7C  C0D1  F01D         	movff	___lldiv@quotient,?___lldiv
  6213  001F80  C0D2  F01E         	movff	___lldiv@quotient+1,?___lldiv+1
  6214  001F84  C0D3  F01F         	movff	___lldiv@quotient+2,?___lldiv+2
  6215  001F88  C0D4  F020         	movff	___lldiv@quotient+3,?___lldiv+3
  6216                           
  6217                           ; BSR set to: 0
  6218  001F8C  0012               	return		;funcret
  6219  001F8E                     __end_of___lldiv:
  6220                           	opt stack 0
  6221                           tblptru	equ	0xFF8
  6222                           prodh	equ	0xFF4
  6223                           prodl	equ	0xFF3
  6224                           intcon	equ	0xFF2
  6225                           intcon2	equ	0xFF1
  6226                           intcon3	equ	0xFF0
  6227                           postinc0	equ	0xFEE
  6228                           wreg	equ	0xFE8
  6229                           indf1	equ	0xFE7
  6230                           postinc1	equ	0xFE6
  6231                           postdec1	equ	0xFE5
  6232                           fsr1h	equ	0xFE2
  6233                           fsr1l	equ	0xFE1
  6234                           indf2	equ	0xFDF
  6235                           postinc2	equ	0xFDE
  6236                           postdec2	equ	0xFDD
  6237                           plusw2	equ	0xFDB
  6238                           fsr2h	equ	0xFDA
  6239                           fsr2l	equ	0xFD9
  6240                           status	equ	0xFD8
  6241                           
  6242 ;; *************** function ___fttol *****************
  6243 ;; Defined at:
  6244 ;;		line 44 in file "/opt/microchip/xc8/v1.38/sources/common/fttol.c"
  6245 ;; Parameters:    Size  Location     Type
  6246 ;;  f1              3   16[BANK0 ] float 
  6247 ;; Auto vars:     Size  Location     Type
  6248 ;;  lval            4   26[BANK0 ] unsigned long 
  6249 ;;  exp1            1   30[BANK0 ] unsigned char 
  6250 ;;  sign1           1   25[BANK0 ] unsigned char 
  6251 ;; Return value:  Size  Location     Type
  6252 ;;                  4   16[BANK0 ] long 
  6253 ;; Registers used:
  6254 ;;		wreg, status,2, status,0
  6255 ;; Tracked objects:
  6256 ;;		On entry : 0/0
  6257 ;;		On exit  : 0/0
  6258 ;;		Unchanged: 0/0
  6259 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6260 ;;      Params:         0       4       0       0       0       0       0
  6261 ;;      Locals:         0       6       0       0       0       0       0
  6262 ;;      Temps:          0       5       0       0       0       0       0
  6263 ;;      Totals:         0      15       0       0       0       0       0
  6264 ;;Total ram usage:       15 bytes
  6265 ;; Hardware stack levels used:    1
  6266 ;; Hardware stack levels required when called:    3
  6267 ;; This function calls:
  6268 ;;		Nothing
  6269 ;; This function is called by:
  6270 ;;		_measure
  6271 ;; This function uses a non-reentrant model
  6272 ;;
  6273                           
  6274                           	psect	text32
  6275  0018C6                     __ptext32:
  6276                           	opt stack 0
  6277  0018C6                     ___fttol:
  6278                           	opt stack 26
  6279                           
  6280                           ; BSR set to: 0
  6281                           ;incstack = 0
  6282  0018C6  C0E3  F0E5         	movff	___fttol@f1+2,??___fttol
  6283  0018CA  0100               	movlb	0	; () banked
  6284  0018CC  6BE6               	clrf	(??___fttol+1)& (0+255),b
  6285  0018CE  6BE7               	clrf	(??___fttol+2)& (0+255),b
  6286  0018D0  0100               	movlb	0	; () banked
  6287  0018D2  35E2               	rlcf	(___fttol@f1+1)& (0+255),w,b
  6288  0018D4  0100               	movlb	0	; () banked
  6289  0018D6  37E5               	rlcf	??___fttol& (0+255),f,b
  6290  0018D8  E301               	bnc	u3271
  6291  0018DA  81E6               	bsf	(??___fttol+1)& (0+255),0,b
  6292  0018DC                     u3271:
  6293  0018DC  0100               	movlb	0	; () banked
  6294  0018DE  51E5               	movf	??___fttol& (0+255),w,b
  6295  0018E0  0100               	movlb	0	; () banked
  6296  0018E2  6FEF               	movwf	___fttol@exp1& (0+255),b
  6297  0018E4  0100               	movlb	0	; () banked
  6298  0018E6  51EF               	movf	___fttol@exp1& (0+255),w,b
  6299  0018E8  A4D8               	btfss	status,2,c
  6300  0018EA  D00A               	goto	l4161
  6301                           
  6302                           ; BSR set to: 0
  6303  0018EC  0E00               	movlw	0
  6304  0018EE  0100               	movlb	0	; () banked
  6305  0018F0  6FE1               	movwf	?___fttol& (0+255),b
  6306  0018F2  0E00               	movlw	0
  6307  0018F4  6FE2               	movwf	(?___fttol+1)& (0+255),b
  6308  0018F6  0E00               	movlw	0
  6309  0018F8  6FE3               	movwf	(?___fttol+2)& (0+255),b
  6310  0018FA  0E00               	movlw	0
  6311  0018FC  6FE4               	movwf	(?___fttol+3)& (0+255),b
  6312                           
  6313                           ; BSR set to: 0
  6314  0018FE  0012               	return	
  6315  001900                     l4161:
  6316                           
  6317                           ; BSR set to: 0
  6318  001900  0E17               	movlw	23
  6319  001902  0100               	movlb	0	; () banked
  6320  001904  6FE5               	movwf	??___fttol& (0+255),b
  6321  001906  C0E1  F0E6         	movff	___fttol@f1,??___fttol+1
  6322  00190A  C0E2  F0E7         	movff	___fttol@f1+1,??___fttol+2
  6323  00190E  C0E3  F0E8         	movff	___fttol@f1+2,??___fttol+3
  6324  001912  0100               	movlb	0	; () banked
  6325  001914  29E5               	incf	??___fttol& (0+255),w,b
  6326  001916  0100               	movlb	0	; () banked
  6327  001918  6FE9               	movwf	(??___fttol+4)& (0+255),b
  6328  00191A  D005               	goto	u3290
  6329  00191C                     u3295:
  6330  00191C  0100               	movlb	0	; () banked
  6331  00191E  90D8               	bcf	status,0,c
  6332  001920  33E8               	rrcf	(??___fttol+3)& (0+255),f,b
  6333  001922  33E7               	rrcf	(??___fttol+2)& (0+255),f,b
  6334  001924  33E6               	rrcf	(??___fttol+1)& (0+255),f,b
  6335  001926                     u3290:
  6336  001926  0100               	movlb	0	; () banked
  6337  001928  2FE9               	decfsz	(??___fttol+4)& (0+255),f,b
  6338  00192A  D7F8               	goto	u3295
  6339  00192C  0100               	movlb	0	; () banked
  6340  00192E  51E6               	movf	(??___fttol+1)& (0+255),w,b
  6341  001930  0100               	movlb	0	; () banked
  6342  001932  6FEA               	movwf	___fttol@sign1& (0+255),b
  6343                           
  6344                           ; BSR set to: 0
  6345  001934  0100               	movlb	0	; () banked
  6346  001936  8FE2               	bsf	(___fttol@f1+1)& (0+255),7,b
  6347                           
  6348                           ; BSR set to: 0
  6349  001938  0EFF               	movlw	255
  6350  00193A  0100               	movlb	0	; () banked
  6351  00193C  17E1               	andwf	___fttol@f1& (0+255),f,b
  6352  00193E  0EFF               	movlw	255
  6353  001940  0100               	movlb	0	; () banked
  6354  001942  17E2               	andwf	(___fttol@f1+1)& (0+255),f,b
  6355  001944  0E00               	movlw	0
  6356  001946  0100               	movlb	0	; () banked
  6357  001948  17E3               	andwf	(___fttol@f1+2)& (0+255),f,b
  6358                           
  6359                           ; BSR set to: 0
  6360  00194A  0100               	movlb	0	; () banked
  6361  00194C  51E1               	movf	___fttol@f1& (0+255),w,b
  6362  00194E  0100               	movlb	0	; () banked
  6363  001950  6FEB               	movwf	___fttol@lval& (0+255),b
  6364  001952  0100               	movlb	0	; () banked
  6365  001954  51E2               	movf	(___fttol@f1+1)& (0+255),w,b
  6366  001956  0100               	movlb	0	; () banked
  6367  001958  6FEC               	movwf	(___fttol@lval+1)& (0+255),b
  6368  00195A  0100               	movlb	0	; () banked
  6369  00195C  51E3               	movf	(___fttol@f1+2)& (0+255),w,b
  6370  00195E  0100               	movlb	0	; () banked
  6371  001960  6FED               	movwf	(___fttol@lval+2)& (0+255),b
  6372  001962  0100               	movlb	0	; () banked
  6373  001964  6BEE               	clrf	(___fttol@lval+3)& (0+255),b
  6374                           
  6375                           ; BSR set to: 0
  6376  001966  0E8E               	movlw	142
  6377  001968  0100               	movlb	0	; () banked
  6378  00196A  5FEF               	subwf	___fttol@exp1& (0+255),f,b
  6379                           
  6380                           ; BSR set to: 0
  6381  00196C  0100               	movlb	0	; () banked
  6382  00196E  AFEF               	btfss	___fttol@exp1& (0+255),7,b
  6383  001970  D01A               	goto	l4183
  6384                           
  6385                           ; BSR set to: 0
  6386  001972  0100               	movlb	0	; () banked
  6387  001974  51EF               	movf	___fttol@exp1& (0+255),w,b
  6388  001976  0A80               	xorlw	128
  6389  001978  0F8F               	addlw	143
  6390  00197A  B0D8               	btfsc	status,0,c
  6391  00197C  D00A               	goto	l4179
  6392                           
  6393                           ; BSR set to: 0
  6394  00197E  0E00               	movlw	0
  6395  001980  0100               	movlb	0	; () banked
  6396  001982  6FE1               	movwf	?___fttol& (0+255),b
  6397  001984  0E00               	movlw	0
  6398  001986  6FE2               	movwf	(?___fttol+1)& (0+255),b
  6399  001988  0E00               	movlw	0
  6400  00198A  6FE3               	movwf	(?___fttol+2)& (0+255),b
  6401  00198C  0E00               	movlw	0
  6402  00198E  6FE4               	movwf	(?___fttol+3)& (0+255),b
  6403                           
  6404                           ; BSR set to: 0
  6405  001990  0012               	return	
  6406  001992                     l4179:
  6407                           
  6408                           ; BSR set to: 0
  6409  001992  0100               	movlb	0	; () banked
  6410  001994  90D8               	bcf	status,0,c
  6411  001996  33EE               	rrcf	(___fttol@lval+3)& (0+255),f,b
  6412  001998  33ED               	rrcf	(___fttol@lval+2)& (0+255),f,b
  6413  00199A  33EC               	rrcf	(___fttol@lval+1)& (0+255),f,b
  6414  00199C  33EB               	rrcf	___fttol@lval& (0+255),f,b
  6415                           
  6416                           ; BSR set to: 0
  6417  00199E  0100               	movlb	0	; () banked
  6418  0019A0  3FEF               	incfsz	___fttol@exp1& (0+255),f,b
  6419  0019A2  D7F7               	goto	l4179
  6420                           
  6421                           ; BSR set to: 0
  6422  0019A4  D01B               	goto	l4193
  6423  0019A6                     l4183:
  6424                           
  6425                           ; BSR set to: 0
  6426  0019A6  0E17               	movlw	23
  6427  0019A8  0100               	movlb	0	; () banked
  6428  0019AA  65EF               	cpfsgt	___fttol@exp1& (0+255),b
  6429  0019AC  D012               	goto	l4191
  6430                           
  6431                           ; BSR set to: 0
  6432  0019AE  0E00               	movlw	0
  6433  0019B0  0100               	movlb	0	; () banked
  6434  0019B2  6FE1               	movwf	?___fttol& (0+255),b
  6435  0019B4  0E00               	movlw	0
  6436  0019B6  6FE2               	movwf	(?___fttol+1)& (0+255),b
  6437  0019B8  0E00               	movlw	0
  6438  0019BA  6FE3               	movwf	(?___fttol+2)& (0+255),b
  6439  0019BC  0E00               	movlw	0
  6440  0019BE  6FE4               	movwf	(?___fttol+3)& (0+255),b
  6441                           
  6442                           ; BSR set to: 0
  6443  0019C0  0012               	return	
  6444  0019C2                     l4189:
  6445                           
  6446                           ; BSR set to: 0
  6447  0019C2  0100               	movlb	0	; () banked
  6448  0019C4  90D8               	bcf	status,0,c
  6449  0019C6  37EB               	rlcf	___fttol@lval& (0+255),f,b
  6450  0019C8  37EC               	rlcf	(___fttol@lval+1)& (0+255),f,b
  6451  0019CA  37ED               	rlcf	(___fttol@lval+2)& (0+255),f,b
  6452  0019CC  37EE               	rlcf	(___fttol@lval+3)& (0+255),f,b
  6453  0019CE  0100               	movlb	0	; () banked
  6454  0019D0  07EF               	decf	___fttol@exp1& (0+255),f,b
  6455  0019D2                     l4191:
  6456                           
  6457                           ; BSR set to: 0
  6458  0019D2  0100               	movlb	0	; () banked
  6459  0019D4  51EF               	movf	___fttol@exp1& (0+255),w,b
  6460  0019D6  0100               	movlb	0	; () banked
  6461  0019D8  A4D8               	btfss	status,2,c
  6462  0019DA  D7F3               	goto	l4189
  6463  0019DC                     l4193:
  6464                           
  6465                           ; BSR set to: 0
  6466  0019DC  0100               	movlb	0	; () banked
  6467  0019DE  51EA               	movf	___fttol@sign1& (0+255),w,b
  6468  0019E0  0100               	movlb	0	; () banked
  6469  0019E2  B4D8               	btfsc	status,2,c
  6470  0019E4  D009               	goto	l4197
  6471                           
  6472                           ; BSR set to: 0
  6473  0019E6  0100               	movlb	0	; () banked
  6474  0019E8  1FEE               	comf	(___fttol@lval+3)& (0+255),f,b
  6475  0019EA  1FED               	comf	(___fttol@lval+2)& (0+255),f,b
  6476  0019EC  1FEC               	comf	(___fttol@lval+1)& (0+255),f,b
  6477  0019EE  6DEB               	negf	___fttol@lval& (0+255),b
  6478  0019F0  0E00               	movlw	0
  6479  0019F2  23EC               	addwfc	(___fttol@lval+1)& (0+255),f,b
  6480  0019F4  23ED               	addwfc	(___fttol@lval+2)& (0+255),f,b
  6481  0019F6  23EE               	addwfc	(___fttol@lval+3)& (0+255),f,b
  6482  0019F8                     l4197:
  6483                           
  6484                           ; BSR set to: 0
  6485  0019F8  C0EB  F0E1         	movff	___fttol@lval,?___fttol
  6486  0019FC  C0EC  F0E2         	movff	___fttol@lval+1,?___fttol+1
  6487  001A00  C0ED  F0E3         	movff	___fttol@lval+2,?___fttol+2
  6488  001A04  C0EE  F0E4         	movff	___fttol@lval+3,?___fttol+3
  6489  001A08  0012               	return	
  6490  001A0A                     __end_of___fttol:
  6491                           	opt stack 0
  6492                           tblptru	equ	0xFF8
  6493                           prodh	equ	0xFF4
  6494                           prodl	equ	0xFF3
  6495                           intcon	equ	0xFF2
  6496                           intcon2	equ	0xFF1
  6497                           intcon3	equ	0xFF0
  6498                           postinc0	equ	0xFEE
  6499                           wreg	equ	0xFE8
  6500                           indf1	equ	0xFE7
  6501                           postinc1	equ	0xFE6
  6502                           postdec1	equ	0xFE5
  6503                           fsr1h	equ	0xFE2
  6504                           fsr1l	equ	0xFE1
  6505                           indf2	equ	0xFDF
  6506                           postinc2	equ	0xFDE
  6507                           postdec2	equ	0xFDD
  6508                           plusw2	equ	0xFDB
  6509                           fsr2h	equ	0xFDA
  6510                           fsr2l	equ	0xFD9
  6511                           status	equ	0xFD8
  6512                           
  6513 ;; *************** function ___ftmul *****************
  6514 ;; Defined at:
  6515 ;;		line 62 in file "/opt/microchip/xc8/v1.38/sources/common/ftmul.c"
  6516 ;; Parameters:    Size  Location     Type
  6517 ;;  f1              3    1[BANK0 ] float 
  6518 ;;  f2              3    4[BANK0 ] float 
  6519 ;; Auto vars:     Size  Location     Type
  6520 ;;  f3_as_produc    3   11[BANK0 ] unsigned um
  6521 ;;  sign            1   15[BANK0 ] unsigned char 
  6522 ;;  cntr            1   14[BANK0 ] unsigned char 
  6523 ;;  exp             1   10[BANK0 ] unsigned char 
  6524 ;; Return value:  Size  Location     Type
  6525 ;;                  3    1[BANK0 ] float 
  6526 ;; Registers used:
  6527 ;;		wreg, status,2, status,0, cstack
  6528 ;; Tracked objects:
  6529 ;;		On entry : 0/0
  6530 ;;		On exit  : 0/0
  6531 ;;		Unchanged: 0/0
  6532 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6533 ;;      Params:         0       6       0       0       0       0       0
  6534 ;;      Locals:         0       6       0       0       0       0       0
  6535 ;;      Temps:          0       3       0       0       0       0       0
  6536 ;;      Totals:         0      15       0       0       0       0       0
  6537 ;;Total ram usage:       15 bytes
  6538 ;; Hardware stack levels used:    1
  6539 ;; Hardware stack levels required when called:    4
  6540 ;; This function calls:
  6541 ;;		___ftpack
  6542 ;; This function is called by:
  6543 ;;		_measure
  6544 ;; This function uses a non-reentrant model
  6545 ;;
  6546                           
  6547                           	psect	text33
  6548  001768                     __ptext33:
  6549                           	opt stack 0
  6550  001768                     ___ftmul:
  6551                           	opt stack 25
  6552                           
  6553                           ; BSR set to: 0
  6554                           ;incstack = 0
  6555  001768  C0D4  F0D8         	movff	___ftmul@f1+2,??___ftmul
  6556  00176C  0100               	movlb	0	; () banked
  6557  00176E  6BD9               	clrf	(??___ftmul+1)& (0+255),b
  6558  001770  6BDA               	clrf	(??___ftmul+2)& (0+255),b
  6559  001772  0100               	movlb	0	; () banked
  6560  001774  35D3               	rlcf	(___ftmul@f1+1)& (0+255),w,b
  6561  001776  0100               	movlb	0	; () banked
  6562  001778  37D8               	rlcf	??___ftmul& (0+255),f,b
  6563  00177A  E301               	bnc	u3201
  6564  00177C  81D9               	bsf	(??___ftmul+1)& (0+255),0,b
  6565  00177E                     u3201:
  6566  00177E  0100               	movlb	0	; () banked
  6567  001780  51D8               	movf	??___ftmul& (0+255),w,b
  6568  001782  0100               	movlb	0	; () banked
  6569  001784  6FDB               	movwf	___ftmul@exp& (0+255),b
  6570  001786  0100               	movlb	0	; () banked
  6571  001788  51DB               	movf	___ftmul@exp& (0+255),w,b
  6572  00178A  A4D8               	btfss	status,2,c
  6573  00178C  D00A               	goto	l4101
  6574                           
  6575                           ; BSR set to: 0
  6576  00178E  0E00               	movlw	0
  6577  001790  0100               	movlb	0	; () banked
  6578  001792  6FD2               	movwf	?___ftmul& (0+255),b
  6579  001794  0E00               	movlw	0
  6580  001796  0100               	movlb	0	; () banked
  6581  001798  6FD3               	movwf	(?___ftmul+1)& (0+255),b
  6582  00179A  0E00               	movlw	0
  6583  00179C  0100               	movlb	0	; () banked
  6584  00179E  6FD4               	movwf	(?___ftmul+2)& (0+255),b
  6585                           
  6586                           ; BSR set to: 0
  6587  0017A0  0012               	return	
  6588  0017A2                     l4101:
  6589                           
  6590                           ; BSR set to: 0
  6591  0017A2  C0D7  F0D8         	movff	___ftmul@f2+2,??___ftmul
  6592  0017A6  0100               	movlb	0	; () banked
  6593  0017A8  6BD9               	clrf	(??___ftmul+1)& (0+255),b
  6594  0017AA  6BDA               	clrf	(??___ftmul+2)& (0+255),b
  6595  0017AC  0100               	movlb	0	; () banked
  6596  0017AE  35D6               	rlcf	(___ftmul@f2+1)& (0+255),w,b
  6597  0017B0  0100               	movlb	0	; () banked
  6598  0017B2  37D8               	rlcf	??___ftmul& (0+255),f,b
  6599  0017B4  E301               	bnc	u3221
  6600  0017B6  81D9               	bsf	(??___ftmul+1)& (0+255),0,b
  6601  0017B8                     u3221:
  6602  0017B8  0100               	movlb	0	; () banked
  6603  0017BA  51D8               	movf	??___ftmul& (0+255),w,b
  6604  0017BC  0100               	movlb	0	; () banked
  6605  0017BE  6FE0               	movwf	___ftmul@sign& (0+255),b
  6606  0017C0  0100               	movlb	0	; () banked
  6607  0017C2  51E0               	movf	___ftmul@sign& (0+255),w,b
  6608  0017C4  A4D8               	btfss	status,2,c
  6609  0017C6  D00A               	goto	l4107
  6610                           
  6611                           ; BSR set to: 0
  6612  0017C8  0E00               	movlw	0
  6613  0017CA  0100               	movlb	0	; () banked
  6614  0017CC  6FD2               	movwf	?___ftmul& (0+255),b
  6615  0017CE  0E00               	movlw	0
  6616  0017D0  0100               	movlb	0	; () banked
  6617  0017D2  6FD3               	movwf	(?___ftmul+1)& (0+255),b
  6618  0017D4  0E00               	movlw	0
  6619  0017D6  0100               	movlb	0	; () banked
  6620  0017D8  6FD4               	movwf	(?___ftmul+2)& (0+255),b
  6621                           
  6622                           ; BSR set to: 0
  6623  0017DA  0012               	return	
  6624  0017DC                     l4107:
  6625                           
  6626                           ; BSR set to: 0
  6627  0017DC  0100               	movlb	0	; () banked
  6628  0017DE  51E0               	movf	___ftmul@sign& (0+255),w,b
  6629  0017E0  0F7B               	addlw	123
  6630  0017E2  0100               	movlb	0	; () banked
  6631  0017E4  27DB               	addwf	___ftmul@exp& (0+255),f,b
  6632                           
  6633                           ; BSR set to: 0
  6634  0017E6  C0D4  F0E0         	movff	___ftmul@f1+2,___ftmul@sign
  6635  0017EA  0100               	movlb	0	; () banked
  6636  0017EC  51D7               	movf	(___ftmul@f2+2)& (0+255),w,b
  6637  0017EE  0100               	movlb	0	; () banked
  6638  0017F0  1BE0               	xorwf	___ftmul@sign& (0+255),f,b
  6639  0017F2  0E80               	movlw	128
  6640  0017F4  0100               	movlb	0	; () banked
  6641  0017F6  17E0               	andwf	___ftmul@sign& (0+255),f,b
  6642                           
  6643                           ; BSR set to: 0
  6644  0017F8  0100               	movlb	0	; () banked
  6645  0017FA  8FD3               	bsf	(___ftmul@f1+1)& (0+255),7,b
  6646                           
  6647                           ; BSR set to: 0
  6648  0017FC  0100               	movlb	0	; () banked
  6649  0017FE  8FD6               	bsf	(___ftmul@f2+1)& (0+255),7,b
  6650                           
  6651                           ; BSR set to: 0
  6652  001800  0EFF               	movlw	255
  6653  001802  0100               	movlb	0	; () banked
  6654  001804  17D5               	andwf	___ftmul@f2& (0+255),f,b
  6655  001806  0EFF               	movlw	255
  6656  001808  0100               	movlb	0	; () banked
  6657  00180A  17D6               	andwf	(___ftmul@f2+1)& (0+255),f,b
  6658  00180C  0E00               	movlw	0
  6659  00180E  0100               	movlb	0	; () banked
  6660  001810  17D7               	andwf	(___ftmul@f2+2)& (0+255),f,b
  6661                           
  6662                           ; BSR set to: 0
  6663  001812  0E00               	movlw	0
  6664  001814  0100               	movlb	0	; () banked
  6665  001816  6FDC               	movwf	___ftmul@f3_as_product& (0+255),b
  6666  001818  0E00               	movlw	0
  6667  00181A  0100               	movlb	0	; () banked
  6668  00181C  6FDD               	movwf	(___ftmul@f3_as_product+1)& (0+255),b
  6669  00181E  0E00               	movlw	0
  6670  001820  0100               	movlb	0	; () banked
  6671  001822  6FDE               	movwf	(___ftmul@f3_as_product+2)& (0+255),b
  6672                           
  6673                           ; BSR set to: 0
  6674  001824  0E07               	movlw	7
  6675  001826  0100               	movlb	0	; () banked
  6676  001828  6FDF               	movwf	___ftmul@cntr& (0+255),b
  6677  00182A                     l4121:
  6678                           
  6679                           ; BSR set to: 0
  6680  00182A  0100               	movlb	0	; () banked
  6681  00182C  A1D2               	btfss	___ftmul@f1& (0+255),0,b
  6682  00182E  D00C               	goto	l4125
  6683                           
  6684                           ; BSR set to: 0
  6685  001830  0100               	movlb	0	; () banked
  6686  001832  51D5               	movf	___ftmul@f2& (0+255),w,b
  6687  001834  0100               	movlb	0	; () banked
  6688  001836  27DC               	addwf	___ftmul@f3_as_product& (0+255),f,b
  6689  001838  0100               	movlb	0	; () banked
  6690  00183A  51D6               	movf	(___ftmul@f2+1)& (0+255),w,b
  6691  00183C  0100               	movlb	0	; () banked
  6692  00183E  23DD               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
  6693  001840  0100               	movlb	0	; () banked
  6694  001842  51D7               	movf	(___ftmul@f2+2)& (0+255),w,b
  6695  001844  0100               	movlb	0	; () banked
  6696  001846  23DE               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
  6697  001848                     l4125:
  6698                           
  6699                           ; BSR set to: 0
  6700  001848  0100               	movlb	0	; () banked
  6701  00184A  90D8               	bcf	status,0,c
  6702  00184C  33D4               	rrcf	(___ftmul@f1+2)& (0+255),f,b
  6703  00184E  33D3               	rrcf	(___ftmul@f1+1)& (0+255),f,b
  6704  001850  33D2               	rrcf	___ftmul@f1& (0+255),f,b
  6705  001852  0100               	movlb	0	; () banked
  6706  001854  90D8               	bcf	status,0,c
  6707  001856  37D5               	rlcf	___ftmul@f2& (0+255),f,b
  6708  001858  37D6               	rlcf	(___ftmul@f2+1)& (0+255),f,b
  6709  00185A  37D7               	rlcf	(___ftmul@f2+2)& (0+255),f,b
  6710                           
  6711                           ; BSR set to: 0
  6712  00185C  0100               	movlb	0	; () banked
  6713  00185E  2FDF               	decfsz	___ftmul@cntr& (0+255),f,b
  6714  001860  D7E4               	goto	l4121
  6715                           
  6716                           ; BSR set to: 0
  6717                           
  6718                           ; BSR set to: 0
  6719  001862  0E09               	movlw	9
  6720  001864  0100               	movlb	0	; () banked
  6721  001866  6FDF               	movwf	___ftmul@cntr& (0+255),b
  6722  001868                     l4131:
  6723                           
  6724                           ; BSR set to: 0
  6725  001868  0100               	movlb	0	; () banked
  6726  00186A  A1D2               	btfss	___ftmul@f1& (0+255),0,b
  6727  00186C  D00C               	goto	l4135
  6728                           
  6729                           ; BSR set to: 0
  6730  00186E  0100               	movlb	0	; () banked
  6731  001870  51D5               	movf	___ftmul@f2& (0+255),w,b
  6732  001872  0100               	movlb	0	; () banked
  6733  001874  27DC               	addwf	___ftmul@f3_as_product& (0+255),f,b
  6734  001876  0100               	movlb	0	; () banked
  6735  001878  51D6               	movf	(___ftmul@f2+1)& (0+255),w,b
  6736  00187A  0100               	movlb	0	; () banked
  6737  00187C  23DD               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
  6738  00187E  0100               	movlb	0	; () banked
  6739  001880  51D7               	movf	(___ftmul@f2+2)& (0+255),w,b
  6740  001882  0100               	movlb	0	; () banked
  6741  001884  23DE               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
  6742  001886                     l4135:
  6743                           
  6744                           ; BSR set to: 0
  6745  001886  0100               	movlb	0	; () banked
  6746  001888  90D8               	bcf	status,0,c
  6747  00188A  33D4               	rrcf	(___ftmul@f1+2)& (0+255),f,b
  6748  00188C  33D3               	rrcf	(___ftmul@f1+1)& (0+255),f,b
  6749  00188E  33D2               	rrcf	___ftmul@f1& (0+255),f,b
  6750  001890  0100               	movlb	0	; () banked
  6751  001892  90D8               	bcf	status,0,c
  6752  001894  33DE               	rrcf	(___ftmul@f3_as_product+2)& (0+255),f,b
  6753  001896  33DD               	rrcf	(___ftmul@f3_as_product+1)& (0+255),f,b
  6754  001898  33DC               	rrcf	___ftmul@f3_as_product& (0+255),f,b
  6755                           
  6756                           ; BSR set to: 0
  6757  00189A  0100               	movlb	0	; () banked
  6758  00189C  2FDF               	decfsz	___ftmul@cntr& (0+255),f,b
  6759  00189E  D7E4               	goto	l4131
  6760                           
  6761                           ; BSR set to: 0
  6762                           
  6763                           ; BSR set to: 0
  6764  0018A0  C0DC  F01D         	movff	___ftmul@f3_as_product,___ftpack@arg
  6765  0018A4  C0DD  F01E         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  6766  0018A8  C0DE  F01F         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  6767  0018AC  C0DB  F020         	movff	___ftmul@exp,___ftpack@exp
  6768  0018B0  C0E0  F021         	movff	___ftmul@sign,___ftpack@sign
  6769  0018B4  EC87  F00E         	call	___ftpack	;wreg free
  6770  0018B8  C01D  F0D2         	movff	?___ftpack,?___ftmul
  6771  0018BC  C01E  F0D3         	movff	?___ftpack+1,?___ftmul+1
  6772  0018C0  C01F  F0D4         	movff	?___ftpack+2,?___ftmul+2
  6773  0018C4  0012               	return	
  6774  0018C6                     __end_of___ftmul:
  6775                           	opt stack 0
  6776                           tblptru	equ	0xFF8
  6777                           prodh	equ	0xFF4
  6778                           prodl	equ	0xFF3
  6779                           intcon	equ	0xFF2
  6780                           intcon2	equ	0xFF1
  6781                           intcon3	equ	0xFF0
  6782                           postinc0	equ	0xFEE
  6783                           wreg	equ	0xFE8
  6784                           indf1	equ	0xFE7
  6785                           postinc1	equ	0xFE6
  6786                           postdec1	equ	0xFE5
  6787                           fsr1h	equ	0xFE2
  6788                           fsr1l	equ	0xFE1
  6789                           indf2	equ	0xFDF
  6790                           postinc2	equ	0xFDE
  6791                           postdec2	equ	0xFDD
  6792                           plusw2	equ	0xFDB
  6793                           fsr2h	equ	0xFDA
  6794                           fsr2l	equ	0xFD9
  6795                           status	equ	0xFD8
  6796                           
  6797 ;; *************** function ___awtoft *****************
  6798 ;; Defined at:
  6799 ;;		line 32 in file "/opt/microchip/xc8/v1.38/sources/common/awtoft.c"
  6800 ;; Parameters:    Size  Location     Type
  6801 ;;  c               2   36[COMRAM] int 
  6802 ;; Auto vars:     Size  Location     Type
  6803 ;;  sign            1    0[BANK0 ] unsigned char 
  6804 ;; Return value:  Size  Location     Type
  6805 ;;                  3   36[COMRAM] float 
  6806 ;; Registers used:
  6807 ;;		wreg, status,2, status,0, cstack
  6808 ;; Tracked objects:
  6809 ;;		On entry : 0/0
  6810 ;;		On exit  : 0/0
  6811 ;;		Unchanged: 0/0
  6812 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6813 ;;      Params:         3       0       0       0       0       0       0
  6814 ;;      Locals:         0       1       0       0       0       0       0
  6815 ;;      Temps:          0       0       0       0       0       0       0
  6816 ;;      Totals:         3       1       0       0       0       0       0
  6817 ;;Total ram usage:        4 bytes
  6818 ;; Hardware stack levels used:    1
  6819 ;; Hardware stack levels required when called:    4
  6820 ;; This function calls:
  6821 ;;		___ftpack
  6822 ;; This function is called by:
  6823 ;;		_measure
  6824 ;; This function uses a non-reentrant model
  6825 ;;
  6826                           
  6827                           	psect	text34
  6828  0023A8                     __ptext34:
  6829                           	opt stack 0
  6830  0023A8                     ___awtoft:
  6831                           	opt stack 25
  6832                           
  6833                           ;incstack = 0
  6834  0023A8  0E00               	movlw	0
  6835  0023AA  0100               	movlb	0	; () banked
  6836  0023AC  6FD1               	movwf	___awtoft@sign& (0+255),b
  6837                           
  6838                           ; BSR set to: 0
  6839  0023AE  AE26               	btfss	___awtoft@c+1,7,c
  6840  0023B0  D007               	goto	l4151
  6841                           
  6842                           ; BSR set to: 0
  6843  0023B2  6C25               	negf	___awtoft@c,c
  6844  0023B4  1E26               	comf	___awtoft@c+1,f,c
  6845  0023B6  B0D8               	btfsc	status,0,c
  6846  0023B8  2A26               	incf	___awtoft@c+1,f,c
  6847                           
  6848                           ; BSR set to: 0
  6849  0023BA  0E01               	movlw	1
  6850  0023BC  0100               	movlb	0	; () banked
  6851  0023BE  6FD1               	movwf	___awtoft@sign& (0+255),b
  6852  0023C0                     l4151:
  6853                           
  6854                           ; BSR set to: 0
  6855  0023C0  C025  F01D         	movff	___awtoft@c,___ftpack@arg
  6856  0023C4  C026  F01E         	movff	___awtoft@c+1,___ftpack@arg+1
  6857  0023C8  6A1F               	clrf	___ftpack@arg+2,c
  6858  0023CA  0E8E               	movlw	142
  6859  0023CC  6E20               	movwf	___ftpack@exp,c
  6860  0023CE  C0D1  F021         	movff	___awtoft@sign,___ftpack@sign
  6861  0023D2  EC87  F00E         	call	___ftpack	;wreg free
  6862  0023D6  C01D  F025         	movff	?___ftpack,?___awtoft
  6863  0023DA  C01E  F026         	movff	?___ftpack+1,?___awtoft+1
  6864  0023DE  C01F  F027         	movff	?___ftpack+2,?___awtoft+2
  6865  0023E2  0012               	return	
  6866  0023E4                     __end_of___awtoft:
  6867                           	opt stack 0
  6868                           tblptru	equ	0xFF8
  6869                           prodh	equ	0xFF4
  6870                           prodl	equ	0xFF3
  6871                           intcon	equ	0xFF2
  6872                           intcon2	equ	0xFF1
  6873                           intcon3	equ	0xFF0
  6874                           postinc0	equ	0xFEE
  6875                           wreg	equ	0xFE8
  6876                           indf1	equ	0xFE7
  6877                           postinc1	equ	0xFE6
  6878                           postdec1	equ	0xFE5
  6879                           fsr1h	equ	0xFE2
  6880                           fsr1l	equ	0xFE1
  6881                           indf2	equ	0xFDF
  6882                           postinc2	equ	0xFDE
  6883                           postdec2	equ	0xFDD
  6884                           plusw2	equ	0xFDB
  6885                           fsr2h	equ	0xFDA
  6886                           fsr2l	equ	0xFD9
  6887                           status	equ	0xFD8
  6888                           
  6889 ;; *************** function ___ftpack *****************
  6890 ;; Defined at:
  6891 ;;		line 62 in file "/opt/microchip/xc8/v1.38/sources/common/float.c"
  6892 ;; Parameters:    Size  Location     Type
  6893 ;;  arg             3   28[COMRAM] unsigned um
  6894 ;;  exp             1   31[COMRAM] unsigned char 
  6895 ;;  sign            1   32[COMRAM] unsigned char 
  6896 ;; Auto vars:     Size  Location     Type
  6897 ;;		None
  6898 ;; Return value:  Size  Location     Type
  6899 ;;                  3   28[COMRAM] float 
  6900 ;; Registers used:
  6901 ;;		wreg, status,2, status,0
  6902 ;; Tracked objects:
  6903 ;;		On entry : 0/0
  6904 ;;		On exit  : 0/0
  6905 ;;		Unchanged: 0/0
  6906 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6907 ;;      Params:         5       0       0       0       0       0       0
  6908 ;;      Locals:         0       0       0       0       0       0       0
  6909 ;;      Temps:          3       0       0       0       0       0       0
  6910 ;;      Totals:         8       0       0       0       0       0       0
  6911 ;;Total ram usage:        8 bytes
  6912 ;; Hardware stack levels used:    1
  6913 ;; Hardware stack levels required when called:    3
  6914 ;; This function calls:
  6915 ;;		Nothing
  6916 ;; This function is called by:
  6917 ;;		___awtoft
  6918 ;;		___ftmul
  6919 ;; This function uses a non-reentrant model
  6920 ;;
  6921                           
  6922                           	psect	text35
  6923  001D0E                     __ptext35:
  6924                           	opt stack 0
  6925  001D0E                     ___ftpack:
  6926                           	opt stack 25
  6927                           
  6928                           ;incstack = 0
  6929  001D0E  5020               	movf	___ftpack@exp,w,c
  6930  001D10  B4D8               	btfsc	status,2,c
  6931  001D12  D005               	goto	l3851
  6932  001D14  501D               	movf	___ftpack@arg,w,c
  6933  001D16  101E               	iorwf	___ftpack@arg+1,w,c
  6934  001D18  101F               	iorwf	___ftpack@arg+2,w,c
  6935  001D1A  A4D8               	btfss	status,2,c
  6936  001D1C  D00C               	goto	l3857
  6937  001D1E                     l3851:
  6938  001D1E  0E00               	movlw	0
  6939  001D20  6E1D               	movwf	?___ftpack,c
  6940  001D22  0E00               	movlw	0
  6941  001D24  6E1E               	movwf	?___ftpack+1,c
  6942  001D26  0E00               	movlw	0
  6943  001D28  6E1F               	movwf	?___ftpack+2,c
  6944  001D2A  0012               	return	
  6945  001D2C                     l3855:
  6946  001D2C  2A20               	incf	___ftpack@exp,f,c
  6947  001D2E  90D8               	bcf	status,0,c
  6948  001D30  321F               	rrcf	___ftpack@arg+2,f,c
  6949  001D32  321E               	rrcf	___ftpack@arg+1,f,c
  6950  001D34  321D               	rrcf	___ftpack@arg,f,c
  6951  001D36                     l3857:
  6952  001D36  0E00               	movlw	0
  6953  001D38  141D               	andwf	___ftpack@arg,w,c
  6954  001D3A  6E22               	movwf	??___ftpack& (0+255),c
  6955  001D3C  0E00               	movlw	0
  6956  001D3E  141E               	andwf	___ftpack@arg+1,w,c
  6957  001D40  6E23               	movwf	(??___ftpack+1)& (0+255),c
  6958  001D42  0EFE               	movlw	254
  6959  001D44  141F               	andwf	___ftpack@arg+2,w,c
  6960  001D46  6E24               	movwf	(??___ftpack+2)& (0+255),c
  6961  001D48  5022               	movf	??___ftpack,w,c
  6962  001D4A  1023               	iorwf	??___ftpack+1,w,c
  6963  001D4C  1024               	iorwf	??___ftpack+2,w,c
  6964  001D4E  B4D8               	btfsc	status,2,c
  6965  001D50  D00C               	goto	l3863
  6966  001D52  D7EC               	goto	l3855
  6967  001D54                     l3859:
  6968  001D54  2A20               	incf	___ftpack@exp,f,c
  6969  001D56  0E01               	movlw	1
  6970  001D58  261D               	addwf	___ftpack@arg,f,c
  6971  001D5A  0E00               	movlw	0
  6972  001D5C  221E               	addwfc	___ftpack@arg+1,f,c
  6973  001D5E  0E00               	movlw	0
  6974  001D60  221F               	addwfc	___ftpack@arg+2,f,c
  6975  001D62  90D8               	bcf	status,0,c
  6976  001D64  321F               	rrcf	___ftpack@arg+2,f,c
  6977  001D66  321E               	rrcf	___ftpack@arg+1,f,c
  6978  001D68  321D               	rrcf	___ftpack@arg,f,c
  6979  001D6A                     l3863:
  6980  001D6A  0E00               	movlw	0
  6981  001D6C  141D               	andwf	___ftpack@arg,w,c
  6982  001D6E  6E22               	movwf	??___ftpack& (0+255),c
  6983  001D70  0E00               	movlw	0
  6984  001D72  141E               	andwf	___ftpack@arg+1,w,c
  6985  001D74  6E23               	movwf	(??___ftpack+1)& (0+255),c
  6986  001D76  0EFF               	movlw	255
  6987  001D78  141F               	andwf	___ftpack@arg+2,w,c
  6988  001D7A  6E24               	movwf	(??___ftpack+2)& (0+255),c
  6989  001D7C  5022               	movf	??___ftpack,w,c
  6990  001D7E  1023               	iorwf	??___ftpack+1,w,c
  6991  001D80  1024               	iorwf	??___ftpack+2,w,c
  6992  001D82  B4D8               	btfsc	status,2,c
  6993  001D84  D006               	goto	l3867
  6994  001D86  D7E6               	goto	l3859
  6995  001D88                     l3865:
  6996  001D88  0620               	decf	___ftpack@exp,f,c
  6997  001D8A  90D8               	bcf	status,0,c
  6998  001D8C  361D               	rlcf	___ftpack@arg,f,c
  6999  001D8E  361E               	rlcf	___ftpack@arg+1,f,c
  7000  001D90  361F               	rlcf	___ftpack@arg+2,f,c
  7001  001D92                     l3867:
  7002  001D92  BE1E               	btfsc	___ftpack@arg+1,7,c
  7003  001D94  D003               	goto	l836
  7004  001D96  0E02               	movlw	2
  7005  001D98  6020               	cpfslt	___ftpack@exp,c
  7006  001D9A  D7F6               	goto	l3865
  7007  001D9C                     l836:
  7008  001D9C  A020               	btfss	___ftpack@exp,0,c
  7009  001D9E  9E1E               	bcf	___ftpack@arg+1,7,c
  7010  001DA0  90D8               	bcf	status,0,c
  7011  001DA2  3220               	rrcf	___ftpack@exp,f,c
  7012  001DA4  5020               	movf	___ftpack@exp,w,c
  7013  001DA6  121F               	iorwf	___ftpack@arg+2,f,c
  7014  001DA8  5021               	movf	___ftpack@sign,w,c
  7015  001DAA  A4D8               	btfss	status,2,c
  7016  001DAC  8E1F               	bsf	___ftpack@arg+2,7,c
  7017  001DAE  C01D  F01D         	movff	___ftpack@arg,?___ftpack
  7018  001DB2  C01E  F01E         	movff	___ftpack@arg+1,?___ftpack+1
  7019  001DB6  C01F  F01F         	movff	___ftpack@arg+2,?___ftpack+2
  7020  001DBA  0012               	return	
  7021  001DBC                     __end_of___ftpack:
  7022                           	opt stack 0
  7023                           tblptru	equ	0xFF8
  7024                           prodh	equ	0xFF4
  7025                           prodl	equ	0xFF3
  7026                           intcon	equ	0xFF2
  7027                           intcon2	equ	0xFF1
  7028                           intcon3	equ	0xFF0
  7029                           postinc0	equ	0xFEE
  7030                           wreg	equ	0xFE8
  7031                           indf1	equ	0xFE7
  7032                           postinc1	equ	0xFE6
  7033                           postdec1	equ	0xFE5
  7034                           fsr1h	equ	0xFE2
  7035                           fsr1l	equ	0xFE1
  7036                           indf2	equ	0xFDF
  7037                           postinc2	equ	0xFDE
  7038                           postdec2	equ	0xFDD
  7039                           plusw2	equ	0xFDB
  7040                           fsr2h	equ	0xFDA
  7041                           fsr2l	equ	0xFD9
  7042                           status	equ	0xFD8
  7043                           
  7044 ;; *************** function ___almod *****************
  7045 ;; Defined at:
  7046 ;;		line 8 in file "/opt/microchip/xc8/v1.38/sources/common/almod.c"
  7047 ;; Parameters:    Size  Location     Type
  7048 ;;  dividend        4   28[COMRAM] long 
  7049 ;;  divisor         4   32[COMRAM] long 
  7050 ;; Auto vars:     Size  Location     Type
  7051 ;;  sign            1   37[COMRAM] unsigned char 
  7052 ;;  counter         1   36[COMRAM] unsigned char 
  7053 ;; Return value:  Size  Location     Type
  7054 ;;                  4   28[COMRAM] long 
  7055 ;; Registers used:
  7056 ;;		wreg, status,2, status,0
  7057 ;; Tracked objects:
  7058 ;;		On entry : 0/0
  7059 ;;		On exit  : 0/0
  7060 ;;		Unchanged: 0/0
  7061 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7062 ;;      Params:         8       0       0       0       0       0       0
  7063 ;;      Locals:         2       0       0       0       0       0       0
  7064 ;;      Temps:          0       0       0       0       0       0       0
  7065 ;;      Totals:        10       0       0       0       0       0       0
  7066 ;;Total ram usage:       10 bytes
  7067 ;; Hardware stack levels used:    1
  7068 ;; Hardware stack levels required when called:    3
  7069 ;; This function calls:
  7070 ;;		Nothing
  7071 ;; This function is called by:
  7072 ;;		_measure
  7073 ;; This function uses a non-reentrant model
  7074 ;;
  7075                           
  7076                           	psect	text36
  7077  001DBC                     __ptext36:
  7078                           	opt stack 0
  7079  001DBC                     ___almod:
  7080                           	opt stack 26
  7081                           
  7082                           ;incstack = 0
  7083  001DBC  0E00               	movlw	0
  7084  001DBE  6E26               	movwf	___almod@sign,c
  7085  001DC0  AE20               	btfss	___almod@dividend+3,7,c
  7086  001DC2  D00A               	goto	l2931
  7087  001DC4  1E20               	comf	___almod@dividend+3,f,c
  7088  001DC6  1E1F               	comf	___almod@dividend+2,f,c
  7089  001DC8  1E1E               	comf	___almod@dividend+1,f,c
  7090  001DCA  6C1D               	negf	___almod@dividend,c
  7091  001DCC  0E00               	movlw	0
  7092  001DCE  221E               	addwfc	___almod@dividend+1,f,c
  7093  001DD0  221F               	addwfc	___almod@dividend+2,f,c
  7094  001DD2  2220               	addwfc	___almod@dividend+3,f,c
  7095  001DD4  0E01               	movlw	1
  7096  001DD6  6E26               	movwf	___almod@sign,c
  7097  001DD8                     l2931:
  7098  001DD8  AE24               	btfss	___almod@divisor+3,7,c
  7099  001DDA  D008               	goto	l2935
  7100  001DDC  1E24               	comf	___almod@divisor+3,f,c
  7101  001DDE  1E23               	comf	___almod@divisor+2,f,c
  7102  001DE0  1E22               	comf	___almod@divisor+1,f,c
  7103  001DE2  6C21               	negf	___almod@divisor,c
  7104  001DE4  0E00               	movlw	0
  7105  001DE6  2222               	addwfc	___almod@divisor+1,f,c
  7106  001DE8  2223               	addwfc	___almod@divisor+2,f,c
  7107  001DEA  2224               	addwfc	___almod@divisor+3,f,c
  7108  001DEC                     l2935:
  7109  001DEC  5021               	movf	___almod@divisor,w,c
  7110  001DEE  1022               	iorwf	___almod@divisor+1,w,c
  7111  001DF0  1023               	iorwf	___almod@divisor+2,w,c
  7112  001DF2  1024               	iorwf	___almod@divisor+3,w,c
  7113  001DF4  B4D8               	btfsc	status,2,c
  7114  001DF6  D024               	goto	l2951
  7115  001DF8  0E01               	movlw	1
  7116  001DFA  6E25               	movwf	___almod@counter,c
  7117  001DFC  D006               	goto	l2941
  7118  001DFE                     l2939:
  7119  001DFE  90D8               	bcf	status,0,c
  7120  001E00  3621               	rlcf	___almod@divisor,f,c
  7121  001E02  3622               	rlcf	___almod@divisor+1,f,c
  7122  001E04  3623               	rlcf	___almod@divisor+2,f,c
  7123  001E06  3624               	rlcf	___almod@divisor+3,f,c
  7124  001E08  2A25               	incf	___almod@counter,f,c
  7125  001E0A                     l2941:
  7126  001E0A  AE24               	btfss	___almod@divisor+3,7,c
  7127  001E0C  D7F8               	goto	l2939
  7128  001E0E                     l2943:
  7129  001E0E  5021               	movf	___almod@divisor,w,c
  7130  001E10  5C1D               	subwf	___almod@dividend,w,c
  7131  001E12  5022               	movf	___almod@divisor+1,w,c
  7132  001E14  581E               	subwfb	___almod@dividend+1,w,c
  7133  001E16  5023               	movf	___almod@divisor+2,w,c
  7134  001E18  581F               	subwfb	___almod@dividend+2,w,c
  7135  001E1A  5024               	movf	___almod@divisor+3,w,c
  7136  001E1C  5820               	subwfb	___almod@dividend+3,w,c
  7137  001E1E  A0D8               	btfss	status,0,c
  7138  001E20  D008               	goto	l2947
  7139  001E22  5021               	movf	___almod@divisor,w,c
  7140  001E24  5E1D               	subwf	___almod@dividend,f,c
  7141  001E26  5022               	movf	___almod@divisor+1,w,c
  7142  001E28  5A1E               	subwfb	___almod@dividend+1,f,c
  7143  001E2A  5023               	movf	___almod@divisor+2,w,c
  7144  001E2C  5A1F               	subwfb	___almod@dividend+2,f,c
  7145  001E2E  5024               	movf	___almod@divisor+3,w,c
  7146  001E30  5A20               	subwfb	___almod@dividend+3,f,c
  7147  001E32                     l2947:
  7148  001E32  90D8               	bcf	status,0,c
  7149  001E34  3224               	rrcf	___almod@divisor+3,f,c
  7150  001E36  3223               	rrcf	___almod@divisor+2,f,c
  7151  001E38  3222               	rrcf	___almod@divisor+1,f,c
  7152  001E3A  3221               	rrcf	___almod@divisor,f,c
  7153  001E3C  2E25               	decfsz	___almod@counter,f,c
  7154  001E3E  D7E7               	goto	l2943
  7155  001E40                     l2951:
  7156  001E40  5026               	movf	___almod@sign,w,c
  7157  001E42  B4D8               	btfsc	status,2,c
  7158  001E44  D008               	goto	l2955
  7159  001E46  1E20               	comf	___almod@dividend+3,f,c
  7160  001E48  1E1F               	comf	___almod@dividend+2,f,c
  7161  001E4A  1E1E               	comf	___almod@dividend+1,f,c
  7162  001E4C  6C1D               	negf	___almod@dividend,c
  7163  001E4E  0E00               	movlw	0
  7164  001E50  221E               	addwfc	___almod@dividend+1,f,c
  7165  001E52  221F               	addwfc	___almod@dividend+2,f,c
  7166  001E54  2220               	addwfc	___almod@dividend+3,f,c
  7167  001E56                     l2955:
  7168  001E56  C01D  F01D         	movff	___almod@dividend,?___almod
  7169  001E5A  C01E  F01E         	movff	___almod@dividend+1,?___almod+1
  7170  001E5E  C01F  F01F         	movff	___almod@dividend+2,?___almod+2
  7171  001E62  C020  F020         	movff	___almod@dividend+3,?___almod+3
  7172  001E66  0012               	return	
  7173  001E68                     __end_of___almod:
  7174                           	opt stack 0
  7175                           tblptru	equ	0xFF8
  7176                           prodh	equ	0xFF4
  7177                           prodl	equ	0xFF3
  7178                           intcon	equ	0xFF2
  7179                           intcon2	equ	0xFF1
  7180                           intcon3	equ	0xFF0
  7181                           postinc0	equ	0xFEE
  7182                           wreg	equ	0xFE8
  7183                           indf1	equ	0xFE7
  7184                           postinc1	equ	0xFE6
  7185                           postdec1	equ	0xFE5
  7186                           fsr1h	equ	0xFE2
  7187                           fsr1l	equ	0xFE1
  7188                           indf2	equ	0xFDF
  7189                           postinc2	equ	0xFDE
  7190                           postdec2	equ	0xFDD
  7191                           plusw2	equ	0xFDB
  7192                           fsr2h	equ	0xFDA
  7193                           fsr2l	equ	0xFD9
  7194                           status	equ	0xFD8
  7195                           
  7196 ;; *************** function ___aldiv *****************
  7197 ;; Defined at:
  7198 ;;		line 8 in file "/opt/microchip/xc8/v1.38/sources/common/aldiv.c"
  7199 ;; Parameters:    Size  Location     Type
  7200 ;;  dividend        4   28[COMRAM] long 
  7201 ;;  divisor         4   32[COMRAM] long 
  7202 ;; Auto vars:     Size  Location     Type
  7203 ;;  quotient        4    2[BANK0 ] long 
  7204 ;;  sign            1    1[BANK0 ] unsigned char 
  7205 ;;  counter         1    0[BANK0 ] unsigned char 
  7206 ;; Return value:  Size  Location     Type
  7207 ;;                  4   28[COMRAM] long 
  7208 ;; Registers used:
  7209 ;;		wreg, status,2, status,0
  7210 ;; Tracked objects:
  7211 ;;		On entry : 0/0
  7212 ;;		On exit  : 0/0
  7213 ;;		Unchanged: 0/0
  7214 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7215 ;;      Params:         8       0       0       0       0       0       0
  7216 ;;      Locals:         0       6       0       0       0       0       0
  7217 ;;      Temps:          0       0       0       0       0       0       0
  7218 ;;      Totals:         8       6       0       0       0       0       0
  7219 ;;Total ram usage:       14 bytes
  7220 ;; Hardware stack levels used:    1
  7221 ;; Hardware stack levels required when called:    3
  7222 ;; This function calls:
  7223 ;;		Nothing
  7224 ;; This function is called by:
  7225 ;;		_read_all_adc
  7226 ;;		_measure
  7227 ;; This function uses a non-reentrant model
  7228 ;;
  7229                           
  7230                           	psect	text37
  7231  001C2A                     __ptext37:
  7232                           	opt stack 0
  7233  001C2A                     ___aldiv:
  7234                           	opt stack 26
  7235                           
  7236                           ;incstack = 0
  7237  001C2A  0E00               	movlw	0
  7238  001C2C  0100               	movlb	0	; () banked
  7239  001C2E  6FD2               	movwf	___aldiv@sign& (0+255),b
  7240                           
  7241                           ; BSR set to: 0
  7242  001C30  AE24               	btfss	___aldiv@divisor+3,7,c
  7243  001C32  D00B               	goto	l4059
  7244                           
  7245                           ; BSR set to: 0
  7246  001C34  1E24               	comf	___aldiv@divisor+3,f,c
  7247  001C36  1E23               	comf	___aldiv@divisor+2,f,c
  7248  001C38  1E22               	comf	___aldiv@divisor+1,f,c
  7249  001C3A  6C21               	negf	___aldiv@divisor,c
  7250  001C3C  0E00               	movlw	0
  7251  001C3E  2222               	addwfc	___aldiv@divisor+1,f,c
  7252  001C40  2223               	addwfc	___aldiv@divisor+2,f,c
  7253  001C42  2224               	addwfc	___aldiv@divisor+3,f,c
  7254                           
  7255                           ; BSR set to: 0
  7256  001C44  0E01               	movlw	1
  7257  001C46  0100               	movlb	0	; () banked
  7258  001C48  6FD2               	movwf	___aldiv@sign& (0+255),b
  7259  001C4A                     l4059:
  7260                           
  7261                           ; BSR set to: 0
  7262  001C4A  AE20               	btfss	___aldiv@dividend+3,7,c
  7263  001C4C  D00B               	goto	l4065
  7264                           
  7265                           ; BSR set to: 0
  7266  001C4E  1E20               	comf	___aldiv@dividend+3,f,c
  7267  001C50  1E1F               	comf	___aldiv@dividend+2,f,c
  7268  001C52  1E1E               	comf	___aldiv@dividend+1,f,c
  7269  001C54  6C1D               	negf	___aldiv@dividend,c
  7270  001C56  0E00               	movlw	0
  7271  001C58  221E               	addwfc	___aldiv@dividend+1,f,c
  7272  001C5A  221F               	addwfc	___aldiv@dividend+2,f,c
  7273  001C5C  2220               	addwfc	___aldiv@dividend+3,f,c
  7274                           
  7275                           ; BSR set to: 0
  7276  001C5E  0E01               	movlw	1
  7277  001C60  0100               	movlb	0	; () banked
  7278  001C62  1BD2               	xorwf	___aldiv@sign& (0+255),f,b
  7279  001C64                     l4065:
  7280                           
  7281                           ; BSR set to: 0
  7282  001C64  0E00               	movlw	0
  7283  001C66  0100               	movlb	0	; () banked
  7284  001C68  6FD3               	movwf	___aldiv@quotient& (0+255),b
  7285  001C6A  0E00               	movlw	0
  7286  001C6C  6FD4               	movwf	(___aldiv@quotient+1)& (0+255),b
  7287  001C6E  0E00               	movlw	0
  7288  001C70  6FD5               	movwf	(___aldiv@quotient+2)& (0+255),b
  7289  001C72  0E00               	movlw	0
  7290  001C74  6FD6               	movwf	(___aldiv@quotient+3)& (0+255),b
  7291                           
  7292                           ; BSR set to: 0
  7293  001C76  5021               	movf	___aldiv@divisor,w,c
  7294  001C78  1022               	iorwf	___aldiv@divisor+1,w,c
  7295  001C7A  1023               	iorwf	___aldiv@divisor+2,w,c
  7296  001C7C  1024               	iorwf	___aldiv@divisor+3,w,c
  7297  001C7E  B4D8               	btfsc	status,2,c
  7298  001C80  D02F               	goto	l4087
  7299                           
  7300                           ; BSR set to: 0
  7301  001C82  0E01               	movlw	1
  7302  001C84  0100               	movlb	0	; () banked
  7303  001C86  6FD1               	movwf	___aldiv@counter& (0+255),b
  7304  001C88  D007               	goto	l4073
  7305  001C8A                     l4071:
  7306                           
  7307                           ; BSR set to: 0
  7308  001C8A  90D8               	bcf	status,0,c
  7309  001C8C  3621               	rlcf	___aldiv@divisor,f,c
  7310  001C8E  3622               	rlcf	___aldiv@divisor+1,f,c
  7311  001C90  3623               	rlcf	___aldiv@divisor+2,f,c
  7312  001C92  3624               	rlcf	___aldiv@divisor+3,f,c
  7313  001C94  0100               	movlb	0	; () banked
  7314  001C96  2BD1               	incf	___aldiv@counter& (0+255),f,b
  7315  001C98                     l4073:
  7316                           
  7317                           ; BSR set to: 0
  7318  001C98  AE24               	btfss	___aldiv@divisor+3,7,c
  7319  001C9A  D7F7               	goto	l4071
  7320  001C9C                     l4075:
  7321                           
  7322                           ; BSR set to: 0
  7323  001C9C  0100               	movlb	0	; () banked
  7324  001C9E  90D8               	bcf	status,0,c
  7325  001CA0  37D3               	rlcf	___aldiv@quotient& (0+255),f,b
  7326  001CA2  37D4               	rlcf	(___aldiv@quotient+1)& (0+255),f,b
  7327  001CA4  37D5               	rlcf	(___aldiv@quotient+2)& (0+255),f,b
  7328  001CA6  37D6               	rlcf	(___aldiv@quotient+3)& (0+255),f,b
  7329                           
  7330                           ; BSR set to: 0
  7331  001CA8  5021               	movf	___aldiv@divisor,w,c
  7332  001CAA  5C1D               	subwf	___aldiv@dividend,w,c
  7333  001CAC  5022               	movf	___aldiv@divisor+1,w,c
  7334  001CAE  581E               	subwfb	___aldiv@dividend+1,w,c
  7335  001CB0  5023               	movf	___aldiv@divisor+2,w,c
  7336  001CB2  581F               	subwfb	___aldiv@dividend+2,w,c
  7337  001CB4  5024               	movf	___aldiv@divisor+3,w,c
  7338  001CB6  5820               	subwfb	___aldiv@dividend+3,w,c
  7339  001CB8  A0D8               	btfss	status,0,c
  7340  001CBA  D00A               	goto	l4083
  7341                           
  7342                           ; BSR set to: 0
  7343  001CBC  5021               	movf	___aldiv@divisor,w,c
  7344  001CBE  5E1D               	subwf	___aldiv@dividend,f,c
  7345  001CC0  5022               	movf	___aldiv@divisor+1,w,c
  7346  001CC2  5A1E               	subwfb	___aldiv@dividend+1,f,c
  7347  001CC4  5023               	movf	___aldiv@divisor+2,w,c
  7348  001CC6  5A1F               	subwfb	___aldiv@dividend+2,f,c
  7349  001CC8  5024               	movf	___aldiv@divisor+3,w,c
  7350  001CCA  5A20               	subwfb	___aldiv@dividend+3,f,c
  7351                           
  7352                           ; BSR set to: 0
  7353  001CCC  0100               	movlb	0	; () banked
  7354  001CCE  81D3               	bsf	___aldiv@quotient& (0+255),0,b
  7355  001CD0                     l4083:
  7356                           
  7357                           ; BSR set to: 0
  7358  001CD0  90D8               	bcf	status,0,c
  7359  001CD2  3224               	rrcf	___aldiv@divisor+3,f,c
  7360  001CD4  3223               	rrcf	___aldiv@divisor+2,f,c
  7361  001CD6  3222               	rrcf	___aldiv@divisor+1,f,c
  7362  001CD8  3221               	rrcf	___aldiv@divisor,f,c
  7363                           
  7364                           ; BSR set to: 0
  7365  001CDA  0100               	movlb	0	; () banked
  7366  001CDC  2FD1               	decfsz	___aldiv@counter& (0+255),f,b
  7367  001CDE  D7DE               	goto	l4075
  7368  001CE0                     l4087:
  7369                           
  7370                           ; BSR set to: 0
  7371  001CE0  0100               	movlb	0	; () banked
  7372  001CE2  51D2               	movf	___aldiv@sign& (0+255),w,b
  7373  001CE4  0100               	movlb	0	; () banked
  7374  001CE6  B4D8               	btfsc	status,2,c
  7375  001CE8  D009               	goto	l4091
  7376                           
  7377                           ; BSR set to: 0
  7378  001CEA  0100               	movlb	0	; () banked
  7379  001CEC  1FD6               	comf	(___aldiv@quotient+3)& (0+255),f,b
  7380  001CEE  1FD5               	comf	(___aldiv@quotient+2)& (0+255),f,b
  7381  001CF0  1FD4               	comf	(___aldiv@quotient+1)& (0+255),f,b
  7382  001CF2  6DD3               	negf	___aldiv@quotient& (0+255),b
  7383  001CF4  0E00               	movlw	0
  7384  001CF6  23D4               	addwfc	(___aldiv@quotient+1)& (0+255),f,b
  7385  001CF8  23D5               	addwfc	(___aldiv@quotient+2)& (0+255),f,b
  7386  001CFA  23D6               	addwfc	(___aldiv@quotient+3)& (0+255),f,b
  7387  001CFC                     l4091:
  7388                           
  7389                           ; BSR set to: 0
  7390  001CFC  C0D3  F01D         	movff	___aldiv@quotient,?___aldiv
  7391  001D00  C0D4  F01E         	movff	___aldiv@quotient+1,?___aldiv+1
  7392  001D04  C0D5  F01F         	movff	___aldiv@quotient+2,?___aldiv+2
  7393  001D08  C0D6  F020         	movff	___aldiv@quotient+3,?___aldiv+3
  7394  001D0C  0012               	return	
  7395  001D0E                     __end_of___aldiv:
  7396                           	opt stack 0
  7397                           tblptru	equ	0xFF8
  7398                           prodh	equ	0xFF4
  7399                           prodl	equ	0xFF3
  7400                           intcon	equ	0xFF2
  7401                           intcon2	equ	0xFF1
  7402                           intcon3	equ	0xFF0
  7403                           postinc0	equ	0xFEE
  7404                           wreg	equ	0xFE8
  7405                           indf1	equ	0xFE7
  7406                           postinc1	equ	0xFE6
  7407                           postdec1	equ	0xFE5
  7408                           fsr1h	equ	0xFE2
  7409                           fsr1l	equ	0xFE1
  7410                           indf2	equ	0xFDF
  7411                           postinc2	equ	0xFDE
  7412                           postdec2	equ	0xFDD
  7413                           plusw2	equ	0xFDB
  7414                           fsr2h	equ	0xFDA
  7415                           fsr2l	equ	0xFD9
  7416                           status	equ	0xFD8
  7417                           
  7418 ;; *************** function _load_EEPROM *****************
  7419 ;; Defined at:
  7420 ;;		line 31 in file "eeprom.c"
  7421 ;; Parameters:    Size  Location     Type
  7422 ;;  point           2   29[COMRAM] PTR int 
  7423 ;;		 -> Registers(400), 
  7424 ;;  len             1   31[COMRAM] unsigned char 
  7425 ;; Auto vars:     Size  Location     Type
  7426 ;;  tmp_8bit        2    2[BANK0 ] unsigned char [2]
  7427 ;;  addr            2    6[BANK0 ] unsigned int 
  7428 ;;  tmp             2    4[BANK0 ] unsigned int 
  7429 ;;  tmp_16bit       2    0[BANK0 ] PTR unsigned int 
  7430 ;;		 -> load_EEPROM@tmp_8bit(2), 
  7431 ;; Return value:  Size  Location     Type
  7432 ;;                  1    wreg      void 
  7433 ;; Registers used:
  7434 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  7435 ;; Tracked objects:
  7436 ;;		On entry : 0/0
  7437 ;;		On exit  : 0/0
  7438 ;;		Unchanged: 0/0
  7439 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7440 ;;      Params:         3       0       0       0       0       0       0
  7441 ;;      Locals:         0       8       0       0       0       0       0
  7442 ;;      Temps:          2       0       0       0       0       0       0
  7443 ;;      Totals:         5       8       0       0       0       0       0
  7444 ;;Total ram usage:       13 bytes
  7445 ;; Hardware stack levels used:    1
  7446 ;; Hardware stack levels required when called:    4
  7447 ;; This function calls:
  7448 ;;		_read_eeprom
  7449 ;; This function is called by:
  7450 ;;		_main
  7451 ;; This function uses a non-reentrant model
  7452 ;;
  7453                           
  7454                           	psect	text38
  7455  001F8E                     __ptext38:
  7456                           	opt stack 0
  7457  001F8E                     _load_EEPROM:
  7458                           	opt stack 26
  7459                           
  7460                           ;eeprom.c: 32: unsigned int addr, tmp;
  7461                           ;eeprom.c: 33: unsigned char tmp_8bit[2];
  7462                           ;eeprom.c: 34: unsigned int * tmp_16bit;
  7463                           ;eeprom.c: 35: tmp_16bit=&tmp_8bit[0];
  7464                           
  7465                           ; BSR set to: 0
  7466                           ;incstack = 0
  7467  001F8E  0ED3               	movlw	low load_EEPROM@tmp_8bit
  7468  001F90  0100               	movlb	0	; () banked
  7469  001F92  6FD1               	movwf	load_EEPROM@tmp_16bit& (0+255),b
  7470  001F94  0E00               	movlw	high load_EEPROM@tmp_8bit
  7471  001F96  0100               	movlb	0	; () banked
  7472  001F98  6FD2               	movwf	(load_EEPROM@tmp_16bit+1)& (0+255),b
  7473                           
  7474                           ; BSR set to: 0
  7475                           ;eeprom.c: 36: for(addr=0;addr<len;addr++){
  7476  001F9A  0E00               	movlw	0
  7477  001F9C  0100               	movlb	0	; () banked
  7478  001F9E  6FD8               	movwf	(load_EEPROM@addr+1)& (0+255),b
  7479  001FA0  0E00               	movlw	0
  7480  001FA2  6FD7               	movwf	load_EEPROM@addr& (0+255),b
  7481  001FA4  D028               	goto	l4327
  7482  001FA6                     l4315:
  7483                           
  7484                           ; BSR set to: 0
  7485                           ;eeprom.c: 37: tmp=addr+addr;
  7486  001FA6  90D8               	bcf	status,0,c
  7487  001FA8  0100               	movlb	0	; () banked
  7488  001FAA  35D7               	rlcf	load_EEPROM@addr& (0+255),w,b
  7489  001FAC  0100               	movlb	0	; () banked
  7490  001FAE  6FD5               	movwf	load_EEPROM@tmp& (0+255),b
  7491  001FB0  0100               	movlb	0	; () banked
  7492  001FB2  35D8               	rlcf	(load_EEPROM@addr+1)& (0+255),w,b
  7493  001FB4  0100               	movlb	0	; () banked
  7494  001FB6  6FD6               	movwf	(load_EEPROM@tmp+1)& (0+255),b
  7495                           
  7496                           ; BSR set to: 0
  7497                           ;eeprom.c: 38: tmp_8bit[1]=read_eeprom (tmp);
  7498  001FB8  0100               	movlb	0	; () banked
  7499  001FBA  51D5               	movf	load_EEPROM@tmp& (0+255),w,b
  7500  001FBC  EC1C  F013         	call	_read_eeprom
  7501  001FC0  0100               	movlb	0	; () banked
  7502  001FC2  6FD4               	movwf	(load_EEPROM@tmp_8bit+1)& (0+255),b
  7503                           
  7504                           ; BSR set to: 0
  7505                           ;eeprom.c: 39: tmp_8bit[0]=read_eeprom (tmp+1);
  7506  001FC4  0100               	movlb	0	; () banked
  7507  001FC6  29D5               	incf	load_EEPROM@tmp& (0+255),w,b
  7508  001FC8  EC1C  F013         	call	_read_eeprom
  7509  001FCC  0100               	movlb	0	; () banked
  7510  001FCE  6FD3               	movwf	load_EEPROM@tmp_8bit& (0+255),b
  7511                           
  7512                           ; BSR set to: 0
  7513                           ;eeprom.c: 40: *point=*tmp_16bit;
  7514  001FD0  C0D1  FFD9         	movff	load_EEPROM@tmp_16bit,fsr2l
  7515  001FD4  C0D2  FFDA         	movff	load_EEPROM@tmp_16bit+1,fsr2h
  7516  001FD8  C01E  FFE1         	movff	load_EEPROM@point,fsr1l
  7517  001FDC  C01F  FFE2         	movff	load_EEPROM@point+1,fsr1h
  7518  001FE0  CFDE FFE6          	movff	postinc2,postinc1
  7519  001FE4  CFDD FFE5          	movff	postdec2,postdec1
  7520                           
  7521                           ; BSR set to: 0
  7522                           ;eeprom.c: 41: point++;
  7523  001FE8  0E02               	movlw	2
  7524  001FEA  261E               	addwf	load_EEPROM@point,f,c
  7525  001FEC  0E00               	movlw	0
  7526  001FEE  221F               	addwfc	load_EEPROM@point+1,f,c
  7527                           
  7528                           ; BSR set to: 0
  7529  001FF0  0100               	movlb	0	; () banked
  7530  001FF2  4BD7               	infsnz	load_EEPROM@addr& (0+255),f,b
  7531  001FF4  2BD8               	incf	(load_EEPROM@addr+1)& (0+255),f,b
  7532  001FF6                     l4327:
  7533                           
  7534                           ; BSR set to: 0
  7535  001FF6  5020               	movf	load_EEPROM@len,w,c
  7536  001FF8  6E21               	movwf	??_load_EEPROM& (0+255),c
  7537  001FFA  6A22               	clrf	(??_load_EEPROM+1)& (0+255),c
  7538  001FFC  5021               	movf	??_load_EEPROM,w,c
  7539  001FFE  0100               	movlb	0	; () banked
  7540  002000  5DD7               	subwf	load_EEPROM@addr& (0+255),w,b
  7541  002002  5022               	movf	??_load_EEPROM+1,w,c
  7542  002004  0100               	movlb	0	; () banked
  7543  002006  59D8               	subwfb	(load_EEPROM@addr+1)& (0+255),w,b
  7544  002008  B0D8               	btfsc	status,0,c
  7545  00200A  0012               	return	
  7546  00200C  D7CC               	goto	l4315
  7547  00200E                     __end_of_load_EEPROM:
  7548                           	opt stack 0
  7549                           tblptru	equ	0xFF8
  7550                           prodh	equ	0xFF4
  7551                           prodl	equ	0xFF3
  7552                           intcon	equ	0xFF2
  7553                           intcon2	equ	0xFF1
  7554                           intcon3	equ	0xFF0
  7555                           postinc0	equ	0xFEE
  7556                           wreg	equ	0xFE8
  7557                           indf1	equ	0xFE7
  7558                           postinc1	equ	0xFE6
  7559                           postdec1	equ	0xFE5
  7560                           fsr1h	equ	0xFE2
  7561                           fsr1l	equ	0xFE1
  7562                           indf2	equ	0xFDF
  7563                           postinc2	equ	0xFDE
  7564                           postdec2	equ	0xFDD
  7565                           plusw2	equ	0xFDB
  7566                           fsr2h	equ	0xFDA
  7567                           fsr2l	equ	0xFD9
  7568                           status	equ	0xFD8
  7569                           
  7570 ;; *************** function _read_eeprom *****************
  7571 ;; Defined at:
  7572 ;;		line 1 in file "eeprom.c"
  7573 ;; Parameters:    Size  Location     Type
  7574 ;;  addr            1    wreg     unsigned char 
  7575 ;; Auto vars:     Size  Location     Type
  7576 ;;  addr            1   28[COMRAM] unsigned char 
  7577 ;; Return value:  Size  Location     Type
  7578 ;;                  1    wreg      unsigned char 
  7579 ;; Registers used:
  7580 ;;		wreg, status,2
  7581 ;; Tracked objects:
  7582 ;;		On entry : 0/0
  7583 ;;		On exit  : 0/0
  7584 ;;		Unchanged: 0/0
  7585 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7586 ;;      Params:         0       0       0       0       0       0       0
  7587 ;;      Locals:         1       0       0       0       0       0       0
  7588 ;;      Temps:          0       0       0       0       0       0       0
  7589 ;;      Totals:         1       0       0       0       0       0       0
  7590 ;;Total ram usage:        1 bytes
  7591 ;; Hardware stack levels used:    1
  7592 ;; Hardware stack levels required when called:    3
  7593 ;; This function calls:
  7594 ;;		Nothing
  7595 ;; This function is called by:
  7596 ;;		_load_EEPROM
  7597 ;; This function uses a non-reentrant model
  7598 ;;
  7599                           
  7600                           	psect	text39
  7601  002638                     __ptext39:
  7602                           	opt stack 0
  7603  002638                     _read_eeprom:
  7604                           	opt stack 26
  7605                           
  7606                           ; BSR set to: 0
  7607                           ;incstack = 0
  7608                           ;read_eeprom@addr stored from wreg
  7609  002638  6E1D               	movwf	read_eeprom@addr,c
  7610                           
  7611                           ;eeprom.c: 2: EEADR=addr;
  7612  00263A  C01D  FFA9         	movff	read_eeprom@addr,4009	;volatile
  7613                           
  7614                           ;eeprom.c: 3: EECON1bits.EEPGD=0;
  7615  00263E  9EA6               	bcf	4006,7,c	;volatile
  7616                           
  7617                           ;eeprom.c: 4: EECON1bits.CFGS=0;
  7618  002640  9CA6               	bcf	4006,6,c	;volatile
  7619                           
  7620                           ;eeprom.c: 5: EECON1bits.RD=1;
  7621  002642  80A6               	bsf	4006,0,c	;volatile
  7622                           
  7623                           ;eeprom.c: 6: return EEDATA;
  7624  002644  50A8               	movf	4008,w,c	;volatile
  7625  002646  0012               	return	
  7626  002648                     __end_of_read_eeprom:
  7627                           	opt stack 0
  7628                           tblptru	equ	0xFF8
  7629                           prodh	equ	0xFF4
  7630                           prodl	equ	0xFF3
  7631                           intcon	equ	0xFF2
  7632                           intcon2	equ	0xFF1
  7633                           intcon3	equ	0xFF0
  7634                           postinc0	equ	0xFEE
  7635                           wreg	equ	0xFE8
  7636                           indf1	equ	0xFE7
  7637                           postinc1	equ	0xFE6
  7638                           postdec1	equ	0xFE5
  7639                           fsr1h	equ	0xFE2
  7640                           fsr1l	equ	0xFE1
  7641                           indf2	equ	0xFDF
  7642                           postinc2	equ	0xFDE
  7643                           postdec2	equ	0xFDD
  7644                           plusw2	equ	0xFDB
  7645                           fsr2h	equ	0xFDA
  7646                           fsr2l	equ	0xFD9
  7647                           status	equ	0xFD8
  7648                           
  7649 ;; *************** function _change_channel *****************
  7650 ;; Defined at:
  7651 ;;		line 288 in file "spi.c"
  7652 ;; Parameters:    Size  Location     Type
  7653 ;;  ch              1    wreg     unsigned char 
  7654 ;; Auto vars:     Size  Location     Type
  7655 ;;  ch              1   35[COMRAM] unsigned char 
  7656 ;; Return value:  Size  Location     Type
  7657 ;;                  1    wreg      void 
  7658 ;; Registers used:
  7659 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7660 ;; Tracked objects:
  7661 ;;		On entry : 0/0
  7662 ;;		On exit  : 0/0
  7663 ;;		Unchanged: 0/0
  7664 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7665 ;;      Params:         0       0       0       0       0       0       0
  7666 ;;      Locals:         1       0       0       0       0       0       0
  7667 ;;      Temps:          0       0       0       0       0       0       0
  7668 ;;      Totals:         1       0       0       0       0       0       0
  7669 ;;Total ram usage:        1 bytes
  7670 ;; Hardware stack levels used:    1
  7671 ;; Hardware stack levels required when called:    6
  7672 ;; This function calls:
  7673 ;;		_spi_write
  7674 ;; This function is called by:
  7675 ;;		_main
  7676 ;; This function uses a non-reentrant model
  7677 ;;
  7678                           
  7679                           	psect	text40
  7680  00200E                     __ptext40:
  7681                           	opt stack 0
  7682  00200E                     _change_channel:
  7683                           	opt stack 24
  7684                           
  7685                           ;incstack = 0
  7686                           ;change_channel@ch stored from wreg
  7687  00200E  6E24               	movwf	change_channel@ch,c
  7688                           
  7689                           ;spi.c: 290: spi_data[0]=0b00000010+ch;
  7690  002010  5024               	movf	change_channel@ch,w,c
  7691  002012  0F02               	addlw	2
  7692  002014  0100               	movlb	0	; () banked
  7693  002016  6FAE               	movwf	_spi_data& (0+255),b
  7694                           
  7695                           ; BSR set to: 0
  7696                           ;spi.c: 291: spi_write(spi_data,0x05,1);
  7697  002018  0EAE               	movlw	low _spi_data
  7698  00201A  6E1F               	movwf	spi_write@data,c
  7699  00201C  0E00               	movlw	high _spi_data
  7700  00201E  6E20               	movwf	spi_write@data+1,c
  7701  002020  0E05               	movlw	5
  7702  002022  6E21               	movwf	spi_write@adr,c
  7703  002024  0E01               	movlw	1
  7704  002026  6E22               	movwf	spi_write@len,c
  7705  002028  ECF2  F011         	call	_spi_write	;wreg free
  7706                           
  7707                           ;spi.c: 293: spi_data[0]=ch;
  7708  00202C  C024  F0AE         	movff	change_channel@ch,_spi_data
  7709                           
  7710                           ;spi.c: 294: spi_data[1]=0xE7;
  7711  002030  0EE7               	movlw	231
  7712  002032  0100               	movlb	0	; () banked
  7713  002034  6FAF               	movwf	(_spi_data+1)& (0+255),b
  7714                           
  7715                           ; BSR set to: 0
  7716                           ;spi.c: 295: spi_data[2]=ch;
  7717  002036  C024  F0B0         	movff	change_channel@ch,_spi_data+2
  7718                           
  7719                           ; BSR set to: 0
  7720                           ;spi.c: 296: spi_data[3]=ch;
  7721  00203A  C024  F0B1         	movff	change_channel@ch,_spi_data+3
  7722                           
  7723                           ; BSR set to: 0
  7724                           ;spi.c: 297: spi_data[4]=0xE7;
  7725  00203E  0EE7               	movlw	231
  7726  002040  0100               	movlb	0	; () banked
  7727  002042  6FB2               	movwf	(_spi_data+4)& (0+255),b
  7728                           
  7729                           ; BSR set to: 0
  7730                           ;spi.c: 298: spi_write(spi_data,0x10,5);
  7731  002044  0EAE               	movlw	low _spi_data
  7732  002046  6E1F               	movwf	spi_write@data,c
  7733  002048  0E00               	movlw	high _spi_data
  7734  00204A  6E20               	movwf	spi_write@data+1,c
  7735  00204C  0E10               	movlw	16
  7736  00204E  6E21               	movwf	spi_write@adr,c
  7737  002050  0E05               	movlw	5
  7738  002052  6E22               	movwf	spi_write@len,c
  7739  002054  ECF2  F011         	call	_spi_write	;wreg free
  7740                           
  7741                           ;spi.c: 300: spi_data[0]=ch;
  7742  002058  C024  F0AE         	movff	change_channel@ch,_spi_data
  7743                           
  7744                           ;spi.c: 301: spi_data[1]=0xE7;
  7745  00205C  0EE7               	movlw	231
  7746  00205E  0100               	movlb	0	; () banked
  7747  002060  6FAF               	movwf	(_spi_data+1)& (0+255),b
  7748                           
  7749                           ; BSR set to: 0
  7750                           ;spi.c: 302: spi_data[2]=ch;
  7751  002062  C024  F0B0         	movff	change_channel@ch,_spi_data+2
  7752                           
  7753                           ; BSR set to: 0
  7754                           ;spi.c: 303: spi_data[3]=ch;
  7755  002066  C024  F0B1         	movff	change_channel@ch,_spi_data+3
  7756                           
  7757                           ; BSR set to: 0
  7758                           ;spi.c: 304: spi_data[4]=0xE7;
  7759  00206A  0EE7               	movlw	231
  7760  00206C  0100               	movlb	0	; () banked
  7761  00206E  6FB2               	movwf	(_spi_data+4)& (0+255),b
  7762                           
  7763                           ; BSR set to: 0
  7764                           ;spi.c: 305: spi_write(spi_data,0x0A,5);
  7765  002070  0EAE               	movlw	low _spi_data
  7766  002072  6E1F               	movwf	spi_write@data,c
  7767  002074  0E00               	movlw	high _spi_data
  7768  002076  6E20               	movwf	spi_write@data+1,c
  7769  002078  0E0A               	movlw	10
  7770  00207A  6E21               	movwf	spi_write@adr,c
  7771  00207C  0E05               	movlw	5
  7772  00207E  6E22               	movwf	spi_write@len,c
  7773  002080  ECF2  F011         	call	_spi_write	;wreg free
  7774  002084  0012               	return		;funcret
  7775  002086                     __end_of_change_channel:
  7776                           	opt stack 0
  7777                           tblptru	equ	0xFF8
  7778                           prodh	equ	0xFF4
  7779                           prodl	equ	0xFF3
  7780                           intcon	equ	0xFF2
  7781                           intcon2	equ	0xFF1
  7782                           intcon3	equ	0xFF0
  7783                           postinc0	equ	0xFEE
  7784                           wreg	equ	0xFE8
  7785                           indf1	equ	0xFE7
  7786                           postinc1	equ	0xFE6
  7787                           postdec1	equ	0xFE5
  7788                           fsr1h	equ	0xFE2
  7789                           fsr1l	equ	0xFE1
  7790                           indf2	equ	0xFDF
  7791                           postinc2	equ	0xFDE
  7792                           postdec2	equ	0xFDD
  7793                           plusw2	equ	0xFDB
  7794                           fsr2h	equ	0xFDA
  7795                           fsr2l	equ	0xFD9
  7796                           status	equ	0xFD8
  7797                           
  7798 ;; *************** function _spi_write *****************
  7799 ;; Defined at:
  7800 ;;		line 81 in file "spi.c"
  7801 ;; Parameters:    Size  Location     Type
  7802 ;;  data            2   30[COMRAM] PTR unsigned char 
  7803 ;;		 -> spi_data(35), 
  7804 ;;  adr             1   32[COMRAM] unsigned char 
  7805 ;;  len             1   33[COMRAM] unsigned char 
  7806 ;; Auto vars:     Size  Location     Type
  7807 ;;  i               1   34[COMRAM] unsigned char 
  7808 ;; Return value:  Size  Location     Type
  7809 ;;                  1    wreg      void 
  7810 ;; Registers used:
  7811 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7812 ;; Tracked objects:
  7813 ;;		On entry : 0/0
  7814 ;;		On exit  : 0/0
  7815 ;;		Unchanged: 0/0
  7816 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7817 ;;      Params:         4       0       0       0       0       0       0
  7818 ;;      Locals:         1       0       0       0       0       0       0
  7819 ;;      Temps:          0       0       0       0       0       0       0
  7820 ;;      Totals:         5       0       0       0       0       0       0
  7821 ;;Total ram usage:        5 bytes
  7822 ;; Hardware stack levels used:    1
  7823 ;; Hardware stack levels required when called:    5
  7824 ;; This function calls:
  7825 ;;		_SPI
  7826 ;;		_spi_end_command
  7827 ;;		_spi_start_command
  7828 ;; This function is called by:
  7829 ;;		_receive_init
  7830 ;;		_spi_transmit
  7831 ;;		_receive_check
  7832 ;;		_change_channel
  7833 ;; This function uses a non-reentrant model
  7834 ;;
  7835                           
  7836                           	psect	text41
  7837  0023E4                     __ptext41:
  7838                           	opt stack 0
  7839  0023E4                     _spi_write:
  7840                           	opt stack 24
  7841                           
  7842                           ;spi.c: 82: unsigned char i=0;
  7843                           
  7844                           ;incstack = 0
  7845  0023E4  0E00               	movlw	0
  7846  0023E6  6E23               	movwf	spi_write@i,c
  7847                           
  7848                           ;spi.c: 83: spi_start_command();
  7849  0023E8  EC46  F013         	call	_spi_start_command	;wreg free
  7850                           
  7851                           ;spi.c: 84: SPI(adr | 0b00100000);
  7852  0023EC  5021               	movf	spi_write@adr,w,c
  7853  0023EE  0920               	iorlw	32
  7854  0023F0  ECAA  F012         	call	_SPI
  7855                           
  7856                           ;spi.c: 85: for(i=0;i<len;i++){
  7857  0023F4  0E00               	movlw	0
  7858  0023F6  6E23               	movwf	spi_write@i,c
  7859  0023F8  D00C               	goto	l3843
  7860  0023FA                     l3839:
  7861                           
  7862                           ;spi.c: 86: SPI(data[i]);
  7863  0023FA  5023               	movf	spi_write@i,w,c
  7864  0023FC  0D01               	mullw	1
  7865  0023FE  50F3               	movf	prodl,w,c
  7866  002400  241F               	addwf	spi_write@data,w,c
  7867  002402  6ED9               	movwf	fsr2l,c
  7868  002404  50F4               	movf	prodh,w,c
  7869  002406  2020               	addwfc	spi_write@data+1,w,c
  7870  002408  6EDA               	movwf	fsr2h,c
  7871  00240A  50DF               	movf	indf2,w,c
  7872  00240C  ECAA  F012         	call	_SPI
  7873  002410  2A23               	incf	spi_write@i,f,c
  7874  002412                     l3843:
  7875  002412  5022               	movf	spi_write@len,w,c
  7876  002414  5C23               	subwf	spi_write@i,w,c
  7877  002416  A0D8               	btfss	status,0,c
  7878  002418  D7F0               	goto	l3839
  7879                           
  7880                           ;spi.c: 87: }
  7881                           ;spi.c: 88: spi_end_command();
  7882  00241A  EC5B  F013         	call	_spi_end_command	;wreg free
  7883  00241E  0012               	return		;funcret
  7884  002420                     __end_of_spi_write:
  7885                           	opt stack 0
  7886                           tblptru	equ	0xFF8
  7887                           prodh	equ	0xFF4
  7888                           prodl	equ	0xFF3
  7889                           intcon	equ	0xFF2
  7890                           intcon2	equ	0xFF1
  7891                           intcon3	equ	0xFF0
  7892                           postinc0	equ	0xFEE
  7893                           wreg	equ	0xFE8
  7894                           indf1	equ	0xFE7
  7895                           postinc1	equ	0xFE6
  7896                           postdec1	equ	0xFE5
  7897                           fsr1h	equ	0xFE2
  7898                           fsr1l	equ	0xFE1
  7899                           indf2	equ	0xFDF
  7900                           postinc2	equ	0xFDE
  7901                           postdec2	equ	0xFDD
  7902                           plusw2	equ	0xFDB
  7903                           fsr2h	equ	0xFDA
  7904                           fsr2l	equ	0xFD9
  7905                           status	equ	0xFD8
  7906                           
  7907 ;; *************** function _spi_start_command *****************
  7908 ;; Defined at:
  7909 ;;		line 41 in file "spi.c"
  7910 ;; Parameters:    Size  Location     Type
  7911 ;;		None
  7912 ;; Auto vars:     Size  Location     Type
  7913 ;;		None
  7914 ;; Return value:  Size  Location     Type
  7915 ;;                  1    wreg      void 
  7916 ;; Registers used:
  7917 ;;		wreg, status,2, status,0, cstack
  7918 ;; Tracked objects:
  7919 ;;		On entry : 0/0
  7920 ;;		On exit  : 0/0
  7921 ;;		Unchanged: 0/0
  7922 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7923 ;;      Params:         0       0       0       0       0       0       0
  7924 ;;      Locals:         0       0       0       0       0       0       0
  7925 ;;      Temps:          0       0       0       0       0       0       0
  7926 ;;      Totals:         0       0       0       0       0       0       0
  7927 ;;Total ram usage:        0 bytes
  7928 ;; Hardware stack levels used:    1
  7929 ;; Hardware stack levels required when called:    4
  7930 ;; This function calls:
  7931 ;;		_delay
  7932 ;; This function is called by:
  7933 ;;		_spi_read
  7934 ;;		_spi_write
  7935 ;;		_spi_transmit
  7936 ;;		_write_payload
  7937 ;; This function uses a non-reentrant model
  7938 ;;
  7939                           
  7940                           	psect	text42
  7941  00268C                     __ptext42:
  7942                           	opt stack 0
  7943  00268C                     _spi_start_command:
  7944                           	opt stack 24
  7945                           
  7946                           ;spi.c: 43: PORTCbits.RC2=1;
  7947                           
  7948                           ;incstack = 0
  7949  00268C  8482               	bsf	3970,2,c	;volatile
  7950                           
  7951                           ;spi.c: 44: delay();
  7952  00268E  EC0B  F013         	call	_delay	;wreg free
  7953                           
  7954                           ;spi.c: 45: PORTCbits.RC2=0;
  7955  002692  9482               	bcf	3970,2,c	;volatile
  7956  002694  0012               	return		;funcret
  7957  002696                     __end_of_spi_start_command:
  7958                           	opt stack 0
  7959                           tblptru	equ	0xFF8
  7960                           prodh	equ	0xFF4
  7961                           prodl	equ	0xFF3
  7962                           intcon	equ	0xFF2
  7963                           intcon2	equ	0xFF1
  7964                           intcon3	equ	0xFF0
  7965                           postinc0	equ	0xFEE
  7966                           wreg	equ	0xFE8
  7967                           indf1	equ	0xFE7
  7968                           postinc1	equ	0xFE6
  7969                           postdec1	equ	0xFE5
  7970                           fsr1h	equ	0xFE2
  7971                           fsr1l	equ	0xFE1
  7972                           indf2	equ	0xFDF
  7973                           postinc2	equ	0xFDE
  7974                           postdec2	equ	0xFDD
  7975                           plusw2	equ	0xFDB
  7976                           fsr2h	equ	0xFDA
  7977                           fsr2l	equ	0xFD9
  7978                           status	equ	0xFD8
  7979                           
  7980 ;; *************** function _delay *****************
  7981 ;; Defined at:
  7982 ;;		line 10 in file "spi.c"
  7983 ;; Parameters:    Size  Location     Type
  7984 ;;		None
  7985 ;; Auto vars:     Size  Location     Type
  7986 ;;  i               1   28[COMRAM] unsigned char 
  7987 ;; Return value:  Size  Location     Type
  7988 ;;                  1    wreg      void 
  7989 ;; Registers used:
  7990 ;;		wreg, status,2, status,0
  7991 ;; Tracked objects:
  7992 ;;		On entry : 0/0
  7993 ;;		On exit  : 0/0
  7994 ;;		Unchanged: 0/0
  7995 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7996 ;;      Params:         0       0       0       0       0       0       0
  7997 ;;      Locals:         1       0       0       0       0       0       0
  7998 ;;      Temps:          0       0       0       0       0       0       0
  7999 ;;      Totals:         1       0       0       0       0       0       0
  8000 ;;Total ram usage:        1 bytes
  8001 ;; Hardware stack levels used:    1
  8002 ;; Hardware stack levels required when called:    3
  8003 ;; This function calls:
  8004 ;;		Nothing
  8005 ;; This function is called by:
  8006 ;;		_send
  8007 ;;		_spi_start_command
  8008 ;;		_receive_init
  8009 ;; This function uses a non-reentrant model
  8010 ;;
  8011                           
  8012                           	psect	text43
  8013  002616                     __ptext43:
  8014                           	opt stack 0
  8015  002616                     _delay:
  8016                           	opt stack 24
  8017                           
  8018                           ;spi.c: 12: char i;
  8019                           ;spi.c: 13: for(i=0;i<200;i++)
  8020                           
  8021                           ;incstack = 0
  8022  002616  0E00               	movlw	0
  8023  002618  6E1D               	movwf	delay@i,c
  8024  00261A                     l3753:
  8025  00261A  0EC7               	movlw	199
  8026  00261C  641D               	cpfsgt	delay@i,c
  8027  00261E  D001               	goto	l503
  8028  002620  0012               	return	
  8029  002622                     l503:
  8030                           
  8031                           ;spi.c: 14: {
  8032                           ;spi.c: 15: __nop();
  8033  002622  F000               	nop	
  8034  002624  2A1D               	incf	delay@i,f,c
  8035  002626  D7F9               	goto	l3753
  8036  002628                     __end_of_delay:
  8037                           	opt stack 0
  8038                           tblptru	equ	0xFF8
  8039                           prodh	equ	0xFF4
  8040                           prodl	equ	0xFF3
  8041                           intcon	equ	0xFF2
  8042                           intcon2	equ	0xFF1
  8043                           intcon3	equ	0xFF0
  8044                           postinc0	equ	0xFEE
  8045                           wreg	equ	0xFE8
  8046                           indf1	equ	0xFE7
  8047                           postinc1	equ	0xFE6
  8048                           postdec1	equ	0xFE5
  8049                           fsr1h	equ	0xFE2
  8050                           fsr1l	equ	0xFE1
  8051                           indf2	equ	0xFDF
  8052                           postinc2	equ	0xFDE
  8053                           postdec2	equ	0xFDD
  8054                           plusw2	equ	0xFDB
  8055                           fsr2h	equ	0xFDA
  8056                           fsr2l	equ	0xFD9
  8057                           status	equ	0xFD8
  8058                           
  8059 ;; *************** function _spi_end_command *****************
  8060 ;; Defined at:
  8061 ;;		line 48 in file "spi.c"
  8062 ;; Parameters:    Size  Location     Type
  8063 ;;		None
  8064 ;; Auto vars:     Size  Location     Type
  8065 ;;		None
  8066 ;; Return value:  Size  Location     Type
  8067 ;;                  1    wreg      void 
  8068 ;; Registers used:
  8069 ;;		None
  8070 ;; Tracked objects:
  8071 ;;		On entry : 0/0
  8072 ;;		On exit  : 0/0
  8073 ;;		Unchanged: 0/0
  8074 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8075 ;;      Params:         0       0       0       0       0       0       0
  8076 ;;      Locals:         0       0       0       0       0       0       0
  8077 ;;      Temps:          0       0       0       0       0       0       0
  8078 ;;      Totals:         0       0       0       0       0       0       0
  8079 ;;Total ram usage:        0 bytes
  8080 ;; Hardware stack levels used:    1
  8081 ;; Hardware stack levels required when called:    3
  8082 ;; This function calls:
  8083 ;;		Nothing
  8084 ;; This function is called by:
  8085 ;;		_spi_read
  8086 ;;		_spi_write
  8087 ;;		_spi_transmit
  8088 ;;		_write_payload
  8089 ;; This function uses a non-reentrant model
  8090 ;;
  8091                           
  8092                           	psect	text44
  8093  0026B6                     __ptext44:
  8094                           	opt stack 0
  8095  0026B6                     _spi_end_command:
  8096                           	opt stack 25
  8097                           
  8098                           ;spi.c: 50: PORTCbits.RC2=1;
  8099                           
  8100                           ;incstack = 0
  8101  0026B6  8482               	bsf	3970,2,c	;volatile
  8102  0026B8  0012               	return		;funcret
  8103  0026BA                     __end_of_spi_end_command:
  8104                           	opt stack 0
  8105                           tblptru	equ	0xFF8
  8106                           prodh	equ	0xFF4
  8107                           prodl	equ	0xFF3
  8108                           intcon	equ	0xFF2
  8109                           intcon2	equ	0xFF1
  8110                           intcon3	equ	0xFF0
  8111                           postinc0	equ	0xFEE
  8112                           wreg	equ	0xFE8
  8113                           indf1	equ	0xFE7
  8114                           postinc1	equ	0xFE6
  8115                           postdec1	equ	0xFE5
  8116                           fsr1h	equ	0xFE2
  8117                           fsr1l	equ	0xFE1
  8118                           indf2	equ	0xFDF
  8119                           postinc2	equ	0xFDE
  8120                           postdec2	equ	0xFDD
  8121                           plusw2	equ	0xFDB
  8122                           fsr2h	equ	0xFDA
  8123                           fsr2l	equ	0xFD9
  8124                           status	equ	0xFD8
  8125                           
  8126 ;; *************** function _SPI *****************
  8127 ;; Defined at:
  8128 ;;		line 19 in file "spi.c"
  8129 ;; Parameters:    Size  Location     Type
  8130 ;;  d               1    wreg     unsigned char 
  8131 ;; Auto vars:     Size  Location     Type
  8132 ;;  d               1   29[COMRAM] unsigned char 
  8133 ;; Return value:  Size  Location     Type
  8134 ;;                  1    wreg      unsigned char 
  8135 ;; Registers used:
  8136 ;;		wreg, status,2, status,0
  8137 ;; Tracked objects:
  8138 ;;		On entry : 0/0
  8139 ;;		On exit  : 0/0
  8140 ;;		Unchanged: 0/0
  8141 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8142 ;;      Params:         0       0       0       0       0       0       0
  8143 ;;      Locals:         1       0       0       0       0       0       0
  8144 ;;      Temps:          1       0       0       0       0       0       0
  8145 ;;      Totals:         2       0       0       0       0       0       0
  8146 ;;Total ram usage:        2 bytes
  8147 ;; Hardware stack levels used:    1
  8148 ;; Hardware stack levels required when called:    3
  8149 ;; This function calls:
  8150 ;;		Nothing
  8151 ;; This function is called by:
  8152 ;;		_spi_read
  8153 ;;		_spi_write
  8154 ;;		_spi_transmit
  8155 ;;		_receive_check
  8156 ;;		_write_payload
  8157 ;; This function uses a non-reentrant model
  8158 ;;
  8159                           
  8160                           	psect	text45
  8161  002554                     __ptext45:
  8162                           	opt stack 0
  8163  002554                     _SPI:
  8164                           	opt stack 25
  8165                           
  8166                           ;incstack = 0
  8167                           ;SPI@d stored from wreg
  8168  002554  6E1E               	movwf	SPI@d,c
  8169                           
  8170                           ;spi.c: 21: SSP1BUF=d;
  8171  002556  C01E  FFC9         	movff	SPI@d,4041	;volatile
  8172  00255A                     l508:
  8173  00255A  A0C7               	btfss	4039,0,c	;volatile
  8174  00255C  D7FE               	goto	l508
  8175                           
  8176                           ;spi.c: 23: PORTCbits.RC0=!PORTCbits.RC0;
  8177  00255E  B082               	btfsc	3970,0,c	;volatile
  8178  002560  D003               	goto	u2860
  8179  002562  6A1D               	clrf	??_SPI& (0+255),c
  8180  002564  2A1D               	incf	??_SPI& (0+255),f,c
  8181  002566  D001               	goto	u2878
  8182  002568                     u2860:
  8183  002568  6A1D               	clrf	??_SPI& (0+255),c
  8184  00256A                     u2878:
  8185  00256A  5082               	movf	3970,w,c	;volatile
  8186  00256C  181D               	xorwf	??_SPI,w,c
  8187  00256E  0BFE               	andlw	-2
  8188  002570  181D               	xorwf	??_SPI,w,c
  8189  002572  6E82               	movwf	3970,c	;volatile
  8190                           
  8191                           ;spi.c: 24: return SSP1BUF;
  8192  002574  50C9               	movf	4041,w,c	;volatile
  8193  002576  0012               	return	
  8194  002578                     __end_of_SPI:
  8195                           	opt stack 0
  8196                           tblptru	equ	0xFF8
  8197                           prodh	equ	0xFF4
  8198                           prodl	equ	0xFF3
  8199                           intcon	equ	0xFF2
  8200                           intcon2	equ	0xFF1
  8201                           intcon3	equ	0xFF0
  8202                           postinc0	equ	0xFEE
  8203                           wreg	equ	0xFE8
  8204                           indf1	equ	0xFE7
  8205                           postinc1	equ	0xFE6
  8206                           postdec1	equ	0xFE5
  8207                           fsr1h	equ	0xFE2
  8208                           fsr1l	equ	0xFE1
  8209                           indf2	equ	0xFDF
  8210                           postinc2	equ	0xFDE
  8211                           postdec2	equ	0xFDD
  8212                           plusw2	equ	0xFDB
  8213                           fsr2h	equ	0xFDA
  8214                           fsr2l	equ	0xFD9
  8215                           status	equ	0xFD8
  8216                           
  8217 ;; *************** function _adc_init *****************
  8218 ;; Defined at:
  8219 ;;		line 14 in file "adc_lib.c"
  8220 ;; Parameters:    Size  Location     Type
  8221 ;;		None
  8222 ;; Auto vars:     Size  Location     Type
  8223 ;;		None
  8224 ;; Return value:  Size  Location     Type
  8225 ;;                  1    wreg      void 
  8226 ;; Registers used:
  8227 ;;		wreg, status,2
  8228 ;; Tracked objects:
  8229 ;;		On entry : 0/0
  8230 ;;		On exit  : 0/0
  8231 ;;		Unchanged: 0/0
  8232 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8233 ;;      Params:         0       0       0       0       0       0       0
  8234 ;;      Locals:         0       0       0       0       0       0       0
  8235 ;;      Temps:          0       0       0       0       0       0       0
  8236 ;;      Totals:         0       0       0       0       0       0       0
  8237 ;;Total ram usage:        0 bytes
  8238 ;; Hardware stack levels used:    1
  8239 ;; Hardware stack levels required when called:    3
  8240 ;; This function calls:
  8241 ;;		Nothing
  8242 ;; This function is called by:
  8243 ;;		_main
  8244 ;; This function uses a non-reentrant model
  8245 ;;
  8246                           
  8247                           	psect	text46
  8248  002420                     __ptext46:
  8249                           	opt stack 0
  8250  002420                     _adc_init:
  8251                           	opt stack 27
  8252                           
  8253                           ;adc_lib.c: 16: VREFCON0=0b10100000;
  8254                           
  8255                           ;incstack = 0
  8256  002420  0EA0               	movlw	160
  8257  002422  010F               	movlb	15	; () banked
  8258  002424  6F42               	movwf	66,b	;volatile
  8259                           
  8260                           ;adc_lib.c: 17: VREFCON1=0b11101000;
  8261  002426  0EE8               	movlw	232
  8262  002428  010F               	movlb	15	; () banked
  8263  00242A  6F41               	movwf	65,b	;volatile
  8264                           
  8265                           ;adc_lib.c: 18: VREFCON2=0b00010000;
  8266  00242C  0E10               	movlw	16
  8267  00242E  010F               	movlb	15	; () banked
  8268  002430  6F40               	movwf	64,b	;volatile
  8269                           
  8270                           ;adc_lib.c: 19: ADCON0=0b00000001;
  8271  002432  0E01               	movlw	1
  8272  002434  6EC2               	movwf	4034,c	;volatile
  8273                           
  8274                           ;adc_lib.c: 20: ADCON1=0b00001000;
  8275  002436  0E08               	movlw	8
  8276  002438  6EC1               	movwf	4033,c	;volatile
  8277                           
  8278                           ;adc_lib.c: 21: ADCON2=0b10111110;
  8279  00243A  0EBE               	movlw	190
  8280  00243C  6EC0               	movwf	4032,c	;volatile
  8281                           
  8282                           ;adc_lib.c: 22: ANSELA=0b00000000;
  8283  00243E  0E00               	movlw	0
  8284  002440  010F               	movlb	15	; () banked
  8285  002442  6F38               	movwf	56,b	;volatile
  8286                           
  8287                           ;adc_lib.c: 23: ANSELB=0b00000000;
  8288  002444  0E00               	movlw	0
  8289  002446  010F               	movlb	15	; () banked
  8290  002448  6F39               	movwf	57,b	;volatile
  8291                           
  8292                           ;adc_lib.c: 24: ANSELC=0b00000000;
  8293  00244A  0E00               	movlw	0
  8294  00244C  010F               	movlb	15	; () banked
  8295  00244E  6F3A               	movwf	58,b	;volatile
  8296                           
  8297                           ;adc_lib.c: 25: ANSELD=0b00001111;
  8298  002450  0E0F               	movlw	15
  8299  002452  010F               	movlb	15	; () banked
  8300  002454  6F3B               	movwf	59,b	;volatile
  8301                           
  8302                           ; BSR set to: 15
  8303                           ;adc_lib.c: 27: ADIE=0;
  8304  002456  9C9D               	bcf	3997,6,c	;volatile
  8305                           
  8306                           ; BSR set to: 15
  8307  002458  0012               	return		;funcret
  8308  00245A                     __end_of_adc_init:
  8309                           	opt stack 0
  8310                           tblptru	equ	0xFF8
  8311                           prodh	equ	0xFF4
  8312                           prodl	equ	0xFF3
  8313                           intcon	equ	0xFF2
  8314                           intcon2	equ	0xFF1
  8315                           intcon3	equ	0xFF0
  8316                           postinc0	equ	0xFEE
  8317                           wreg	equ	0xFE8
  8318                           indf1	equ	0xFE7
  8319                           postinc1	equ	0xFE6
  8320                           postdec1	equ	0xFE5
  8321                           fsr1h	equ	0xFE2
  8322                           fsr1l	equ	0xFE1
  8323                           indf2	equ	0xFDF
  8324                           postinc2	equ	0xFDE
  8325                           postdec2	equ	0xFDD
  8326                           plusw2	equ	0xFDB
  8327                           fsr2h	equ	0xFDA
  8328                           fsr2l	equ	0xFD9
  8329                           status	equ	0xFD8
  8330                           
  8331 ;; *************** function ___awmod *****************
  8332 ;; Defined at:
  8333 ;;		line 8 in file "/opt/microchip/xc8/v1.38/sources/common/awmod.c"
  8334 ;; Parameters:    Size  Location     Type
  8335 ;;  dividend        2   28[COMRAM] int 
  8336 ;;  divisor         2   30[COMRAM] int 
  8337 ;; Auto vars:     Size  Location     Type
  8338 ;;  sign            1   33[COMRAM] unsigned char 
  8339 ;;  counter         1   32[COMRAM] unsigned char 
  8340 ;; Return value:  Size  Location     Type
  8341 ;;                  2   28[COMRAM] int 
  8342 ;; Registers used:
  8343 ;;		wreg, status,2, status,0
  8344 ;; Tracked objects:
  8345 ;;		On entry : 0/0
  8346 ;;		On exit  : 0/0
  8347 ;;		Unchanged: 0/0
  8348 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8349 ;;      Params:         4       0       0       0       0       0       0
  8350 ;;      Locals:         2       0       0       0       0       0       0
  8351 ;;      Temps:          0       0       0       0       0       0       0
  8352 ;;      Totals:         6       0       0       0       0       0       0
  8353 ;;Total ram usage:        6 bytes
  8354 ;; Hardware stack levels used:    1
  8355 ;; Hardware stack levels required when called:    3
  8356 ;; This function calls:
  8357 ;;		Nothing
  8358 ;; This function is called by:
  8359 ;;		_main
  8360 ;;		_adc_read_all
  8361 ;; This function uses a non-reentrant model
  8362 ;;
  8363                           
  8364                           	psect	text47
  8365  002086                     __ptext47:
  8366                           	opt stack 0
  8367  002086                     ___awmod:
  8368                           	opt stack 27
  8369                           
  8370                           ; BSR set to: 15
  8371                           ;incstack = 0
  8372  002086  0E00               	movlw	0
  8373  002088  6E22               	movwf	___awmod@sign,c
  8374  00208A  AE1E               	btfss	___awmod@dividend+1,7,c
  8375  00208C  D006               	goto	l3537
  8376  00208E  6C1D               	negf	___awmod@dividend,c
  8377  002090  1E1E               	comf	___awmod@dividend+1,f,c
  8378  002092  B0D8               	btfsc	status,0,c
  8379  002094  2A1E               	incf	___awmod@dividend+1,f,c
  8380  002096  0E01               	movlw	1
  8381  002098  6E22               	movwf	___awmod@sign,c
  8382  00209A                     l3537:
  8383  00209A  AE20               	btfss	___awmod@divisor+1,7,c
  8384  00209C  D004               	goto	l3541
  8385  00209E  6C1F               	negf	___awmod@divisor,c
  8386  0020A0  1E20               	comf	___awmod@divisor+1,f,c
  8387  0020A2  B0D8               	btfsc	status,0,c
  8388  0020A4  2A20               	incf	___awmod@divisor+1,f,c
  8389  0020A6                     l3541:
  8390  0020A6  501F               	movf	___awmod@divisor,w,c
  8391  0020A8  1020               	iorwf	___awmod@divisor+1,w,c
  8392  0020AA  B4D8               	btfsc	status,2,c
  8393  0020AC  D018               	goto	l3557
  8394  0020AE  0E01               	movlw	1
  8395  0020B0  6E21               	movwf	___awmod@counter,c
  8396  0020B2  D004               	goto	l3547
  8397  0020B4                     l3545:
  8398  0020B4  90D8               	bcf	status,0,c
  8399  0020B6  361F               	rlcf	___awmod@divisor,f,c
  8400  0020B8  3620               	rlcf	___awmod@divisor+1,f,c
  8401  0020BA  2A21               	incf	___awmod@counter,f,c
  8402  0020BC                     l3547:
  8403  0020BC  AE20               	btfss	___awmod@divisor+1,7,c
  8404  0020BE  D7FA               	goto	l3545
  8405  0020C0                     l3549:
  8406  0020C0  501F               	movf	___awmod@divisor,w,c
  8407  0020C2  5C1D               	subwf	___awmod@dividend,w,c
  8408  0020C4  5020               	movf	___awmod@divisor+1,w,c
  8409  0020C6  581E               	subwfb	___awmod@dividend+1,w,c
  8410  0020C8  A0D8               	btfss	status,0,c
  8411  0020CA  D004               	goto	l3553
  8412  0020CC  501F               	movf	___awmod@divisor,w,c
  8413  0020CE  5E1D               	subwf	___awmod@dividend,f,c
  8414  0020D0  5020               	movf	___awmod@divisor+1,w,c
  8415  0020D2  5A1E               	subwfb	___awmod@dividend+1,f,c
  8416  0020D4                     l3553:
  8417  0020D4  90D8               	bcf	status,0,c
  8418  0020D6  3220               	rrcf	___awmod@divisor+1,f,c
  8419  0020D8  321F               	rrcf	___awmod@divisor,f,c
  8420  0020DA  2E21               	decfsz	___awmod@counter,f,c
  8421  0020DC  D7F1               	goto	l3549
  8422  0020DE                     l3557:
  8423  0020DE  5022               	movf	___awmod@sign,w,c
  8424  0020E0  B4D8               	btfsc	status,2,c
  8425  0020E2  D004               	goto	l3561
  8426  0020E4  6C1D               	negf	___awmod@dividend,c
  8427  0020E6  1E1E               	comf	___awmod@dividend+1,f,c
  8428  0020E8  B0D8               	btfsc	status,0,c
  8429  0020EA  2A1E               	incf	___awmod@dividend+1,f,c
  8430  0020EC                     l3561:
  8431  0020EC  C01D  F01D         	movff	___awmod@dividend,?___awmod
  8432  0020F0  C01E  F01E         	movff	___awmod@dividend+1,?___awmod+1
  8433  0020F4  0012               	return	
  8434  0020F6                     __end_of___awmod:
  8435                           	opt stack 0
  8436                           tblptru	equ	0xFF8
  8437                           prodh	equ	0xFF4
  8438                           prodl	equ	0xFF3
  8439                           intcon	equ	0xFF2
  8440                           intcon2	equ	0xFF1
  8441                           intcon3	equ	0xFF0
  8442                           postinc0	equ	0xFEE
  8443                           wreg	equ	0xFE8
  8444                           indf1	equ	0xFE7
  8445                           postinc1	equ	0xFE6
  8446                           postdec1	equ	0xFE5
  8447                           fsr1h	equ	0xFE2
  8448                           fsr1l	equ	0xFE1
  8449                           indf2	equ	0xFDF
  8450                           postinc2	equ	0xFDE
  8451                           postdec2	equ	0xFDD
  8452                           plusw2	equ	0xFDB
  8453                           fsr2h	equ	0xFDA
  8454                           fsr2l	equ	0xFD9
  8455                           status	equ	0xFD8
  8456                           
  8457 ;; *************** function _SPI_Init *****************
  8458 ;; Defined at:
  8459 ;;		line 54 in file "spi.c"
  8460 ;; Parameters:    Size  Location     Type
  8461 ;;		None
  8462 ;; Auto vars:     Size  Location     Type
  8463 ;;		None
  8464 ;; Return value:  Size  Location     Type
  8465 ;;                  1    wreg      void 
  8466 ;; Registers used:
  8467 ;;		wreg, status,2
  8468 ;; Tracked objects:
  8469 ;;		On entry : 0/0
  8470 ;;		On exit  : 0/0
  8471 ;;		Unchanged: 0/0
  8472 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8473 ;;      Params:         0       0       0       0       0       0       0
  8474 ;;      Locals:         0       0       0       0       0       0       0
  8475 ;;      Temps:          0       0       0       0       0       0       0
  8476 ;;      Totals:         0       0       0       0       0       0       0
  8477 ;;Total ram usage:        0 bytes
  8478 ;; Hardware stack levels used:    1
  8479 ;; Hardware stack levels required when called:    3
  8480 ;; This function calls:
  8481 ;;		Nothing
  8482 ;; This function is called by:
  8483 ;;		_main
  8484 ;; This function uses a non-reentrant model
  8485 ;;
  8486                           
  8487                           	psect	text48
  8488  002680                     __ptext48:
  8489                           	opt stack 0
  8490  002680                     _SPI_Init:
  8491                           	opt stack 27
  8492                           
  8493                           ;spi.c: 57: SSP1STATbits.SMP=0;
  8494                           
  8495                           ;incstack = 0
  8496  002680  9EC7               	bcf	4039,7,c	;volatile
  8497                           
  8498                           ;spi.c: 58: SSP1STATbits.CKE=1;
  8499  002682  8CC7               	bsf	4039,6,c	;volatile
  8500                           
  8501                           ;spi.c: 59: SSP1CON1bits.CKP=0;
  8502  002684  98C6               	bcf	4038,4,c	;volatile
  8503                           
  8504                           ;spi.c: 67: SSP1CON1=0b00100010;
  8505  002686  0E22               	movlw	34
  8506  002688  6EC6               	movwf	4038,c	;volatile
  8507  00268A  0012               	return		;funcret
  8508  00268C                     __end_of_SPI_Init:
  8509                           	opt stack 0
  8510                           tblptru	equ	0xFF8
  8511                           prodh	equ	0xFF4
  8512                           prodl	equ	0xFF3
  8513                           intcon	equ	0xFF2
  8514                           intcon2	equ	0xFF1
  8515                           intcon3	equ	0xFF0
  8516                           postinc0	equ	0xFEE
  8517                           wreg	equ	0xFE8
  8518                           indf1	equ	0xFE7
  8519                           postinc1	equ	0xFE6
  8520                           postdec1	equ	0xFE5
  8521                           fsr1h	equ	0xFE2
  8522                           fsr1l	equ	0xFE1
  8523                           indf2	equ	0xFDF
  8524                           postinc2	equ	0xFDE
  8525                           postdec2	equ	0xFDD
  8526                           plusw2	equ	0xFDB
  8527                           fsr2h	equ	0xFDA
  8528                           fsr2l	equ	0xFD9
  8529                           status	equ	0xFD8
  8530                           
  8531 ;; *************** function _inter *****************
  8532 ;; Defined at:
  8533 ;;		line 128 in file "main.c"
  8534 ;; Parameters:    Size  Location     Type
  8535 ;;		None
  8536 ;; Auto vars:     Size  Location     Type
  8537 ;;		None
  8538 ;; Return value:  Size  Location     Type
  8539 ;;                  1    wreg      void 
  8540 ;; Registers used:
  8541 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8542 ;; Tracked objects:
  8543 ;;		On entry : 0/0
  8544 ;;		On exit  : 0/0
  8545 ;;		Unchanged: 0/0
  8546 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8547 ;;      Params:         0       0       0       0       0       0       0
  8548 ;;      Locals:         0       0       0       0       0       0       0
  8549 ;;      Temps:         14       0       0       0       0       0       0
  8550 ;;      Totals:        14       0       0       0       0       0       0
  8551 ;;Total ram usage:       14 bytes
  8552 ;; Hardware stack levels used:    1
  8553 ;; Hardware stack levels required when called:    2
  8554 ;; This function calls:
  8555 ;;		_get_data
  8556 ;;		_tmr1
  8557 ;;		_tmr2
  8558 ;; This function is called by:
  8559 ;;		Interrupt level 2
  8560 ;; This function uses a non-reentrant model
  8561 ;;
  8562                           
  8563                           	psect	intcode
  8564  000008                     __pintcode:
  8565                           	opt stack 0
  8566  000008                     _inter:
  8567                           	opt stack 23
  8568                           
  8569                           ;incstack = 0
  8570  000008  8243               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  8571  00000A  CFFA F00F          	movff	pclath,??_inter
  8572  00000E  CFFB F010          	movff	pclatu,??_inter+1
  8573  000012  CFE9 F011          	movff	fsr0l,??_inter+2
  8574  000016  CFEA F012          	movff	fsr0h,??_inter+3
  8575  00001A  CFE1 F013          	movff	fsr1l,??_inter+4
  8576  00001E  CFE2 F014          	movff	fsr1h,??_inter+5
  8577  000022  CFD9 F015          	movff	fsr2l,??_inter+6
  8578  000026  CFDA F016          	movff	fsr2h,??_inter+7
  8579  00002A  CFF3 F017          	movff	prodl,??_inter+8
  8580  00002E  CFF4 F018          	movff	prodh,??_inter+9
  8581  000032  CFF6 F019          	movff	tblptrl,??_inter+10
  8582  000036  CFF7 F01A          	movff	tblptrh,??_inter+11
  8583  00003A  CFF8 F01B          	movff	tblptru,??_inter+12
  8584  00003E  CFF5 F01C          	movff	tablat,??_inter+13
  8585                           
  8586                           ;main.c: 129: if (TMR2IF){
  8587  000042  A29E               	btfss	3998,1,c	;volatile
  8588  000044  D003               	goto	i2l3623
  8589                           
  8590                           ;main.c: 130: tmr2();
  8591  000046  EC57  F013         	call	_tmr2	;wreg free
  8592                           
  8593                           ;main.c: 131: TMR2IF=0;
  8594  00004A  929E               	bcf	3998,1,c	;volatile
  8595  00004C                     i2l3623:
  8596                           
  8597                           ;main.c: 132: }
  8598                           ;main.c: 133: if (TMR1IF){
  8599  00004C  A09E               	btfss	3998,0,c	;volatile
  8600  00004E  D003               	goto	i2l3629
  8601                           
  8602                           ;main.c: 134: tmr1();
  8603  000050  ECF2  F00A         	call	_tmr1	;wreg free
  8604                           
  8605                           ;main.c: 135: TMR1IF=0;
  8606  000054  909E               	bcf	3998,0,c	;volatile
  8607  000056                     i2l3629:
  8608                           
  8609                           ;main.c: 136: }
  8610                           ;main.c: 137: if(TMR3IF){
  8611  000056  B2A1               	btfsc	4001,1,c	;volatile
  8612                           
  8613                           ;main.c: 139: TMR3IF=0;
  8614  000058  92A1               	bcf	4001,1,c	;volatile
  8615                           
  8616                           ;main.c: 140: }
  8617                           ;main.c: 142: if(ADIF){
  8618  00005A  BC9E               	btfsc	3998,6,c	;volatile
  8619                           
  8620                           ;main.c: 144: ADIF=0;
  8621  00005C  9C9E               	bcf	3998,6,c	;volatile
  8622                           
  8623                           ;main.c: 145: }
  8624                           ;main.c: 146: if(RCIF){
  8625  00005E  AA9E               	btfss	3998,5,c	;volatile
  8626  000060  D003               	goto	i2l591
  8627                           
  8628                           ;main.c: 147: get_data();
  8629  000062  ECAF  F010         	call	_get_data	;wreg free
  8630                           
  8631                           ;main.c: 148: RCIF=0;
  8632  000066  9A9E               	bcf	3998,5,c	;volatile
  8633  000068                     i2l591:
  8634  000068  C01C  FFF5         	movff	??_inter+13,tablat
  8635  00006C  C01B  FFF8         	movff	??_inter+12,tblptru
  8636  000070  C01A  FFF7         	movff	??_inter+11,tblptrh
  8637  000074  C019  FFF6         	movff	??_inter+10,tblptrl
  8638  000078  C018  FFF4         	movff	??_inter+9,prodh
  8639  00007C  C017  FFF3         	movff	??_inter+8,prodl
  8640  000080  C016  FFDA         	movff	??_inter+7,fsr2h
  8641  000084  C015  FFD9         	movff	??_inter+6,fsr2l
  8642  000088  C014  FFE2         	movff	??_inter+5,fsr1h
  8643  00008C  C013  FFE1         	movff	??_inter+4,fsr1l
  8644  000090  C012  FFEA         	movff	??_inter+3,fsr0h
  8645  000094  C011  FFE9         	movff	??_inter+2,fsr0l
  8646  000098  C010  FFFB         	movff	??_inter+1,pclatu
  8647  00009C  C00F  FFFA         	movff	??_inter,pclath
  8648  0000A0  9243               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  8649  0000A2  0011               	retfie		f
  8650  0000A4                     __end_of_inter:
  8651                           	opt stack 0
  8652                           pclatu	equ	0xFFB
  8653                           pclath	equ	0xFFA
  8654                           tblptru	equ	0xFF8
  8655                           tblptrh	equ	0xFF7
  8656                           tblptrl	equ	0xFF6
  8657                           tablat	equ	0xFF5
  8658                           prodh	equ	0xFF4
  8659                           prodl	equ	0xFF3
  8660                           intcon	equ	0xFF2
  8661                           intcon2	equ	0xFF1
  8662                           intcon3	equ	0xFF0
  8663                           postinc0	equ	0xFEE
  8664                           fsr0h	equ	0xFEA
  8665                           fsr0l	equ	0xFE9
  8666                           wreg	equ	0xFE8
  8667                           indf1	equ	0xFE7
  8668                           postinc1	equ	0xFE6
  8669                           postdec1	equ	0xFE5
  8670                           fsr1h	equ	0xFE2
  8671                           fsr1l	equ	0xFE1
  8672                           indf2	equ	0xFDF
  8673                           postinc2	equ	0xFDE
  8674                           postdec2	equ	0xFDD
  8675                           plusw2	equ	0xFDB
  8676                           fsr2h	equ	0xFDA
  8677                           fsr2l	equ	0xFD9
  8678                           status	equ	0xFD8
  8679                           
  8680 ;; *************** function _tmr2 *****************
  8681 ;; Defined at:
  8682 ;;		line 69 in file "main.c"
  8683 ;; Parameters:    Size  Location     Type
  8684 ;;		None
  8685 ;; Auto vars:     Size  Location     Type
  8686 ;;		None
  8687 ;; Return value:  Size  Location     Type
  8688 ;;                  1    wreg      void 
  8689 ;; Registers used:
  8690 ;;		wreg, status,2, status,0, cstack
  8691 ;; Tracked objects:
  8692 ;;		On entry : 0/0
  8693 ;;		On exit  : 0/0
  8694 ;;		Unchanged: 0/0
  8695 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8696 ;;      Params:         0       0       0       0       0       0       0
  8697 ;;      Locals:         0       0       0       0       0       0       0
  8698 ;;      Temps:          0       0       0       0       0       0       0
  8699 ;;      Totals:         0       0       0       0       0       0       0
  8700 ;;Total ram usage:        0 bytes
  8701 ;; Hardware stack levels used:    1
  8702 ;; Hardware stack levels required when called:    1
  8703 ;; This function calls:
  8704 ;;		_modbus_get_routine
  8705 ;; This function is called by:
  8706 ;;		_inter
  8707 ;; This function uses a non-reentrant model
  8708 ;;
  8709                           
  8710                           	psect	text50
  8711  0026AE                     __ptext50:
  8712                           	opt stack 0
  8713  0026AE                     _tmr2:
  8714                           	opt stack 23
  8715                           
  8716                           ;main.c: 70: modbus_get_routine(50);
  8717                           
  8718                           ;incstack = 0
  8719  0026AE  0E32               	movlw	50
  8720  0026B0  EC6F  F012         	call	_modbus_get_routine
  8721  0026B4  0012               	return		;funcret
  8722  0026B6                     __end_of_tmr2:
  8723                           	opt stack 0
  8724                           pclatu	equ	0xFFB
  8725                           pclath	equ	0xFFA
  8726                           tblptru	equ	0xFF8
  8727                           tblptrh	equ	0xFF7
  8728                           tblptrl	equ	0xFF6
  8729                           tablat	equ	0xFF5
  8730                           prodh	equ	0xFF4
  8731                           prodl	equ	0xFF3
  8732                           intcon	equ	0xFF2
  8733                           intcon2	equ	0xFF1
  8734                           intcon3	equ	0xFF0
  8735                           postinc0	equ	0xFEE
  8736                           fsr0h	equ	0xFEA
  8737                           fsr0l	equ	0xFE9
  8738                           wreg	equ	0xFE8
  8739                           indf1	equ	0xFE7
  8740                           postinc1	equ	0xFE6
  8741                           postdec1	equ	0xFE5
  8742                           fsr1h	equ	0xFE2
  8743                           fsr1l	equ	0xFE1
  8744                           indf2	equ	0xFDF
  8745                           postinc2	equ	0xFDE
  8746                           postdec2	equ	0xFDD
  8747                           plusw2	equ	0xFDB
  8748                           fsr2h	equ	0xFDA
  8749                           fsr2l	equ	0xFD9
  8750                           status	equ	0xFD8
  8751                           
  8752 ;; *************** function _modbus_get_routine *****************
  8753 ;; Defined at:
  8754 ;;		line 174 in file "mod.c"
  8755 ;; Parameters:    Size  Location     Type
  8756 ;;  scale           1    wreg     unsigned char 
  8757 ;; Auto vars:     Size  Location     Type
  8758 ;;  scale           1    0[COMRAM] unsigned char 
  8759 ;; Return value:  Size  Location     Type
  8760 ;;                  2  390[None  ] int 
  8761 ;; Registers used:
  8762 ;;		wreg, status,2, status,0
  8763 ;; Tracked objects:
  8764 ;;		On entry : 0/0
  8765 ;;		On exit  : 0/0
  8766 ;;		Unchanged: 0/0
  8767 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8768 ;;      Params:         0       0       0       0       0       0       0
  8769 ;;      Locals:         1       0       0       0       0       0       0
  8770 ;;      Temps:          0       0       0       0       0       0       0
  8771 ;;      Totals:         1       0       0       0       0       0       0
  8772 ;;Total ram usage:        1 bytes
  8773 ;; Hardware stack levels used:    1
  8774 ;; This function calls:
  8775 ;;		Nothing
  8776 ;; This function is called by:
  8777 ;;		_tmr2
  8778 ;; This function uses a non-reentrant model
  8779 ;;
  8780                           
  8781                           	psect	text51
  8782  0024DE                     __ptext51:
  8783                           	opt stack 0
  8784  0024DE                     _modbus_get_routine:
  8785                           	opt stack 23
  8786                           
  8787                           ;incstack = 0
  8788                           ;modbus_get_routine@scale stored from wreg
  8789  0024DE  6E01               	movwf	modbus_get_routine@scale,c
  8790                           
  8791                           ;mod.c: 176: if (modbus_get_start)modbus_get_routine_tmr++;
  8792  0024E0  503A               	movf	_modbus_get_start,w,c
  8793  0024E2  A4D8               	btfss	status,2,c
  8794  0024E4  2A39               	incf	_modbus_get_routine_tmr,f,c
  8795                           
  8796                           ;mod.c: 178: if(!read_write){
  8797  0024E6  503C               	movf	_read_write,w,c
  8798  0024E8  A4D8               	btfss	status,2,c
  8799  0024EA  D002               	goto	i2l1405
  8800                           
  8801                           ;mod.c: 179: LATDbits.LATD4=0;
  8802  0024EC  988C               	bcf	3980,4,c	;volatile
  8803                           
  8804                           ;mod.c: 180: TXSTA1bits.TXEN=0;
  8805  0024EE  9AAC               	bcf	4012,5,c	;volatile
  8806  0024F0                     i2l1405:
  8807                           
  8808                           ;mod.c: 181: }
  8809                           ;mod.c: 182: if(modbus_get_routine_tmr!=scale)return;
  8810  0024F0  5001               	movf	modbus_get_routine@scale,w,c
  8811  0024F2  1839               	xorwf	_modbus_get_routine_tmr,w,c
  8812  0024F4  A4D8               	btfss	status,2,c
  8813  0024F6  0012               	return	
  8814                           
  8815                           ;mod.c: 185: modbus_get_routine_tmr=0;
  8816  0024F8  0E00               	movlw	0
  8817  0024FA  6E39               	movwf	_modbus_get_routine_tmr,c
  8818                           
  8819                           ;mod.c: 186: get_i=0;
  8820  0024FC  0E00               	movlw	0
  8821  0024FE  6E36               	movwf	_get_i,c
  8822                           
  8823                           ;mod.c: 187: modbus_get_start=0;
  8824  002500  0E00               	movlw	0
  8825  002502  6E3A               	movwf	_modbus_get_start,c
  8826  002504  0012               	return		;funcret
  8827  002506                     __end_of_modbus_get_routine:
  8828                           	opt stack 0
  8829                           pclatu	equ	0xFFB
  8830                           pclath	equ	0xFFA
  8831                           tblptru	equ	0xFF8
  8832                           tblptrh	equ	0xFF7
  8833                           tblptrl	equ	0xFF6
  8834                           tablat	equ	0xFF5
  8835                           prodh	equ	0xFF4
  8836                           prodl	equ	0xFF3
  8837                           intcon	equ	0xFF2
  8838                           intcon2	equ	0xFF1
  8839                           intcon3	equ	0xFF0
  8840                           postinc0	equ	0xFEE
  8841                           fsr0h	equ	0xFEA
  8842                           fsr0l	equ	0xFE9
  8843                           wreg	equ	0xFE8
  8844                           indf1	equ	0xFE7
  8845                           postinc1	equ	0xFE6
  8846                           postdec1	equ	0xFE5
  8847                           fsr1h	equ	0xFE2
  8848                           fsr1l	equ	0xFE1
  8849                           indf2	equ	0xFDF
  8850                           postinc2	equ	0xFDE
  8851                           postdec2	equ	0xFDD
  8852                           plusw2	equ	0xFDB
  8853                           fsr2h	equ	0xFDA
  8854                           fsr2l	equ	0xFD9
  8855                           status	equ	0xFD8
  8856                           
  8857 ;; *************** function _tmr1 *****************
  8858 ;; Defined at:
  8859 ;;		line 74 in file "main.c"
  8860 ;; Parameters:    Size  Location     Type
  8861 ;;		None
  8862 ;; Auto vars:     Size  Location     Type
  8863 ;;		None
  8864 ;; Return value:  Size  Location     Type
  8865 ;;                  1    wreg      void 
  8866 ;; Registers used:
  8867 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8868 ;; Tracked objects:
  8869 ;;		On entry : 0/0
  8870 ;;		On exit  : 0/0
  8871 ;;		Unchanged: 0/0
  8872 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8873 ;;      Params:         0       0       0       0       0       0       0
  8874 ;;      Locals:         0       0       0       0       0       0       0
  8875 ;;      Temps:          2       0       0       0       0       0       0
  8876 ;;      Totals:         2       0       0       0       0       0       0
  8877 ;;Total ram usage:        2 bytes
  8878 ;; Hardware stack levels used:    1
  8879 ;; Hardware stack levels required when called:    1
  8880 ;; This function calls:
  8881 ;;		i2___lmul
  8882 ;; This function is called by:
  8883 ;;		_inter
  8884 ;; This function uses a non-reentrant model
  8885 ;;
  8886                           
  8887                           	psect	text52
  8888  0015E4                     __ptext52:
  8889                           	opt stack 0
  8890  0015E4                     _tmr1:
  8891                           	opt stack 23
  8892                           
  8893                           ;main.c: 75: static unsigned int timer_s=0,tmr_hiz=0,blink_tmr=0;
  8894                           ;main.c: 76: static unsigned char blink=0;
  8895                           ;main.c: 78: TMR1L=0x7F;
  8896                           
  8897                           ;incstack = 0
  8898  0015E4  0E7F               	movlw	127
  8899  0015E6  6ECE               	movwf	4046,c	;volatile
  8900                           
  8901                           ;main.c: 79: TMR1H=0xC1;
  8902  0015E8  0EC1               	movlw	193
  8903  0015EA  6ECF               	movwf	4047,c	;volatile
  8904                           
  8905                           ;main.c: 81: if(!tmr_hiz){
  8906  0015EC  0100               	movlb	0	; () banked
  8907  0015EE  51AC               	movf	tmr1@tmr_hiz& (0+255),w,b
  8908  0015F0  0100               	movlb	0	; () banked
  8909  0015F2  11AD               	iorwf	(tmr1@tmr_hiz+1)& (0+255),w,b
  8910  0015F4  A4D8               	btfss	status,2,c
  8911  0015F6  D00E               	goto	i2l3483
  8912                           
  8913                           ; BSR set to: 0
  8914                           ;main.c: 82: Registers[12]=TMR0L;
  8915  0015F8  50D6               	movf	4054,w,c	;volatile
  8916  0015FA  6E0D               	movwf	??_tmr1& (0+255),c
  8917  0015FC  6A0E               	clrf	(??_tmr1+1)& (0+255),c
  8918  0015FE  C00D  F1E0         	movff	??_tmr1,_Registers+24
  8919  001602  C00E  F1E1         	movff	??_tmr1+1,_Registers+25
  8920                           
  8921                           ;main.c: 83: TMR0L=0;
  8922  001606  0E00               	movlw	0
  8923  001608  6ED6               	movwf	4054,c	;volatile
  8924                           
  8925                           ;main.c: 84: tmr_hiz=250;
  8926  00160A  0E00               	movlw	0
  8927  00160C  0100               	movlb	0	; () banked
  8928  00160E  6FAD               	movwf	(tmr1@tmr_hiz+1)& (0+255),b
  8929  001610  0EFA               	movlw	250
  8930  001612  6FAC               	movwf	tmr1@tmr_hiz& (0+255),b
  8931  001614                     i2l3483:
  8932                           
  8933                           ; BSR set to: 0
  8934                           ;main.c: 85: }
  8935                           ;main.c: 87: if(!blink_tmr){
  8936  001614  0100               	movlb	0	; () banked
  8937  001616  51A8               	movf	tmr1@blink_tmr& (0+255),w,b
  8938  001618  0100               	movlb	0	; () banked
  8939  00161A  11A9               	iorwf	(tmr1@blink_tmr+1)& (0+255),w,b
  8940  00161C  A4D8               	btfss	status,2,c
  8941  00161E  D019               	goto	i2l3495
  8942                           
  8943                           ; BSR set to: 0
  8944                           ;main.c: 89: blink^=1;
  8945  001620  0E01               	movlw	1
  8946  001622  1A40               	xorwf	tmr1@blink,f,c
  8947                           
  8948                           ; BSR set to: 0
  8949                           ;main.c: 91: if(PORTBbits.RB1){
  8950  001624  A281               	btfss	3969,1,c	;volatile
  8951  001626  D006               	goto	i2l572
  8952                           
  8953                           ; BSR set to: 0
  8954                           ;main.c: 92: LATEbits.LATE1=blink;
  8955  001628  B040               	btfsc	tmr1@blink,0,c
  8956  00162A  D002               	bra	i2u244_45
  8957  00162C  928D               	bcf	3981,1,c	;volatile
  8958  00162E  D001               	bra	i2u244_46
  8959  001630                     i2u244_45:
  8960  001630  828D               	bsf	3981,1,c	;volatile
  8961  001632                     i2u244_46:
  8962                           
  8963                           ;main.c: 93: }else{
  8964  001632  D001               	goto	i2l573
  8965  001634                     i2l572:
  8966                           
  8967                           ; BSR set to: 0
  8968                           ;main.c: 94: LATEbits.LATE1=0;
  8969  001634  928D               	bcf	3981,1,c	;volatile
  8970  001636                     i2l573:
  8971                           
  8972                           ;main.c: 95: }
  8973                           ;main.c: 97: if(PORTBbits.RB0){
  8974  001636  A081               	btfss	3969,0,c	;volatile
  8975  001638  D006               	goto	i2l574
  8976                           
  8977                           ;main.c: 98: LATEbits.LATE0=blink;
  8978  00163A  B040               	btfsc	tmr1@blink,0,c
  8979  00163C  D002               	bra	i2u246_45
  8980  00163E  908D               	bcf	3981,0,c	;volatile
  8981  001640  D001               	bra	i2u246_46
  8982  001642                     i2u246_45:
  8983  001642  808D               	bsf	3981,0,c	;volatile
  8984  001644                     i2u246_46:
  8985                           
  8986                           ;main.c: 99: }else{
  8987  001644  D001               	goto	i2l3493
  8988  001646                     i2l574:
  8989                           
  8990                           ;main.c: 100: LATEbits.LATE0=0;
  8991  001646  908D               	bcf	3981,0,c	;volatile
  8992  001648                     i2l3493:
  8993                           
  8994                           ;main.c: 101: }
  8995                           ;main.c: 102: blink_tmr=500;
  8996  001648  0E01               	movlw	1
  8997  00164A  0100               	movlb	0	; () banked
  8998  00164C  6FA9               	movwf	(tmr1@blink_tmr+1)& (0+255),b
  8999  00164E  0EF4               	movlw	244
  9000  001650  6FA8               	movwf	tmr1@blink_tmr& (0+255),b
  9001  001652                     i2l3495:
  9002                           
  9003                           ; BSR set to: 0
  9004                           ;main.c: 103: }
  9005                           ;main.c: 106: if(!timer_s){
  9006  001652  0100               	movlb	0	; () banked
  9007  001654  51AA               	movf	tmr1@timer_s& (0+255),w,b
  9008  001656  0100               	movlb	0	; () banked
  9009  001658  11AB               	iorwf	(tmr1@timer_s+1)& (0+255),w,b
  9010  00165A  A4D8               	btfss	status,2,c
  9011  00165C  D04E               	goto	i2l3505
  9012                           
  9013                           ; BSR set to: 0
  9014                           ;main.c: 107: timer_s=1000;
  9015  00165E  0E03               	movlw	3
  9016  001660  0100               	movlb	0	; () banked
  9017  001662  6FAB               	movwf	(tmr1@timer_s+1)& (0+255),b
  9018  001664  0EE8               	movlw	232
  9019  001666  6FAA               	movwf	tmr1@timer_s& (0+255),b
  9020                           
  9021                           ; BSR set to: 0
  9022                           ;main.c: 109: watt1_integ+= (signed long)Registers[4] * (signed long)Registers[6];
  9023  001668  EE21  F0D0         	lfsr	2,_Registers+8
  9024  00166C  CFDE F001          	movff	postinc2,i2___lmul@multiplier
  9025  001670  CFDD F002          	movff	postdec2,i2___lmul@multiplier+1
  9026  001674  0E00               	movlw	0
  9027  001676  BE02               	btfsc	i2___lmul@multiplier+1,7,c
  9028  001678  0EFF               	movlw	-1
  9029  00167A  6E03               	movwf	i2___lmul@multiplier+2,c
  9030  00167C  6E04               	movwf	i2___lmul@multiplier+3,c
  9031  00167E  EE21  F0D4         	lfsr	2,_Registers+12
  9032  001682  CFDE F005          	movff	postinc2,i2___lmul@multiplicand
  9033  001686  CFDD F006          	movff	postdec2,i2___lmul@multiplicand+1
  9034  00168A  0E00               	movlw	0
  9035  00168C  BE06               	btfsc	i2___lmul@multiplicand+1,7,c
  9036  00168E  0EFF               	movlw	-1
  9037  001690  6E07               	movwf	i2___lmul@multiplicand+2,c
  9038  001692  6E08               	movwf	i2___lmul@multiplicand+3,c
  9039  001694  EC3E  F011         	call	i2___lmul	;wreg free
  9040  001698  5001               	movf	?i2___lmul,w,c
  9041  00169A  0100               	movlb	0	; () banked
  9042  00169C  2790               	addwf	_watt1_integ& (0+255),f,b
  9043  00169E  5002               	movf	?i2___lmul+1,w,c
  9044  0016A0  0100               	movlb	0	; () banked
  9045  0016A2  2391               	addwfc	(_watt1_integ+1)& (0+255),f,b
  9046  0016A4  5003               	movf	?i2___lmul+2,w,c
  9047  0016A6  0100               	movlb	0	; () banked
  9048  0016A8  2392               	addwfc	(_watt1_integ+2)& (0+255),f,b
  9049  0016AA  5004               	movf	?i2___lmul+3,w,c
  9050  0016AC  0100               	movlb	0	; () banked
  9051  0016AE  2393               	addwfc	(_watt1_integ+3)& (0+255),f,b
  9052                           
  9053                           ; BSR set to: 0
  9054                           ;main.c: 110: watt2_integ+= (signed long)Registers[5] * (signed long)Registers[6];
  9055  0016B0  EE21  F0D2         	lfsr	2,_Registers+10
  9056  0016B4  CFDE F001          	movff	postinc2,i2___lmul@multiplier
  9057  0016B8  CFDD F002          	movff	postdec2,i2___lmul@multiplier+1
  9058  0016BC  0E00               	movlw	0
  9059  0016BE  BE02               	btfsc	i2___lmul@multiplier+1,7,c
  9060  0016C0  0EFF               	movlw	-1
  9061  0016C2  6E03               	movwf	i2___lmul@multiplier+2,c
  9062  0016C4  6E04               	movwf	i2___lmul@multiplier+3,c
  9063  0016C6  EE21  F0D4         	lfsr	2,_Registers+12
  9064  0016CA  CFDE F005          	movff	postinc2,i2___lmul@multiplicand
  9065  0016CE  CFDD F006          	movff	postdec2,i2___lmul@multiplicand+1
  9066  0016D2  0E00               	movlw	0
  9067  0016D4  BE06               	btfsc	i2___lmul@multiplicand+1,7,c
  9068  0016D6  0EFF               	movlw	-1
  9069  0016D8  6E07               	movwf	i2___lmul@multiplicand+2,c
  9070  0016DA  6E08               	movwf	i2___lmul@multiplicand+3,c
  9071  0016DC  EC3E  F011         	call	i2___lmul	;wreg free
  9072  0016E0  5001               	movf	?i2___lmul,w,c
  9073  0016E2  0100               	movlb	0	; () banked
  9074  0016E4  2794               	addwf	_watt2_integ& (0+255),f,b
  9075  0016E6  5002               	movf	?i2___lmul+1,w,c
  9076  0016E8  0100               	movlb	0	; () banked
  9077  0016EA  2395               	addwfc	(_watt2_integ+1)& (0+255),f,b
  9078  0016EC  5003               	movf	?i2___lmul+2,w,c
  9079  0016EE  0100               	movlb	0	; () banked
  9080  0016F0  2396               	addwfc	(_watt2_integ+2)& (0+255),f,b
  9081  0016F2  5004               	movf	?i2___lmul+3,w,c
  9082  0016F4  0100               	movlb	0	; () banked
  9083  0016F6  2397               	addwfc	(_watt2_integ+3)& (0+255),f,b
  9084                           
  9085                           ; BSR set to: 0
  9086                           ;main.c: 111: LATCbits.LATC0^=1;
  9087  0016F8  708B               	btg	3979,0,c	;volatile
  9088  0016FA                     i2l3505:
  9089                           
  9090                           ; BSR set to: 0
  9091                           ;main.c: 113: }
  9092                           ;main.c: 115: if(timer_tmp)timer_tmp--;
  9093  0016FA  5032               	movf	_timer_tmp,w,c
  9094  0016FC  1033               	iorwf	_timer_tmp+1,w,c
  9095  0016FE  B4D8               	btfsc	status,2,c
  9096  001700  D003               	goto	i2l3509
  9097                           
  9098                           ; BSR set to: 0
  9099  001702  0632               	decf	_timer_tmp,f,c
  9100  001704  A0D8               	btfss	status,0,c
  9101  001706  0633               	decf	_timer_tmp+1,f,c
  9102  001708                     i2l3509:
  9103                           
  9104                           ; BSR set to: 0
  9105                           ;main.c: 116: if(rf_send_timer)rf_send_timer--;
  9106  001708  5030               	movf	_rf_send_timer,w,c
  9107  00170A  1031               	iorwf	_rf_send_timer+1,w,c
  9108  00170C  B4D8               	btfsc	status,2,c
  9109  00170E  D003               	goto	i2l3513
  9110                           
  9111                           ; BSR set to: 0
  9112  001710  0630               	decf	_rf_send_timer,f,c
  9113  001712  A0D8               	btfss	status,0,c
  9114  001714  0631               	decf	_rf_send_timer+1,f,c
  9115  001716                     i2l3513:
  9116                           
  9117                           ; BSR set to: 0
  9118                           ;main.c: 117: if(rf_recive_timer)rf_recive_timer--;
  9119  001716  502C               	movf	_rf_recive_timer,w,c
  9120  001718  102D               	iorwf	_rf_recive_timer+1,w,c
  9121  00171A  B4D8               	btfsc	status,2,c
  9122  00171C  D003               	goto	i2l3517
  9123                           
  9124                           ; BSR set to: 0
  9125  00171E  062C               	decf	_rf_recive_timer,f,c
  9126  001720  A0D8               	btfss	status,0,c
  9127  001722  062D               	decf	_rf_recive_timer+1,f,c
  9128  001724                     i2l3517:
  9129                           
  9130                           ; BSR set to: 0
  9131                           ;main.c: 118: if(rf_recive_done_timer)rf_recive_done_timer--;
  9132  001724  502A               	movf	_rf_recive_done_timer,w,c
  9133  001726  102B               	iorwf	_rf_recive_done_timer+1,w,c
  9134  001728  B4D8               	btfsc	status,2,c
  9135  00172A  D003               	goto	i2l3521
  9136                           
  9137                           ; BSR set to: 0
  9138  00172C  062A               	decf	_rf_recive_done_timer,f,c
  9139  00172E  A0D8               	btfss	status,0,c
  9140  001730  062B               	decf	_rf_recive_done_timer+1,f,c
  9141  001732                     i2l3521:
  9142                           
  9143                           ; BSR set to: 0
  9144                           ;main.c: 119: if(rf_reset_timer)rf_reset_timer--;
  9145  001732  502E               	movf	_rf_reset_timer,w,c
  9146  001734  102F               	iorwf	_rf_reset_timer+1,w,c
  9147  001736  B4D8               	btfsc	status,2,c
  9148  001738  D003               	goto	i2l3525
  9149                           
  9150                           ; BSR set to: 0
  9151  00173A  062E               	decf	_rf_reset_timer,f,c
  9152  00173C  A0D8               	btfss	status,0,c
  9153  00173E  062F               	decf	_rf_reset_timer+1,f,c
  9154  001740                     i2l3525:
  9155                           
  9156                           ; BSR set to: 0
  9157                           ;main.c: 120: if(rf_init_timer)rf_init_timer--;
  9158  001740  5028               	movf	_rf_init_timer,w,c
  9159  001742  1029               	iorwf	_rf_init_timer+1,w,c
  9160  001744  B4D8               	btfsc	status,2,c
  9161  001746  D003               	goto	i2l582
  9162                           
  9163                           ; BSR set to: 0
  9164  001748  0628               	decf	_rf_init_timer,f,c
  9165  00174A  A0D8               	btfss	status,0,c
  9166  00174C  0629               	decf	_rf_init_timer+1,f,c
  9167  00174E                     i2l582:
  9168                           
  9169                           ; BSR set to: 0
  9170                           ;main.c: 121: timer_s--;
  9171  00174E  0100               	movlb	0	; () banked
  9172  001750  07AA               	decf	tmr1@timer_s& (0+255),f,b
  9173  001752  A0D8               	btfss	status,0,c
  9174  001754  07AB               	decf	(tmr1@timer_s+1)& (0+255),f,b
  9175                           
  9176                           ;main.c: 122: tmr_hiz--;
  9177  001756  0100               	movlb	0	; () banked
  9178  001758  07AC               	decf	tmr1@tmr_hiz& (0+255),f,b
  9179  00175A  A0D8               	btfss	status,0,c
  9180  00175C  07AD               	decf	(tmr1@tmr_hiz+1)& (0+255),f,b
  9181                           
  9182                           ;main.c: 123: blink_tmr--;
  9183  00175E  0100               	movlb	0	; () banked
  9184  001760  07A8               	decf	tmr1@blink_tmr& (0+255),f,b
  9185  001762  A0D8               	btfss	status,0,c
  9186  001764  07A9               	decf	(tmr1@blink_tmr+1)& (0+255),f,b
  9187                           
  9188                           ; BSR set to: 0
  9189  001766  0012               	return		;funcret
  9190  001768                     __end_of_tmr1:
  9191                           	opt stack 0
  9192                           pclatu	equ	0xFFB
  9193                           pclath	equ	0xFFA
  9194                           tblptru	equ	0xFF8
  9195                           tblptrh	equ	0xFF7
  9196                           tblptrl	equ	0xFF6
  9197                           tablat	equ	0xFF5
  9198                           prodh	equ	0xFF4
  9199                           prodl	equ	0xFF3
  9200                           intcon	equ	0xFF2
  9201                           intcon2	equ	0xFF1
  9202                           intcon3	equ	0xFF0
  9203                           postinc0	equ	0xFEE
  9204                           fsr0h	equ	0xFEA
  9205                           fsr0l	equ	0xFE9
  9206                           wreg	equ	0xFE8
  9207                           indf1	equ	0xFE7
  9208                           postinc1	equ	0xFE6
  9209                           postdec1	equ	0xFE5
  9210                           fsr1h	equ	0xFE2
  9211                           fsr1l	equ	0xFE1
  9212                           indf2	equ	0xFDF
  9213                           postinc2	equ	0xFDE
  9214                           postdec2	equ	0xFDD
  9215                           plusw2	equ	0xFDB
  9216                           fsr2h	equ	0xFDA
  9217                           fsr2l	equ	0xFD9
  9218                           status	equ	0xFD8
  9219                           
  9220 ;; *************** function i2___lmul *****************
  9221 ;; Defined at:
  9222 ;;		line 15 in file "/opt/microchip/xc8/v1.38/sources/common/Umul32.c"
  9223 ;; Parameters:    Size  Location     Type
  9224 ;;  multiplier      4    0[COMRAM] unsigned long 
  9225 ;;  multiplicand    4    4[COMRAM] unsigned long 
  9226 ;; Auto vars:     Size  Location     Type
  9227 ;;  __lmul          4    8[COMRAM] unsigned long 
  9228 ;; Return value:  Size  Location     Type
  9229 ;;                  4    0[COMRAM] unsigned long 
  9230 ;; Registers used:
  9231 ;;		wreg, status,2, status,0
  9232 ;; Tracked objects:
  9233 ;;		On entry : 0/0
  9234 ;;		On exit  : 0/0
  9235 ;;		Unchanged: 0/0
  9236 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9237 ;;      Params:         8       0       0       0       0       0       0
  9238 ;;      Locals:         4       0       0       0       0       0       0
  9239 ;;      Temps:          0       0       0       0       0       0       0
  9240 ;;      Totals:        12       0       0       0       0       0       0
  9241 ;;Total ram usage:       12 bytes
  9242 ;; Hardware stack levels used:    1
  9243 ;; This function calls:
  9244 ;;		Nothing
  9245 ;; This function is called by:
  9246 ;;		_tmr1
  9247 ;; This function uses a non-reentrant model
  9248 ;;
  9249                           
  9250                           	psect	text53
  9251  00227C                     __ptext53:
  9252                           	opt stack 0
  9253  00227C                     i2___lmul:
  9254                           	opt stack 23
  9255                           
  9256                           ; BSR set to: 0
  9257                           ;incstack = 0
  9258  00227C  0E00               	movlw	0
  9259  00227E  6E09               	movwf	i2___lmul@product,c
  9260  002280  0E00               	movlw	0
  9261  002282  6E0A               	movwf	i2___lmul@product+1,c
  9262  002284  0E00               	movlw	0
  9263  002286  6E0B               	movwf	i2___lmul@product+2,c
  9264  002288  0E00               	movlw	0
  9265  00228A  6E0C               	movwf	i2___lmul@product+3,c
  9266  00228C                     i2l3089:
  9267  00228C  A001               	btfss	i2___lmul@multiplier,0,c
  9268  00228E  D008               	goto	i2l3093
  9269  002290  5005               	movf	i2___lmul@multiplicand,w,c
  9270  002292  2609               	addwf	i2___lmul@product,f,c
  9271  002294  5006               	movf	i2___lmul@multiplicand+1,w,c
  9272  002296  220A               	addwfc	i2___lmul@product+1,f,c
  9273  002298  5007               	movf	i2___lmul@multiplicand+2,w,c
  9274  00229A  220B               	addwfc	i2___lmul@product+2,f,c
  9275  00229C  5008               	movf	i2___lmul@multiplicand+3,w,c
  9276  00229E  220C               	addwfc	i2___lmul@product+3,f,c
  9277  0022A0                     i2l3093:
  9278  0022A0  90D8               	bcf	status,0,c
  9279  0022A2  3605               	rlcf	i2___lmul@multiplicand,f,c
  9280  0022A4  3606               	rlcf	i2___lmul@multiplicand+1,f,c
  9281  0022A6  3607               	rlcf	i2___lmul@multiplicand+2,f,c
  9282  0022A8  3608               	rlcf	i2___lmul@multiplicand+3,f,c
  9283  0022AA  90D8               	bcf	status,0,c
  9284  0022AC  3204               	rrcf	i2___lmul@multiplier+3,f,c
  9285  0022AE  3203               	rrcf	i2___lmul@multiplier+2,f,c
  9286  0022B0  3202               	rrcf	i2___lmul@multiplier+1,f,c
  9287  0022B2  3201               	rrcf	i2___lmul@multiplier,f,c
  9288  0022B4  5001               	movf	i2___lmul@multiplier,w,c
  9289  0022B6  1002               	iorwf	i2___lmul@multiplier+1,w,c
  9290  0022B8  1003               	iorwf	i2___lmul@multiplier+2,w,c
  9291  0022BA  1004               	iorwf	i2___lmul@multiplier+3,w,c
  9292  0022BC  A4D8               	btfss	status,2,c
  9293  0022BE  D7E6               	goto	i2l3089
  9294  0022C0  C009  F001         	movff	i2___lmul@product,?i2___lmul
  9295  0022C4  C00A  F002         	movff	i2___lmul@product+1,?i2___lmul+1
  9296  0022C8  C00B  F003         	movff	i2___lmul@product+2,?i2___lmul+2
  9297  0022CC  C00C  F004         	movff	i2___lmul@product+3,?i2___lmul+3
  9298  0022D0  0012               	return		;funcret
  9299  0022D2                     __end_ofi2___lmul:
  9300                           	opt stack 0
  9301                           pclatu	equ	0xFFB
  9302                           pclath	equ	0xFFA
  9303                           tblptru	equ	0xFF8
  9304                           tblptrh	equ	0xFF7
  9305                           tblptrl	equ	0xFF6
  9306                           tablat	equ	0xFF5
  9307                           prodh	equ	0xFF4
  9308                           prodl	equ	0xFF3
  9309                           intcon	equ	0xFF2
  9310                           intcon2	equ	0xFF1
  9311                           intcon3	equ	0xFF0
  9312                           postinc0	equ	0xFEE
  9313                           fsr0h	equ	0xFEA
  9314                           fsr0l	equ	0xFE9
  9315                           wreg	equ	0xFE8
  9316                           indf1	equ	0xFE7
  9317                           postinc1	equ	0xFE6
  9318                           postdec1	equ	0xFE5
  9319                           fsr1h	equ	0xFE2
  9320                           fsr1l	equ	0xFE1
  9321                           indf2	equ	0xFDF
  9322                           postinc2	equ	0xFDE
  9323                           postdec2	equ	0xFDD
  9324                           plusw2	equ	0xFDB
  9325                           fsr2h	equ	0xFDA
  9326                           fsr2l	equ	0xFD9
  9327                           status	equ	0xFD8
  9328                           
  9329 ;; *************** function _get_data *****************
  9330 ;; Defined at:
  9331 ;;		line 283 in file "mod.c"
  9332 ;; Parameters:    Size  Location     Type
  9333 ;;		None
  9334 ;; Auto vars:     Size  Location     Type
  9335 ;;		None
  9336 ;; Return value:  Size  Location     Type
  9337 ;;                  1    wreg      void 
  9338 ;; Registers used:
  9339 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9340 ;; Tracked objects:
  9341 ;;		On entry : 0/0
  9342 ;;		On exit  : 0/0
  9343 ;;		Unchanged: 0/0
  9344 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9345 ;;      Params:         0       0       0       0       0       0       0
  9346 ;;      Locals:         0       0       0       0       0       0       0
  9347 ;;      Temps:          2       0       0       0       0       0       0
  9348 ;;      Totals:         2       0       0       0       0       0       0
  9349 ;;Total ram usage:        2 bytes
  9350 ;; Hardware stack levels used:    1
  9351 ;; Hardware stack levels required when called:    1
  9352 ;; This function calls:
  9353 ;;		_modbus_addres_check
  9354 ;; This function is called by:
  9355 ;;		_inter
  9356 ;; This function uses a non-reentrant model
  9357 ;;
  9358                           
  9359                           	psect	text54
  9360  00215E                     __ptext54:
  9361                           	opt stack 0
  9362  00215E                     _get_data:
  9363                           	opt stack 23
  9364                           
  9365                           ;mod.c: 285: get_tmp=RC1REG;
  9366                           
  9367                           ;incstack = 0
  9368  00215E  CFAE F037          	movff	4014,_get_tmp	;volatile
  9369                           
  9370                           ;mod.c: 287: if(!modbus_get_start){
  9371  002162  503A               	movf	_modbus_get_start,w,c
  9372  002164  A4D8               	btfss	status,2,c
  9373  002166  D00D               	goto	i2l427
  9374                           
  9375                           ;mod.c: 288: if(!modbus_addres_check(get_tmp)){
  9376  002168  5037               	movf	_get_tmp,w,c
  9377  00216A  EC83  F012         	call	_modbus_addres_check
  9378  00216E  0900               	iorlw	0
  9379  002170  A4D8               	btfss	status,2,c
  9380  002172  D003               	goto	i2l3243
  9381                           
  9382                           ;mod.c: 289: get_tmp=0;
  9383  002174  0E00               	movlw	0
  9384  002176  6E37               	movwf	_get_tmp,c
  9385                           
  9386                           ;mod.c: 290: return;
  9387  002178  0012               	return	
  9388  00217A                     i2l3243:
  9389                           
  9390                           ;mod.c: 291: }
  9391                           ;mod.c: 292: modbus_get_routine_tmr=0;
  9392  00217A  0E00               	movlw	0
  9393  00217C  6E39               	movwf	_modbus_get_routine_tmr,c
  9394                           
  9395                           ;mod.c: 293: get_i=0;
  9396  00217E  0E00               	movlw	0
  9397  002180  6E36               	movwf	_get_i,c
  9398  002182                     i2l427:
  9399                           
  9400                           ;mod.c: 294: }
  9401                           ;mod.c: 296: modbus_get_start=1;
  9402  002182  0E01               	movlw	1
  9403  002184  6E3A               	movwf	_modbus_get_start,c
  9404                           
  9405                           ;mod.c: 297: modbus_get_routine_tmr=0;
  9406  002186  0E00               	movlw	0
  9407  002188  6E39               	movwf	_modbus_get_routine_tmr,c
  9408                           
  9409                           ;mod.c: 299: inp_get_tmp [get_i] =get_tmp;
  9410  00218A  5036               	movf	_get_i,w,c
  9411  00218C  0D01               	mullw	1
  9412  00218E  0E00               	movlw	low _inp_get_tmp
  9413  002190  24F3               	addwf	prodl,w,c
  9414  002192  6ED9               	movwf	fsr2l,c
  9415  002194  0E01               	movlw	high _inp_get_tmp
  9416  002196  20F4               	addwfc	prodh,w,c
  9417  002198  6EDA               	movwf	fsr2h,c
  9418  00219A  C037  FFDF         	movff	_get_tmp,indf2
  9419                           
  9420                           ;mod.c: 300: inp_get_tmp [get_i+1] =0;
  9421  00219E  5036               	movf	_get_i,w,c
  9422  0021A0  6E06               	movwf	??_get_data& (0+255),c
  9423  0021A2  6A07               	clrf	(??_get_data+1)& (0+255),c
  9424  0021A4  0E01               	movlw	1
  9425  0021A6  2606               	addwf	??_get_data,f,c
  9426  0021A8  0E00               	movlw	0
  9427  0021AA  2207               	addwfc	??_get_data+1,f,c
  9428  0021AC  0E00               	movlw	low _inp_get_tmp
  9429  0021AE  2406               	addwf	??_get_data,w,c
  9430  0021B0  6ED9               	movwf	fsr2l,c
  9431  0021B2  0E01               	movlw	high _inp_get_tmp
  9432  0021B4  2007               	addwfc	??_get_data+1,w,c
  9433  0021B6  6EDA               	movwf	fsr2h,c
  9434  0021B8  0E00               	movlw	0
  9435  0021BA  6EDF               	movwf	indf2,c
  9436                           
  9437                           ;mod.c: 302: if(get_i<100)get_i++;
  9438  0021BC  0E64               	movlw	100
  9439  0021BE  6036               	cpfslt	_get_i,c
  9440  0021C0  0012               	return	
  9441  0021C2  2A36               	incf	_get_i,f,c
  9442  0021C4  0012               	return	
  9443  0021C6                     __end_of_get_data:
  9444                           	opt stack 0
  9445                           pclatu	equ	0xFFB
  9446                           pclath	equ	0xFFA
  9447                           tblptru	equ	0xFF8
  9448                           tblptrh	equ	0xFF7
  9449                           tblptrl	equ	0xFF6
  9450                           tablat	equ	0xFF5
  9451                           prodh	equ	0xFF4
  9452                           prodl	equ	0xFF3
  9453                           intcon	equ	0xFF2
  9454                           intcon2	equ	0xFF1
  9455                           intcon3	equ	0xFF0
  9456                           postinc0	equ	0xFEE
  9457                           fsr0h	equ	0xFEA
  9458                           fsr0l	equ	0xFE9
  9459                           wreg	equ	0xFE8
  9460                           indf1	equ	0xFE7
  9461                           postinc1	equ	0xFE6
  9462                           postdec1	equ	0xFE5
  9463                           fsr1h	equ	0xFE2
  9464                           fsr1l	equ	0xFE1
  9465                           indf2	equ	0xFDF
  9466                           postinc2	equ	0xFDE
  9467                           postdec2	equ	0xFDD
  9468                           plusw2	equ	0xFDB
  9469                           fsr2h	equ	0xFDA
  9470                           fsr2l	equ	0xFD9
  9471                           status	equ	0xFD8
  9472                           
  9473 ;; *************** function _modbus_addres_check *****************
  9474 ;; Defined at:
  9475 ;;		line 273 in file "mod.c"
  9476 ;; Parameters:    Size  Location     Type
  9477 ;;  adress          1    wreg     unsigned char 
  9478 ;; Auto vars:     Size  Location     Type
  9479 ;;  adress          1    4[COMRAM] unsigned char 
  9480 ;; Return value:  Size  Location     Type
  9481 ;;                  1    wreg      unsigned char 
  9482 ;; Registers used:
  9483 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  9484 ;; Tracked objects:
  9485 ;;		On entry : 0/0
  9486 ;;		On exit  : 0/0
  9487 ;;		Unchanged: 0/0
  9488 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9489 ;;      Params:         0       0       0       0       0       0       0
  9490 ;;      Locals:         1       0       0       0       0       0       0
  9491 ;;      Temps:          4       0       0       0       0       0       0
  9492 ;;      Totals:         5       0       0       0       0       0       0
  9493 ;;Total ram usage:        5 bytes
  9494 ;; Hardware stack levels used:    1
  9495 ;; This function calls:
  9496 ;;		Nothing
  9497 ;; This function is called by:
  9498 ;;		_get_data
  9499 ;; This function uses a non-reentrant model
  9500 ;;
  9501                           
  9502                           	psect	text55
  9503  002506                     __ptext55:
  9504                           	opt stack 0
  9505  002506                     _modbus_addres_check:
  9506                           	opt stack 23
  9507                           
  9508                           ;incstack = 0
  9509                           ;modbus_addres_check@adress stored from wreg
  9510  002506  6E05               	movwf	modbus_addres_check@adress,c
  9511                           
  9512                           ;mod.c: 274: if (adress==Registers[50] || adress==0xFF){
  9513  002508  EE22  F02C         	lfsr	2,_Registers+100
  9514  00250C  5005               	movf	modbus_addres_check@adress,w,c
  9515  00250E  6E03               	movwf	(??_modbus_addres_check+2)& (0+255),c
  9516  002510  6A04               	clrf	(??_modbus_addres_check+3)& (0+255),c
  9517  002512  50DE               	movf	postinc2,w,c
  9518  002514  1803               	xorwf	??_modbus_addres_check+2,w,c
  9519  002516  E104               	bnz	i2u173_40
  9520  002518  50DE               	movf	postinc2,w,c
  9521  00251A  1804               	xorwf	??_modbus_addres_check+3,w,c
  9522  00251C  B4D8               	btfsc	status,2,c
  9523  00251E  D003               	goto	i2l2747
  9524  002520                     i2u173_40:
  9525  002520  2805               	incf	modbus_addres_check@adress,w,c
  9526  002522  A4D8               	btfss	status,2,c
  9527  002524  D002               	goto	i2l2753
  9528  002526                     i2l2747:
  9529                           
  9530                           ;mod.c: 275: return 1;
  9531  002526  0E01               	movlw	1
  9532                           
  9533                           ;mod.c: 276: }else{
  9534  002528  0012               	return	
  9535  00252A                     i2l2753:
  9536                           
  9537                           ;mod.c: 277: return 0;
  9538  00252A  0E00               	movlw	0
  9539  00252C  0012               	return	
  9540  00252E                     __end_of_modbus_addres_check:
  9541                           	opt stack 0
  9542                           pclatu	equ	0xFFB
  9543                           pclath	equ	0xFFA
  9544                           tblptru	equ	0xFF8
  9545                           tblptrh	equ	0xFF7
  9546                           tblptrl	equ	0xFF6
  9547                           tablat	equ	0xFF5
  9548                           prodh	equ	0xFF4
  9549                           prodl	equ	0xFF3
  9550                           intcon	equ	0xFF2
  9551                           intcon2	equ	0xFF1
  9552                           intcon3	equ	0xFF0
  9553                           postinc0	equ	0xFEE
  9554                           fsr0h	equ	0xFEA
  9555                           fsr0l	equ	0xFE9
  9556                           wreg	equ	0xFE8
  9557                           indf1	equ	0xFE7
  9558                           postinc1	equ	0xFE6
  9559                           postdec1	equ	0xFE5
  9560                           fsr1h	equ	0xFE2
  9561                           fsr1l	equ	0xFE1
  9562                           indf2	equ	0xFDF
  9563                           postinc2	equ	0xFDE
  9564                           postdec2	equ	0xFDD
  9565                           plusw2	equ	0xFDB
  9566                           fsr2h	equ	0xFDA
  9567                           fsr2l	equ	0xFD9
  9568                           status	equ	0xFD8
  9569                           pclatu	equ	0xFFB
  9570                           pclath	equ	0xFFA
  9571                           tblptru	equ	0xFF8
  9572                           tblptrh	equ	0xFF7
  9573                           tblptrl	equ	0xFF6
  9574                           tablat	equ	0xFF5
  9575                           prodh	equ	0xFF4
  9576                           prodl	equ	0xFF3
  9577                           intcon	equ	0xFF2
  9578                           intcon2	equ	0xFF1
  9579                           intcon3	equ	0xFF0
  9580                           postinc0	equ	0xFEE
  9581                           fsr0h	equ	0xFEA
  9582                           fsr0l	equ	0xFE9
  9583                           wreg	equ	0xFE8
  9584                           indf1	equ	0xFE7
  9585                           postinc1	equ	0xFE6
  9586                           postdec1	equ	0xFE5
  9587                           fsr1h	equ	0xFE2
  9588                           fsr1l	equ	0xFE1
  9589                           indf2	equ	0xFDF
  9590                           postinc2	equ	0xFDE
  9591                           postdec2	equ	0xFDD
  9592                           plusw2	equ	0xFDB
  9593                           fsr2h	equ	0xFDA
  9594                           fsr2l	equ	0xFD9
  9595                           status	equ	0xFD8
  9596                           
  9597                           	psect	rparam
  9598  0000                     pclatu	equ	0xFFB
  9599                           pclath	equ	0xFFA
  9600                           tblptru	equ	0xFF8
  9601                           tblptrh	equ	0xFF7
  9602                           tblptrl	equ	0xFF6
  9603                           tablat	equ	0xFF5
  9604                           prodh	equ	0xFF4
  9605                           prodl	equ	0xFF3
  9606                           intcon	equ	0xFF2
  9607                           intcon2	equ	0xFF1
  9608                           intcon3	equ	0xFF0
  9609                           postinc0	equ	0xFEE
  9610                           fsr0h	equ	0xFEA
  9611                           fsr0l	equ	0xFE9
  9612                           wreg	equ	0xFE8
  9613                           indf1	equ	0xFE7
  9614                           postinc1	equ	0xFE6
  9615                           postdec1	equ	0xFE5
  9616                           fsr1h	equ	0xFE2
  9617                           fsr1l	equ	0xFE1
  9618                           indf2	equ	0xFDF
  9619                           postinc2	equ	0xFDE
  9620                           postdec2	equ	0xFDD
  9621                           plusw2	equ	0xFDB
  9622                           fsr2h	equ	0xFDA
  9623                           fsr2l	equ	0xFD9
  9624                           status	equ	0xFD8
  9625                           
  9626                           	psect	temp
  9627  000043                     btemp:
  9628                           	opt stack 0
  9629  000043                     	ds	1
  9630  0000                     int$flags	set	btemp
  9631                           pclatu	equ	0xFFB
  9632                           pclath	equ	0xFFA
  9633                           tblptru	equ	0xFF8
  9634                           tblptrh	equ	0xFF7
  9635                           tblptrl	equ	0xFF6
  9636                           tablat	equ	0xFF5
  9637                           prodh	equ	0xFF4
  9638                           prodl	equ	0xFF3
  9639                           intcon	equ	0xFF2
  9640                           intcon2	equ	0xFF1
  9641                           intcon3	equ	0xFF0
  9642                           postinc0	equ	0xFEE
  9643                           fsr0h	equ	0xFEA
  9644                           fsr0l	equ	0xFE9
  9645                           wreg	equ	0xFE8
  9646                           indf1	equ	0xFE7
  9647                           postinc1	equ	0xFE6
  9648                           postdec1	equ	0xFE5
  9649                           fsr1h	equ	0xFE2
  9650                           fsr1l	equ	0xFE1
  9651                           indf2	equ	0xFDF
  9652                           postinc2	equ	0xFDE
  9653                           postdec2	equ	0xFDD
  9654                           plusw2	equ	0xFDB
  9655                           fsr2h	equ	0xFDA
  9656                           fsr2l	equ	0xFD9
  9657                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    4
    Data        0
    BSS         740
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     39      66
    BANK0           160     46     159
    BANK1           256      0     200
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    spi_transmit@tmp_buf	PTR unsigned char  size(2) Largest target is 400
		 -> Registers(BIGRAM[400]), 

    spi_write@data	PTR unsigned char  size(2) Largest target is 35
		 -> spi_data(BANK0[35]), 

    spi_read@data	PTR unsigned char  size(2) Largest target is 400
		 -> Registers(BIGRAM[400]), 

    save_EEPROM@point	PTR int  size(2) Largest target is 400
		 -> Registers(BIGRAM[400]), 

    save_EEPROM@tmp_16bit	PTR unsigned int  size(2) Largest target is 2
		 -> save_EEPROM@tmp_8bit(COMRAM[2]), 

    load_EEPROM@point	PTR int  size(2) Largest target is 400
		 -> Registers(BIGRAM[400]), 

    load_EEPROM@tmp_16bit	PTR unsigned int  size(2) Largest target is 2
		 -> load_EEPROM@tmp_8bit(BANK0[2]), 

    tx_routine@tmp_out	PTR unsigned char  size(2) Largest target is 100
		 -> out_send_tmp(BANK1[100]), 

    CRC16@buffer	PTR unsigned char  size(2) Largest target is 100
		 -> out_send_tmp(BANK1[100]), inp_get_tmp(BANK1[100]), 

    tmp2_16bit	PTR unsigned int  size(2) Largest target is 2
		 -> NULL(NULL[0]), tmp2(COMRAM[2]), 

    read_all_adc@point	PTR unsigned int  size(2) Largest target is 2
		 -> read_all_adc@tmp(BANK0[2]), 


Critical Paths under _main in COMRAM

    _main->_receive_check
    _main->_spi_transmit
    _spi_transmit->_spi_write
    _send->_delay
    _receive_init->_spi_write
    _rx_routine->_modbus_RTU
    _modbus_RTU->_CRC16
    _receive_check->_spi_read
    _spi_read->_SPI
    _read_all_adc->___aldiv
    _measure->___awtoft
    _save_EEPROM->_write_eeprom
    ___fttol->___awtoft
    ___ftmul->___awtoft
    ___awtoft->___ftpack
    _load_EEPROM->_read_eeprom
    _change_channel->_spi_write
    _spi_write->_SPI
    _spi_start_command->_delay

Critical Paths under _inter in COMRAM

    _inter->_tmr1
    _tmr2->_modbus_get_routine
    _tmr1->i2___lmul
    _get_data->_modbus_addres_check

Critical Paths under _main in BANK0

    _main->_measure
    _rx_routine->_modbus_RTU
    _modbus_RTU->_CRC16
    _read_all_adc->___aldiv
    _measure->___fttol
    ___fttol->___ftmul
    ___ftmul->___awtoft

Critical Paths under _inter in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _inter in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _inter in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _inter in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _inter in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _inter in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 6     6      0   59354
                                             42 BANK0      4     4      0
                           _SPI_Init
                            ___awmod
                           _adc_init
                     _change_channel
                        _load_EEPROM
                            _measure
              _modbus_slave_rtu_init
                           _pic_init
                       _read_all_adc
                      _receive_check
                       _receive_init
                         _rx_routine
                        _save_EEPROM
                       _spi_transmit
                        _timer0_init
                        _timer1_init
                        _timer2_init
                        _timer3_init
                          _tris_init
                         _tx_routine
 ---------------------------------------------------------------------------------
 (1) _tx_routine                                           2     2      0      24
                                             28 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _tris_init                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _timer3_init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _timer2_init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _timer1_init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _timer0_init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _spi_transmit                                         7     5      2   15007
                                             35 COMRAM     4     2      2
                                              0 BANK0      3     3      0
                                _SPI
                       _receive_init
                               _send
                    _spi_end_command
                  _spi_start_command
                          _spi_write
 ---------------------------------------------------------------------------------
 (2) _send                                                 0     0      0      68
                              _delay
 ---------------------------------------------------------------------------------
 (2) _receive_init                                         0     0      0    7261
                              _delay
                          _spi_write
 ---------------------------------------------------------------------------------
 (1) _rx_routine                                           0     0      0    3596
                              _CRC16
                         _modbus_RTU
 ---------------------------------------------------------------------------------
 (2) _modbus_RTU                                          11    11      0    2126
                                             35 COMRAM     4     4      0
                                              7 BANK0      7     7      0
                              _CRC16
                         _send_ready
 ---------------------------------------------------------------------------------
 (3) _send_ready                                           1     1      0      31
                                             28 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _CRC16                                               14    10      4    1470
                                             28 COMRAM     7     3      4
                                              0 BANK0      7     7      0
 ---------------------------------------------------------------------------------
 (1) _receive_check                                        3     3      0    8217
                                             37 COMRAM     2     2      0
                                              0 BANK0      1     1      0
                                _SPI
                           _spi_read
                          _spi_write
 ---------------------------------------------------------------------------------
 (2) _spi_read                                             7     3      4     956
                                             30 COMRAM     7     3      4
                                _SPI
                    _spi_end_command
                  _spi_start_command
 ---------------------------------------------------------------------------------
 (1) _read_all_adc                                        12    12      0    2288
                                             36 COMRAM     2     2      0
                                              6 BANK0     10    10      0
                            ___aldiv
 ---------------------------------------------------------------------------------
 (1) _pic_init                                             0     0      0       0
                            _adc_dis
                            _cpp_dis
                      _interrupt_dis
                           _mssp_dis
                            _osc_int
                         _port_clear
                         _timers_dis
                         _tris_clear
 ---------------------------------------------------------------------------------
 (2) _tris_clear                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _timers_dis                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _port_clear                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _osc_int                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _mssp_dis                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _interrupt_dis                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _cpp_dis                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _adc_dis                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _modbus_slave_rtu_init                                3     3      0      22
                                             28 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (1) _measure                                             23    23      0   13657
                                             31 BANK0     11    11      0
                            ___aldiv
                            ___almod
                           ___awtoft
                            ___ftmul
                            ___fttol
                            ___lldiv
                             ___lmul
                        _save_EEPROM
 ---------------------------------------------------------------------------------
 (1) _save_EEPROM                                          8     5      3     761
                                             30 COMRAM     8     5      3
                       _write_eeprom
 ---------------------------------------------------------------------------------
 (2) _write_eeprom                                         2     1      1     172
                                             28 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (2) ___lmul                                              12     4      8     726
                                             28 COMRAM     8     0      8
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     549
                                             28 COMRAM     8     0      8
                                              0 BANK0      5     5      0
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             15    11      4     756
                                             16 BANK0     15    11      4
                           ___awtoft (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftmul                                             15     9      6    4486
                                              1 BANK0     15     9      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___awtoft                                             4     1      3    3247
                                             36 COMRAM     3     0      3
                                              0 BANK0      1     1      0
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___ftpack                                             8     3      5    2344
                                             28 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (2) ___almod                                             10     2      8     552
                                             28 COMRAM    10     2      8
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             14     6      8    1523
                                             28 COMRAM     8     0      8
                                              0 BANK0      6     6      0
 ---------------------------------------------------------------------------------
 (1) _load_EEPROM                                         13    10      3     491
                                             29 COMRAM     5     2      3
                                              0 BANK0      8     8      0
                        _read_eeprom
 ---------------------------------------------------------------------------------
 (2) _read_eeprom                                          1     1      0      31
                                             28 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _change_channel                                       1     1      0    7410
                                             35 COMRAM     1     1      0
                          _spi_write
 ---------------------------------------------------------------------------------
 (2) _spi_write                                            5     1      4    7193
                                             30 COMRAM     5     1      4
                                _SPI
                    _spi_end_command
                  _spi_start_command
 ---------------------------------------------------------------------------------
 (3) _spi_start_command                                    0     0      0      68
                              _delay
 ---------------------------------------------------------------------------------
 (4) _delay                                                1     1      0      68
                                             28 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _spi_end_command                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _SPI                                                  2     2      0      31
                                             28 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _adc_init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) ___awmod                                              6     2      4     552
                                             28 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (1) _SPI_Init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _inter                                               14    14      0     255
                                             14 COMRAM    14    14      0
                           _get_data
                               _tmr1
                               _tmr2
 ---------------------------------------------------------------------------------
 (7) _tmr2                                                 0     0      0      15
                 _modbus_get_routine
 ---------------------------------------------------------------------------------
 (8) _modbus_get_routine                                   1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (7) _tmr1                                                 2     2      0     196
                                             12 COMRAM     2     2      0
                           i2___lmul
 ---------------------------------------------------------------------------------
 (8) i2___lmul                                            12     4      8     196
                                              0 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 (7) _get_data                                             2     2      0      44
                                              5 COMRAM     2     2      0
                _modbus_addres_check
 ---------------------------------------------------------------------------------
 (8) _modbus_addres_check                                  5     5      0      44
                                              0 COMRAM     5     5      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _SPI_Init
   ___awmod
   _adc_init
   _change_channel
     _spi_write
       _SPI
       _spi_end_command
       _spi_start_command
         _delay
   _load_EEPROM
     _read_eeprom
   _measure
     ___aldiv
     ___almod
     ___awtoft
       ___ftpack
     ___ftmul
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
     ___fttol
       ___awtoft (ARG)
         ___ftpack
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
     ___lldiv
     ___lmul
     _save_EEPROM
       _write_eeprom
   _modbus_slave_rtu_init
   _pic_init
     _adc_dis
     _cpp_dis
     _interrupt_dis
     _mssp_dis
     _osc_int
     _port_clear
     _timers_dis
     _tris_clear
   _read_all_adc
     ___aldiv
   _receive_check
     _SPI
     _spi_read
       _SPI
       _spi_end_command
       _spi_start_command
         _delay
     _spi_write
       _SPI
       _spi_end_command
       _spi_start_command
         _delay
   _receive_init
     _delay
     _spi_write
       _SPI
       _spi_end_command
       _spi_start_command
         _delay
   _rx_routine
     _CRC16
     _modbus_RTU
       _CRC16
       _send_ready
   _save_EEPROM
     _write_eeprom
   _spi_transmit
     _SPI
     _receive_init
       _delay
       _spi_write
         _SPI
         _spi_end_command
         _spi_start_command
           _delay
     _send
       _delay
     _spi_end_command
     _spi_start_command
       _delay
     _spi_write
       _SPI
       _spi_end_command
       _spi_start_command
         _delay
   _timer0_init
   _timer1_init
   _timer2_init
   _timer3_init
   _tris_init
   _tx_routine

 _inter (ROOT)
   _get_data
     _modbus_addres_check
   _tmr1
     i2___lmul
   _tmr2
     _modbus_get_routine

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0     190      16       26.1%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       7        0.0%
BANK2              100      0       0       8        0.0%
BITBANK1           100      0       0       5        0.0%
BANK1              100      0      C8       6       78.1%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0     2E      9F       4       99.4%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     27      42       1       70.2%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     1A9       9        0.0%
DATA                 0      0     339      17        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.38 build -256452561 
Symbol Table                                                                                   Tue Jan 31 07:44:22 2017

                _rf_reset_timer 002E                     __CFG_CP0$ON 000000                     __CFG_CP1$ON 000000  
                   __CFG_CP2$ON 000000                     __CFG_CP3$ON 000000           __end_of_interrupt_dis 2554  
                   __CFG_CPB$ON 000000                     __CFG_CPD$ON 000000                    _out_send_tmp 0164  
                           l322 128C                             l332 1384                             l404 1444  
                           l317 11F4                             l503 2622                             l327 1308  
                           l409 151E                             l443 2138                             l508 255A  
                           l382 1A80                             l471 24D2                             l836 1D9C  
                           l961 1F7C                             _GIE 007F97                             _PR2 000FBB  
                           _PR4 000F52                             _SPI 2554                             _adc 0060  
                  ___awmod@sign 0022                             prod 000FF3                             wreg 000FE8  
                    _TXSTA1bits 000FAC                 save_EEPROM@addr 0026                  _change_channel 200E  
                  __CFG_LVP$OFF 000000                            ?_SPI 0001                            l4101 17A2  
                          SPI@d 001E                            l4121 182A                            l4131 1868  
                          l4107 17DC                            l4211 1F38                            l4043 21D8  
                          l4125 1848                            l4071 1C8A                            l4151 23C0  
                          l4135 1886                            l4207 1F26                            l4047 21F4  
                          l3263 210E                            l4073 1C98                            l4065 1C64  
                          l4161 1900                            l4209 1F34                            l4233 11E0  
                          l3273 2142                            l4315 1FA6                            l4091 1CFC  
                          l4083 1CD0                            l4075 1C9C                            l4059 1C4A  
                          l4219 1F6C                            l4251 1278                            l3267 2122  
                          l3541 20A6                            l4341 06E4                            l4245 1230  
                          l3277 2150                            l3269 212C                            l4327 1FF6  
                          l4087 1CE0                            l4191 19D2                            l4183 19A6  
                          l4335 065E                            l4263 12C8                            l3561 20EC  
                          l3553 20D4                            l3545 20B4                            l3537 209A  
                          l4193 19DC                            l4281 1344                            l4425 1BB4  
                          l4601 0E94                            l3547 20BC                            l2931 1DD8  
                          l4179 1992                            l3549 20C0                            l3557 20DE  
                          l2941 1E0A                            l4197 19F8                            l4189 19C2  
                          l2773 2234                            l4269 12F4                            l3813 1B02  
                          l3901 145E                            l4437 1BF2                            l4429 1BBE  
                          l4605 0EAE                            l4541 0D26                            l2943 1E0E  
                          l2951 1E40                            l2935 1DEC                            l2783 2272  
                          l4391 0C20                            l4287 1370                            l3753 261A  
                          l4465 1EFA                            l3817 1B06                            l3921 1556  
                          l4625 0F32                            l4609 0ED4                            l3843 2412  
                          l2955 1E56                            l2947 1E32                            l2939 1DFE  
                          l3851 1D1E                            l4299 13C0                            l3931 158E  
                          l4627 0F3A                            l3781 1A1C                            l3925 1560  
                          l3909 14E2                            l3941 15C2                            l4581 0E28  
                          l3839 23FA                            l3863 1D6A                            l3855 1D2C  
                          l3791 1A78                            l3943 15D2                            l4583 0E34  
                          l4567 0D9E                            l4559 0D76                            l3865 1D88  
                          l3857 1D36                            l3785 1A48                            l3867 1D92  
                          l3859 1D54                            l3795 1A86                            l4587 0E4C  
                          l3973 230C                            l3797 1A8C                            l4589 0E54  
                          l4599 0E88                            _ADIE 007CEE                            _ADIF 007CF6  
                          l3969 22F2                            u3040 143A         receive_check@return_val 00D1  
                          u3201 177E                            u3221 17B8                            u3090 15A4  
                          _IPR1 000F9F                            _IPR2 000FA2                            u3271 18DC  
                          _PIE1 000F9D                            _PIE2 000FA0                            u3290 1926  
                          u3700 0EA4                            u3295 191C                            u3650 0E10  
                          _PEIE 007F96                            u2860 2568                            _RCIF 007CF5  
                          u2878 256A                            _PIR1 000F9E                            _PIR2 000FA1  
                          _TMR2 000FBC                            _TMR4 000F53                    ?_load_EEPROM 001E  
           adc_read_all@adc_tmp 00A4                            _main 0CC6                    ___ftpack@arg 001D  
                          _tmp2 0041                            _tmr1 15E4                            _tmr2 26AE  
                  ___ftpack@exp 0020                            _send 2656                            fsr0h 000FEA  
                          fsr1h 000FE2                            fsr0l 000FE9                            fsr2h 000FDA  
                          indf1 000FE7                            fsr1l 000FE1                            indf2 000FDF  
                          fsr2l 000FD9                            btemp 0043                    spi_read@data 001F  
                 __CFG_BORV$250 000000                            pclat 000FFA                            prodh 000FF4  
                          prodl 000FF3                            start 00A4                  load_EEPROM@len 0020  
                 __CFG_IESO$OFF 000000                  load_EEPROM@tmp 00D5                    ___ftmul@cntr 00DF  
                  ___param_bank 000010                save_EEPROM@point 001F                    ___ftmul@sign 00E0  
             tx_routine@tmp_out 001D             _modbus_addres_check 2506                           ??_SPI 001D  
                  ___fttol@exp1 00EF                    ___fttol@lval 00EB                    _BAUDCON1bits 000FB8  
          save_EEPROM@tmp_16bit 0022                 __end_of___aldiv 1D0E                 __end_of___almod 1E68  
                         ?_main 0001                           _EEADR 000FA9                           ?_tmr1 0001  
                         ?_tmr2 0001                           ?_send 0001                           _CRC16 1A0A  
               __end_of___awmod 20F6                 __end_of___lldiv 1F8E                 __end_of___ftmul 18C6  
                         _T0CON 000FD5                           _T1CON 000FCD                 __end_of___fttol 1A0A  
               __end_of_adc_dis 24B4                           _T2CON 000FBA                           _T3CON 000FB1  
                         _T4CON 000F51                  __CFG_DEBUG$OFF 000000                           i2l427 2182  
                         i2l572 1634                           i2l573 1636                           i2l582 174E  
                         i2l574 1646                           i2l591 0068                           _TMR1H 000FCF  
                         _TMR0L 000FD6                           _TMR3H 000FB3                           _TMR1L 000FCE  
                         _TMR3L 000FB2                           _SPBRG 000FAF                           _PORTA 000F80  
                         _PORTB 000F81                           _PORTC 000F82                           _PORTD 000F83  
                         _PORTE 000F84                           _TRISA 000F92                           _TRISB 000F93  
                         _TRISC 000F94                           _TRISD 000F95                           _TRISE 000F96  
        _modbus_get_routine_tmr 0039                   __CFG_WRT0$OFF 000000                   __CFG_WRT1$OFF 000000  
        __end_of_change_channel 2086                   __CFG_WRT2$OFF 000000             ___lmul@multiplicand 0021  
                 __CFG_WRT3$OFF 000000                    ?_read_eeprom 0001                  __CFG_EBTR0$OFF 000000  
                __CFG_FCMEN$OFF 000000                  __CFG_EBTR1$OFF 000000                  __CFG_EBTR2$OFF 000000  
                __CFG_EBTR3$OFF 000000                 __end_of_cpp_dis 25D8                   __CFG_WRTB$OFF 000000  
                 __CFG_WRTC$OFF 000000                   __CFG_WRTD$OFF 000000            ?_modbus_addres_check 0001  
                __CFG_EBTRB$OFF 000000                   ___awtoft@sign 00D1                           _delay 2616  
                         _get_i 0036                 __end_of_measure 0CC6                           _inter 0008  
            __CFG_MCLRE$INTMCLR 000000                   ___ftpack@sign 0021                __end_of_SPI_Init 268C  
               __end_of_osc_int 2680                  __CFG_BOREN$OFF 000000                           tablat 000FF5  
              __end_ofi2___lmul 22D2                           plusw2 000FDB                           status 000FD8  
               load_EEPROM@addr 00D7                    spi_write@adr 0021                    spi_write@len 0022  
               __initialization 2362                    __end_of_main 0F5A                    __end_of_tmr1 1768  
                  __end_of_tmr2 26B6                    __end_of_send 2664                    ?_save_EEPROM 001F  
         __size_of_write_eeprom 002A                          CRC16@i 00D5                          CRC16@j 00D3  
                        ??_main 00FB                   ___fttol@sign1 00EA                          ??_tmr1 000D  
                        ??_tmr2 0002                          ??_send 001E                          ?_CRC16 001D  
                 __activetblptr 000002             _modbus_check_silent 0038                  __CFG_PLLCFG$ON 000000  
               ?_change_channel 0001           ??_modbus_addres_check 0001                          ?_delay 0001  
                        _ADCON0 000FC2                          _ADCON1 000FC1                          _ADCON2 000FC0  
                        ?_inter 0001                          _ADRESH 000FC4                          _ADRESL 000FC3  
                        _EEDATA 000FA8                          _CCPR1H 000FBF                          _CCPR2H 000F68  
                        _CCPR1L 000FBE                          _CCPR2L 000F67                          _EECON2 000FA7  
              __end_of___awtoft 23E4                          _ANSELA 000F38                          _ANSELB 000F39  
                        _ANSELC 000F3A                          _ANSELD 000F3B                          _ANSELE 000F3C  
              __end_of___ftpack 1DBC                          _GODONE 007E11                          _RC1REG 000FAE  
              __end_of_adc_init 245A                __end_of_adc_list 0605                          i2l1405 24F0  
                        i2l3243 217A                          i2l3093 22A0                  __CFG_WDTEN$OFF 000000  
                        i2l3089 228C                          i2l3521 1732                          i2l3513 1716  
                        i2l3505 16FA                          i2l3525 1740                          i2l3517 1724  
                        i2l3509 1708                          i2l3623 004C                          i2l2753 252A  
                        i2l2747 2526                          i2l3483 1614                          i2l3493 1648  
                        i2l3629 0056                          i2l3495 1652                          _INTCON 000FF2  
                        _RCSTA1 000FAB                          _OSCCON 000FD3                          _TMR0IE 007F95  
                        _SPBRG1 000FAF                          _TMR1IE 007CE8                          _TMR1IF 007CF0  
                        _TMR2IE 007CE9                          _TMR2IF 007CF1                          _TMR3IE 007D01  
                        _TMR3IF 007D09                  __CFG_WDTPS$512 000000                i2___lmul@product 0009  
                        _TX1REG 000FAD                   tmr1@blink_tmr 00A8                          _TXSTA1 000FAC  
      __size_of_spi_end_command 0004                   ?_read_all_adc 0001              _modbus_get_routine 24DE  
                  _write_eeprom 24B4                  __CFG_PWRTEN$ON 000000                  __CFG_XINST$OFF 000000  
              __end_of_get_data 21C6        spi_transmit@start_reg_id 0024                   main@rf_send_i 00FD  
                        ___lmul 21C6                          _adcon0 0035                       ??___aldiv 0025  
                     ??___almod 0025                       ??___awmod 0021                       ??___lldiv 0025  
                     ??___ftmul 00D8                    ?_timer0_init 0001                       ??___fttol 00E5  
                     ??_adc_dis 001D                    ?_timer1_init 0001             ?_modbus_get_routine 0001  
                  ?_timer2_init 0001                    ?_timer3_init 0001           _modbus_slave_rtu_init 231A  
                        delay@i 001D                          clear_0 236A                          clear_1 237C  
                        clear_2 2388                          clear_3 2394                 ___awmod@divisor 001F  
              __end_of_pic_init 259A                 ___awmod@counter 0021                       ??_cpp_dis 001D  
                 spi_transmit@i 00D3           ___ftmul@f3_as_product 00DC                       ??_measure 00F0  
           modbus_RTU@reg_count 00D8                    __mediumconst 0000                __end_of_mssp_dis 25BC  
                     ??_osc_int 001D                          tblptrh 000FF7                          tblptrl 000FF6  
                        tblptru 000FF8                __end_of_spi_read 231A            ??_modbus_get_routine 0001  
               __CFG_HFOFST$OFF 000000                load_EEPROM@point 001E                      __accesstop 0060  
       __end_of__initialization 239A                   spi_write@data 001F                   ?_receive_init 0001  
               __CFG_PBADEN$OFF 000000             spi_transmit@tmp_buf 00D1                  ??_read_all_adc 0025  
                 __end_of_CRC16 1B3C            __size_of_load_EEPROM 0080                   ___rparam_used 000001  
                    ___awtoft@c 0025                      ___ftmul@f1 00D2                      ___ftmul@f2 00D5  
                    ___fttol@f1 00E1                  __pcstackCOMRAM 0001                   __end_of_delay 2628  
                 __end_of_inter 00A4                       ?_SPI_Init 0001                         ??_CRC16 0021  
                     ?i2___lmul 0001                     modbus_RTU@i 00DE                         ??_delay 001D  
                       ??_inter 000F            __size_of_read_eeprom 0010                      __pbssBANK0 0060  
                    __pbssBANK1 0100                     tmr1@timer_s 00AA                  ??_receive_init 0024  
                   tmr1@tmr_hiz 00AC              __CFG_CCP2MX$PORTC1 000000                         ?___lmul 001D  
           measure@hall_adc_av1 0098             measure@hall_adc_av2 009C          __size_of_receive_check 0098  
        ?_modbus_slave_rtu_init 0001               ??_spi_end_command 001D                         _CCP1CON 000FBD  
                       _CCP2CON 000F66                         _CCP3CON 000F5D                         _CCP4CON 000F57  
                       _CCP5CON 000F54                         _ECCP1AS 000FB6                         _ECCP2AS 000F64  
                ___lmul@product 00D1            __size_of_save_EEPROM 0056                       ?___awtoft 0025  
                     ?___ftpack 001D                      ??_SPI_Init 001D                       ?_adc_init 0001  
                    ??i2___lmul 0009                      CRC16@check 0020                         _INTCON2 000FF1  
                       _INTCON3 000FF0                         _OSCCON2 000FD2               __CFG_PRICLKEN$OFF 000000  
                       _OSCTUNE 000F9B                         _PWM1CON 000FB7              __size_of_spi_write 003C  
                       _PWM2CON 000F65                         _SPBRGH1 000FB0                         _SSP1BUF 000FC9  
              write_eeprom@addr 001E                       ?_get_data 0001              __size_of_tris_init 0016  
        __size_of_interrupt_dis 0026            modbus_RTU@get_addres 00DB                       ?_pic_init 0001  
                       __Hparam 0000                         __Lparam 0000                       ?_mssp_dis 0001  
                       ___aldiv 1C2A                         ___almod 1DBC                       ?_spi_read 001F  
               __size_of___lmul 0060                         ___awmod 2086                         ___lldiv 1F00  
                       ___ftmul 1768                         ___fttol 18C6                         _adc_dis 2488  
                  __psmallconst 0600                 __CFG_STVREN$OFF 000000                         __pcinit 2362  
                    ??___awtoft 0028                      ??___ftpack 0022                ??_change_channel 0024  
                       __ramtop 0600            __size_of_timer0_init 0008                      ??_adc_init 001D  
          __size_of_timer1_init 0008                         __ptext0 0CC6                         __ptext1 20F6  
                       __ptext2 25D8                         __ptext3 2696                         __ptext4 2648  
                       __ptext5 269E                         __ptext6 26A6                         __ptext7 1B3C  
                       __ptext8 2656                         __ptext9 0F5A            __size_of_timer2_init 000E  
          __size_of_timer3_init 0008                         _cpp_dis 25BC                         _get_tmp 0037  
                    _read_write 003C                    __size_of_SPI 0024                      _tmp2_16bit 00A2  
          __end_of_read_all_adc 13D4                         _measure 0606                ___awmod@dividend 001D  
              ___aldiv@dividend 001D                      _modbus_RTU 13D4                         _osc_int 2672  
                 _receive_check 1E68                      ??_get_data 0006                    CRC16@highCRC 00D2  
          end_of_initialization 239A                   __Lmediumconst 0000                   _rf_init_timer 0028  
                    _send_count 003D                      _send_ready 2628                      ??_pic_init 001D  
               ___lldiv@divisor 0021                 ___lldiv@counter 00D5                change_channel@ch 0024  
             __end_of_spi_write 2420                ___aldiv@quotient 00D3                      ??_mssp_dis 001D  
                       postdec1 000FE5                         postdec2 000FDD                      ??_spi_read 0023  
                       postinc0 000FEE                         postinc1 000FE6                         postinc2 000FDE  
           i2___lmul@multiplier 0001                   _interrupt_dis 252E               __end_of_tris_init 25EE  
          __end_of_receive_init 119A                       _PORTAbits 000F80                       _PORTBbits 000F81  
                     _PORTCbits 000F82     __end_of_modbus_addres_check 252E                       _PORTEbits 000F84  
                    _timers_dis 2604                   _rf_send_timer 0030                      _port_clear 25EE  
                ?_receive_check 0001                 CRC16@dataLength 001F                  save_EEPROM@len 0021  
                 ?_spi_transmit 0024                      _tris_clear 2664                      _rx_routine 245A  
                   spi_read@adr 0021                     spi_read@len 0022                     ___ftmul@exp 00DB  
                    _tx_routine 20F6                   send_ready@cnt 001D                  ?_interrupt_dis 0001  
                __end_of___lmul 2226             save_EEPROM@tmp_8bit 0024               __size_of_SPI_Init 000C  
           start_initialization 2362               __size_ofi2___lmul 0056                     ?_modbus_RTU 0001  
                   __end_of_SPI 2578               _adc_all_port_done 0034     __size_of_modbus_get_routine 0028  
                 ??_load_EEPROM 0021                  ??_spi_transmit 0026                 _spi_end_command 26B6  
                  _measure$2382 00F4                     ?_send_ready 0001                       _Registers 01C8  
             read_all_adc@point 00DD               read_all_adc@ort_i 00DF         ??_modbus_slave_rtu_init 001D  
            modbus_RTU@get_func 00DA                        ??___lmul 0025           __size_of_read_all_adc 023A  
                   ?_timers_dis 0001            _rf_recive_done_timer 002A               __size_of___awtoft 003C  
             __size_of___ftpack 00AE                     __pbssBIGRAM 01C8                     ?_port_clear 0001  
               ??_receive_check 0026               __size_of_adc_init 003A                     __pbssCOMRAM 0028  
                 ??_read_eeprom 001D               _spi_start_command 268C                   __pcstackBANK0 00D1  
            ?_spi_start_command 0001                 read_all_adc@ort 00D7                 read_all_adc@tmp 00DB  
             __size_of_get_data 0068                     ?_tris_clear 0001                     ?_rx_routine 0001  
           ??_spi_start_command 001E                    _read_all_adc 119A             __end_of_load_EEPROM 200E  
             __size_of_pic_init 0022             __size_of_modbus_RTU 0210                 ??_interrupt_dis 001D  
                     __pintcode 0008                   ??_save_EEPROM 0022                     ?_tx_routine 0001  
         __size_of_receive_init 0240                        ?___aldiv 001D                        ?___almod 001D  
                      ?___awmod 001D                        ?___lldiv 001D                        ?___ftmul 00D2  
                      ?___fttol 00E1                        ?_adc_dis 0001               __size_of_mssp_dis 0022  
             __size_of_spi_read 0048                ___almod@dividend 001D                        ?_cpp_dis 0001  
                __size_of_CRC16 0132       __end_of_spi_start_command 2696                     __smallconst 0600  
                 measure@akim_i 00A6                        ?_measure 0001             __size_of_send_ready 0010  
                      _BAUDCON1 000FB8                        ?_osc_int 0001                        _CCPTMRS0 000F49  
       __end_of_spi_end_command 26BA                  __size_of_delay 0012                  __size_of_inter 009C  
           __end_of_read_eeprom 2648                 ___aldiv@divisor 0021     modbus_slave_rtu_init@adress 001F  
               ___aldiv@counter 00D1                    _receive_init 0F5A                        _LATCbits 000F8B  
                      _LATDbits 000F8C                        _LATEbits 000F8D                     CRC16@buffer 001D  
                   CRC16@lowCRC 00D1                        _PIE1bits 000F9D                   ?_write_eeprom 001D  
           __size_of_timers_dis 0012                 read_eeprom@addr 001D                        i2u244_45 1630  
                      i2u244_46 1632             __size_of_port_clear 0016                        i2u173_40 2520  
                      i2u246_45 1642                        i2u246_46 1644                        _PIR1bits 000F9E  
                      _PIR2bits 000FA1                        _SSP1CON1 000FC6                        _SSP1CON2 000FC5  
                      _SSP1CON3 000FCB                   ??_timer0_init 001D                        _SSP2CON1 000F6C  
                      _SSP2CON2 000F6B                        _SSP2CON3 000F69                   ??_timer1_init 001D  
                 ??_timer2_init 001D                   ??_timer3_init 001D                        _SSP1STAT 000FC7  
                      _SSP2STAT 000F6D                       _timer_tmp 0032                        _VREFCON0 000F42  
                      _VREFCON1 000F41                        _VREFCON2 000F40                       _spi_write 23E4  
                      _SPI_Init 2680               write_eeprom@value 001D            __end_of_spi_transmit 1C2A  
                      i2___lmul 227C             __end_of_save_EEPROM 227C             __size_of_tris_clear 000E  
           __size_of_rx_routine 002E                       _tris_init 25D8               adc_read_all@adc_i 003E  
             adc_read_all@adc_j 003F               ___lmul@multiplier 001D             __size_of_tx_routine 0068  
                    spi_write@i 0023                     _load_EEPROM 1F8E                  ??_write_eeprom 001E  
                    _EECON1bits 000FA6                        __Hrparam 0000                _modbus_get_start 003A  
                      __Lrparam 0000               __CFG_P2BMX$PORTD2 000000               modbus_RTU@reg_adr 00DC  
                 CRC16@CheckSum 00D6                __size_of___aldiv 00E4                __size_of___almod 00AC  
               measure@tmp_watt 00F7                __size_of___awmod 0070                __size_of___lldiv 008E  
              __size_of___ftmul 015E                __size_of___fttol 0144                __size_of_adc_dis 002C  
                      ___awtoft 23A8                        ___ftpack 1D0E                      ?_spi_write 001F  
                      _adc_init 2420                        _adc_list 0601                     _inp_get_tmp 0100  
    __size_of_spi_start_command 000A                       tmr1@blink 0040             __end_of_timer0_init 26AE  
              __size_of_cpp_dis 001C             __end_of_timer1_init 26A6             __end_of_timer2_init 2656  
           __end_of_timer3_init 269E                      ?_tris_init 0001                __size_of_measure 06C0  
                  ??_modbus_RTU 0024                     _read_eeprom 2638                ?_spi_end_command 0001  
              __size_of_osc_int 000E                        __ptext10 245A                        __ptext11 13D4  
                      __ptext20 25EE                        __ptext12 2628                        __ptext21 2672  
                      __ptext13 1A0A                        __ptext30 21C6                        __ptext22 259A  
                      __ptext14 1E68                        __ptext31 1F00                        __ptext23 252E  
                      __ptext15 22D2                        __ptext40 200E                        __ptext32 18C6  
                      __ptext24 25BC                        __ptext16 119A                        __ptext41 23E4  
                      __ptext33 1768                        __ptext25 2488                        __ptext17 2578  
                      __ptext50 26AE                        __ptext42 268C                        __ptext34 23A8  
                      __ptext26 231A                        __ptext18 2664                        __ptext51 24DE  
                      __ptext43 2616                        __ptext35 1D0E                        __ptext27 0606  
                      __ptext19 2604                        __ptext52 15E4                        __ptext44 26B6  
                      __ptext36 1DBC                        __ptext28 2226                        __ptext53 227C  
                      __ptext45 2554                        __ptext37 1C2A                        __ptext29 24B4  
                      __ptext54 215E                        __ptext46 2420                        __ptext38 1F8E  
                      __ptext55 2506                        __ptext47 2086                        __ptext39 2638  
                      __ptext48 2680    __size_of_modbus_addres_check 0028                    _SSP1CON1bits 000FC6  
                      _get_data 215E         __size_of_change_channel 0078                 ___almod@divisor 0021  
               ___almod@counter 0025                _modbus_time_over 003B                    ??_send_ready 001D  
                 __size_of_main 0294                   __size_of_tmr1 0184                   __size_of_tmr2 0008  
                 __size_of_send 000E                        _pic_init 2578  __size_of_modbus_slave_rtu_init 0048  
 __end_of_modbus_slave_rtu_init 2362                        _mssp_dis 259A                        _spi_data 00AE  
                      _spi_read 22D2              __end_of_modbus_RTU 15E4                        int$flags 0043  
                   _save_EEPROM 2226                    _SSP1STATbits 000FC7                       spi_read@i 0025  
             _rf_all_send_timer 00A0                    ??_timers_dis 001D                    ??_port_clear 001D  
            __end_of_send_ready 2638           i2___lmul@multiplicand 0005                 _rf_recive_timer 002C  
    __end_of_modbus_get_routine 2506                        intlevel2 0000            load_EEPROM@tmp_16bit 00D1  
                  ??_tris_clear 001D                ___lldiv@dividend 001D                    ??_rx_routine 0028  
       modbus_get_routine@scale 0001              __end_of_timers_dis 2616              __end_of_port_clear 2604  
                  ??_tx_routine 001D           __size_of_spi_transmit 00EE                     _timer0_init 26A6  
                   _timer1_init 269E                     _timer2_init 2648                     _timer3_init 2696  
                   _watt1_integ 0090                     _watt2_integ 0094                     ??_spi_write 0023  
          __end_of_write_eeprom 24DE                ___lldiv@quotient 00D1                     ??_tris_init 001D  
            __end_of_tris_clear 2672             load_EEPROM@tmp_8bit 00D3              __end_of_rx_routine 2488  
                  ___aldiv@sign 00D2               __CFG_T3CMX$PORTC0 000000           __end_of_receive_check 1F00  
            __end_of_tx_routine 215E                    ___almod@sign 0026       modbus_addres_check@adress 0005  
             __CFG_FOSC$INTIO67 000000                    _spi_transmit 1B3C  
